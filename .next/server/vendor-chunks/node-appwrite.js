/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-appwrite";
exports.ids = ["vendor-chunks/node-appwrite"];
exports.modules = {

/***/ "(action-browser)/./node_modules/node-appwrite/index.js":
/*!*********************************************!*\
  !*** ./node_modules/node-appwrite/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Client = __webpack_require__(/*! ./lib/client.js */ \"(action-browser)/./node_modules/node-appwrite/lib/client.js\");\nconst Query = __webpack_require__(/*! ./lib/query.js */ \"(action-browser)/./node_modules/node-appwrite/lib/query.js\");\nconst Permission = __webpack_require__(/*! ./lib/permission.js */ \"(action-browser)/./node_modules/node-appwrite/lib/permission.js\");\nconst Role = __webpack_require__(/*! ./lib/role.js */ \"(action-browser)/./node_modules/node-appwrite/lib/role.js\");\nconst ID = __webpack_require__(/*! ./lib/id.js */ \"(action-browser)/./node_modules/node-appwrite/lib/id.js\");\nconst InputFile = __webpack_require__(/*! ./lib/inputFile.js */ \"(action-browser)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst AppwriteException = __webpack_require__(/*! ./lib/exception.js */ \"(action-browser)/./node_modules/node-appwrite/lib/exception.js\");\nconst Account = __webpack_require__(/*! ./lib/services/account.js */ \"(action-browser)/./node_modules/node-appwrite/lib/services/account.js\");\nconst Avatars = __webpack_require__(/*! ./lib/services/avatars.js */ \"(action-browser)/./node_modules/node-appwrite/lib/services/avatars.js\");\nconst Databases = __webpack_require__(/*! ./lib/services/databases.js */ \"(action-browser)/./node_modules/node-appwrite/lib/services/databases.js\");\nconst Functions = __webpack_require__(/*! ./lib/services/functions.js */ \"(action-browser)/./node_modules/node-appwrite/lib/services/functions.js\");\nconst Graphql = __webpack_require__(/*! ./lib/services/graphql.js */ \"(action-browser)/./node_modules/node-appwrite/lib/services/graphql.js\");\nconst Health = __webpack_require__(/*! ./lib/services/health.js */ \"(action-browser)/./node_modules/node-appwrite/lib/services/health.js\");\nconst Locale = __webpack_require__(/*! ./lib/services/locale.js */ \"(action-browser)/./node_modules/node-appwrite/lib/services/locale.js\");\nconst Messaging = __webpack_require__(/*! ./lib/services/messaging.js */ \"(action-browser)/./node_modules/node-appwrite/lib/services/messaging.js\");\nconst Storage = __webpack_require__(/*! ./lib/services/storage.js */ \"(action-browser)/./node_modules/node-appwrite/lib/services/storage.js\");\nconst Teams = __webpack_require__(/*! ./lib/services/teams.js */ \"(action-browser)/./node_modules/node-appwrite/lib/services/teams.js\");\nconst Users = __webpack_require__(/*! ./lib/services/users.js */ \"(action-browser)/./node_modules/node-appwrite/lib/services/users.js\");\nconst AuthenticatorType = __webpack_require__(/*! ./lib/enums/authenticator-type.js */ \"(action-browser)/./node_modules/node-appwrite/lib/enums/authenticator-type.js\");\nconst AuthenticationFactor = __webpack_require__(/*! ./lib/enums/authentication-factor.js */ \"(action-browser)/./node_modules/node-appwrite/lib/enums/authentication-factor.js\");\nconst OAuthProvider = __webpack_require__(/*! ./lib/enums/o-auth-provider.js */ \"(action-browser)/./node_modules/node-appwrite/lib/enums/o-auth-provider.js\");\nconst Browser = __webpack_require__(/*! ./lib/enums/browser.js */ \"(action-browser)/./node_modules/node-appwrite/lib/enums/browser.js\");\nconst CreditCard = __webpack_require__(/*! ./lib/enums/credit-card.js */ \"(action-browser)/./node_modules/node-appwrite/lib/enums/credit-card.js\");\nconst Flag = __webpack_require__(/*! ./lib/enums/flag.js */ \"(action-browser)/./node_modules/node-appwrite/lib/enums/flag.js\");\nconst RelationshipType = __webpack_require__(/*! ./lib/enums/relationship-type.js */ \"(action-browser)/./node_modules/node-appwrite/lib/enums/relationship-type.js\");\nconst RelationMutate = __webpack_require__(/*! ./lib/enums/relation-mutate.js */ \"(action-browser)/./node_modules/node-appwrite/lib/enums/relation-mutate.js\");\nconst IndexType = __webpack_require__(/*! ./lib/enums/index-type.js */ \"(action-browser)/./node_modules/node-appwrite/lib/enums/index-type.js\");\nconst Runtime = __webpack_require__(/*! ./lib/enums/runtime.js */ \"(action-browser)/./node_modules/node-appwrite/lib/enums/runtime.js\");\nconst ExecutionMethod = __webpack_require__(/*! ./lib/enums/execution-method.js */ \"(action-browser)/./node_modules/node-appwrite/lib/enums/execution-method.js\");\nconst Name = __webpack_require__(/*! ./lib/enums/name.js */ \"(action-browser)/./node_modules/node-appwrite/lib/enums/name.js\");\nconst SmtpEncryption = __webpack_require__(/*! ./lib/enums/smtp-encryption.js */ \"(action-browser)/./node_modules/node-appwrite/lib/enums/smtp-encryption.js\");\nconst Compression = __webpack_require__(/*! ./lib/enums/compression.js */ \"(action-browser)/./node_modules/node-appwrite/lib/enums/compression.js\");\nconst ImageGravity = __webpack_require__(/*! ./lib/enums/image-gravity.js */ \"(action-browser)/./node_modules/node-appwrite/lib/enums/image-gravity.js\");\nconst ImageFormat = __webpack_require__(/*! ./lib/enums/image-format.js */ \"(action-browser)/./node_modules/node-appwrite/lib/enums/image-format.js\");\nconst PasswordHash = __webpack_require__(/*! ./lib/enums/password-hash.js */ \"(action-browser)/./node_modules/node-appwrite/lib/enums/password-hash.js\");\nconst MessagingProviderType = __webpack_require__(/*! ./lib/enums/messaging-provider-type.js */ \"(action-browser)/./node_modules/node-appwrite/lib/enums/messaging-provider-type.js\");\n\nmodule.exports = {\n    Client,\n    Query,\n    Permission,\n    Role,\n    ID,\n    InputFile,\n    AppwriteException,\n    Account,\n    Avatars,\n    Databases,\n    Functions,\n    Graphql,\n    Health,\n    Locale,\n    Messaging,\n    Storage,\n    Teams,\n    Users,\n    AuthenticatorType,\n    AuthenticationFactor,\n    OAuthProvider,\n    Browser,\n    CreditCard,\n    Flag,\n    RelationshipType,\n    RelationMutate,\n    IndexType,\n    Runtime,\n    ExecutionMethod,\n    Name,\n    SmtpEncryption,\n    Compression,\n    ImageGravity,\n    ImageFormat,\n    PasswordHash,\n    MessagingProviderType,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLGVBQWUsbUJBQU8sQ0FBQyxvRkFBaUI7QUFDeEMsY0FBYyxtQkFBTyxDQUFDLGtGQUFnQjtBQUN0QyxtQkFBbUIsbUJBQU8sQ0FBQyw0RkFBcUI7QUFDaEQsYUFBYSxtQkFBTyxDQUFDLGdGQUFlO0FBQ3BDLFdBQVcsbUJBQU8sQ0FBQyw0RUFBYTtBQUNoQyxrQkFBa0IsbUJBQU8sQ0FBQywwRkFBb0I7QUFDOUMsMEJBQTBCLG1CQUFPLENBQUMsMEZBQW9CO0FBQ3RELGdCQUFnQixtQkFBTyxDQUFDLHdHQUEyQjtBQUNuRCxnQkFBZ0IsbUJBQU8sQ0FBQyx3R0FBMkI7QUFDbkQsa0JBQWtCLG1CQUFPLENBQUMsNEdBQTZCO0FBQ3ZELGtCQUFrQixtQkFBTyxDQUFDLDRHQUE2QjtBQUN2RCxnQkFBZ0IsbUJBQU8sQ0FBQyx3R0FBMkI7QUFDbkQsZUFBZSxtQkFBTyxDQUFDLHNHQUEwQjtBQUNqRCxlQUFlLG1CQUFPLENBQUMsc0dBQTBCO0FBQ2pELGtCQUFrQixtQkFBTyxDQUFDLDRHQUE2QjtBQUN2RCxnQkFBZ0IsbUJBQU8sQ0FBQyx3R0FBMkI7QUFDbkQsY0FBYyxtQkFBTyxDQUFDLG9HQUF5QjtBQUMvQyxjQUFjLG1CQUFPLENBQUMsb0dBQXlCO0FBQy9DLDBCQUEwQixtQkFBTyxDQUFDLHdIQUFtQztBQUNyRSw2QkFBNkIsbUJBQU8sQ0FBQyw4SEFBc0M7QUFDM0Usc0JBQXNCLG1CQUFPLENBQUMsa0hBQWdDO0FBQzlELGdCQUFnQixtQkFBTyxDQUFDLGtHQUF3QjtBQUNoRCxtQkFBbUIsbUJBQU8sQ0FBQywwR0FBNEI7QUFDdkQsYUFBYSxtQkFBTyxDQUFDLDRGQUFxQjtBQUMxQyx5QkFBeUIsbUJBQU8sQ0FBQyxzSEFBa0M7QUFDbkUsdUJBQXVCLG1CQUFPLENBQUMsa0hBQWdDO0FBQy9ELGtCQUFrQixtQkFBTyxDQUFDLHdHQUEyQjtBQUNyRCxnQkFBZ0IsbUJBQU8sQ0FBQyxrR0FBd0I7QUFDaEQsd0JBQXdCLG1CQUFPLENBQUMsb0hBQWlDO0FBQ2pFLGFBQWEsbUJBQU8sQ0FBQyw0RkFBcUI7QUFDMUMsdUJBQXVCLG1CQUFPLENBQUMsa0hBQWdDO0FBQy9ELG9CQUFvQixtQkFBTyxDQUFDLDBHQUE0QjtBQUN4RCxxQkFBcUIsbUJBQU8sQ0FBQyw4R0FBOEI7QUFDM0Qsb0JBQW9CLG1CQUFPLENBQUMsNEdBQTZCO0FBQ3pELHFCQUFxQixtQkFBTyxDQUFDLDhHQUE4QjtBQUMzRCw4QkFBOEIsbUJBQU8sQ0FBQyxrSUFBd0M7O0FBRTlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9pbmRleC5qcz9kOWE0Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IENsaWVudCA9IHJlcXVpcmUoJy4vbGliL2NsaWVudC5qcycpO1xuY29uc3QgUXVlcnkgPSByZXF1aXJlKCcuL2xpYi9xdWVyeS5qcycpO1xuY29uc3QgUGVybWlzc2lvbiA9IHJlcXVpcmUoJy4vbGliL3Blcm1pc3Npb24uanMnKTtcbmNvbnN0IFJvbGUgPSByZXF1aXJlKCcuL2xpYi9yb2xlLmpzJyk7XG5jb25zdCBJRCA9IHJlcXVpcmUoJy4vbGliL2lkLmpzJyk7XG5jb25zdCBJbnB1dEZpbGUgPSByZXF1aXJlKCcuL2xpYi9pbnB1dEZpbGUuanMnKTtcbmNvbnN0IEFwcHdyaXRlRXhjZXB0aW9uID0gcmVxdWlyZSgnLi9saWIvZXhjZXB0aW9uLmpzJyk7XG5jb25zdCBBY2NvdW50ID0gcmVxdWlyZSgnLi9saWIvc2VydmljZXMvYWNjb3VudC5qcycpO1xuY29uc3QgQXZhdGFycyA9IHJlcXVpcmUoJy4vbGliL3NlcnZpY2VzL2F2YXRhcnMuanMnKTtcbmNvbnN0IERhdGFiYXNlcyA9IHJlcXVpcmUoJy4vbGliL3NlcnZpY2VzL2RhdGFiYXNlcy5qcycpO1xuY29uc3QgRnVuY3Rpb25zID0gcmVxdWlyZSgnLi9saWIvc2VydmljZXMvZnVuY3Rpb25zLmpzJyk7XG5jb25zdCBHcmFwaHFsID0gcmVxdWlyZSgnLi9saWIvc2VydmljZXMvZ3JhcGhxbC5qcycpO1xuY29uc3QgSGVhbHRoID0gcmVxdWlyZSgnLi9saWIvc2VydmljZXMvaGVhbHRoLmpzJyk7XG5jb25zdCBMb2NhbGUgPSByZXF1aXJlKCcuL2xpYi9zZXJ2aWNlcy9sb2NhbGUuanMnKTtcbmNvbnN0IE1lc3NhZ2luZyA9IHJlcXVpcmUoJy4vbGliL3NlcnZpY2VzL21lc3NhZ2luZy5qcycpO1xuY29uc3QgU3RvcmFnZSA9IHJlcXVpcmUoJy4vbGliL3NlcnZpY2VzL3N0b3JhZ2UuanMnKTtcbmNvbnN0IFRlYW1zID0gcmVxdWlyZSgnLi9saWIvc2VydmljZXMvdGVhbXMuanMnKTtcbmNvbnN0IFVzZXJzID0gcmVxdWlyZSgnLi9saWIvc2VydmljZXMvdXNlcnMuanMnKTtcbmNvbnN0IEF1dGhlbnRpY2F0b3JUeXBlID0gcmVxdWlyZShcIi4vbGliL2VudW1zL2F1dGhlbnRpY2F0b3ItdHlwZS5qc1wiKTtcbmNvbnN0IEF1dGhlbnRpY2F0aW9uRmFjdG9yID0gcmVxdWlyZShcIi4vbGliL2VudW1zL2F1dGhlbnRpY2F0aW9uLWZhY3Rvci5qc1wiKTtcbmNvbnN0IE9BdXRoUHJvdmlkZXIgPSByZXF1aXJlKFwiLi9saWIvZW51bXMvby1hdXRoLXByb3ZpZGVyLmpzXCIpO1xuY29uc3QgQnJvd3NlciA9IHJlcXVpcmUoXCIuL2xpYi9lbnVtcy9icm93c2VyLmpzXCIpO1xuY29uc3QgQ3JlZGl0Q2FyZCA9IHJlcXVpcmUoXCIuL2xpYi9lbnVtcy9jcmVkaXQtY2FyZC5qc1wiKTtcbmNvbnN0IEZsYWcgPSByZXF1aXJlKFwiLi9saWIvZW51bXMvZmxhZy5qc1wiKTtcbmNvbnN0IFJlbGF0aW9uc2hpcFR5cGUgPSByZXF1aXJlKFwiLi9saWIvZW51bXMvcmVsYXRpb25zaGlwLXR5cGUuanNcIik7XG5jb25zdCBSZWxhdGlvbk11dGF0ZSA9IHJlcXVpcmUoXCIuL2xpYi9lbnVtcy9yZWxhdGlvbi1tdXRhdGUuanNcIik7XG5jb25zdCBJbmRleFR5cGUgPSByZXF1aXJlKFwiLi9saWIvZW51bXMvaW5kZXgtdHlwZS5qc1wiKTtcbmNvbnN0IFJ1bnRpbWUgPSByZXF1aXJlKFwiLi9saWIvZW51bXMvcnVudGltZS5qc1wiKTtcbmNvbnN0IEV4ZWN1dGlvbk1ldGhvZCA9IHJlcXVpcmUoXCIuL2xpYi9lbnVtcy9leGVjdXRpb24tbWV0aG9kLmpzXCIpO1xuY29uc3QgTmFtZSA9IHJlcXVpcmUoXCIuL2xpYi9lbnVtcy9uYW1lLmpzXCIpO1xuY29uc3QgU210cEVuY3J5cHRpb24gPSByZXF1aXJlKFwiLi9saWIvZW51bXMvc210cC1lbmNyeXB0aW9uLmpzXCIpO1xuY29uc3QgQ29tcHJlc3Npb24gPSByZXF1aXJlKFwiLi9saWIvZW51bXMvY29tcHJlc3Npb24uanNcIik7XG5jb25zdCBJbWFnZUdyYXZpdHkgPSByZXF1aXJlKFwiLi9saWIvZW51bXMvaW1hZ2UtZ3Jhdml0eS5qc1wiKTtcbmNvbnN0IEltYWdlRm9ybWF0ID0gcmVxdWlyZShcIi4vbGliL2VudW1zL2ltYWdlLWZvcm1hdC5qc1wiKTtcbmNvbnN0IFBhc3N3b3JkSGFzaCA9IHJlcXVpcmUoXCIuL2xpYi9lbnVtcy9wYXNzd29yZC1oYXNoLmpzXCIpO1xuY29uc3QgTWVzc2FnaW5nUHJvdmlkZXJUeXBlID0gcmVxdWlyZShcIi4vbGliL2VudW1zL21lc3NhZ2luZy1wcm92aWRlci10eXBlLmpzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBDbGllbnQsXG4gICAgUXVlcnksXG4gICAgUGVybWlzc2lvbixcbiAgICBSb2xlLFxuICAgIElELFxuICAgIElucHV0RmlsZSxcbiAgICBBcHB3cml0ZUV4Y2VwdGlvbixcbiAgICBBY2NvdW50LFxuICAgIEF2YXRhcnMsXG4gICAgRGF0YWJhc2VzLFxuICAgIEZ1bmN0aW9ucyxcbiAgICBHcmFwaHFsLFxuICAgIEhlYWx0aCxcbiAgICBMb2NhbGUsXG4gICAgTWVzc2FnaW5nLFxuICAgIFN0b3JhZ2UsXG4gICAgVGVhbXMsXG4gICAgVXNlcnMsXG4gICAgQXV0aGVudGljYXRvclR5cGUsXG4gICAgQXV0aGVudGljYXRpb25GYWN0b3IsXG4gICAgT0F1dGhQcm92aWRlcixcbiAgICBCcm93c2VyLFxuICAgIENyZWRpdENhcmQsXG4gICAgRmxhZyxcbiAgICBSZWxhdGlvbnNoaXBUeXBlLFxuICAgIFJlbGF0aW9uTXV0YXRlLFxuICAgIEluZGV4VHlwZSxcbiAgICBSdW50aW1lLFxuICAgIEV4ZWN1dGlvbk1ldGhvZCxcbiAgICBOYW1lLFxuICAgIFNtdHBFbmNyeXB0aW9uLFxuICAgIENvbXByZXNzaW9uLFxuICAgIEltYWdlR3Jhdml0eSxcbiAgICBJbWFnZUZvcm1hdCxcbiAgICBQYXNzd29yZEhhc2gsXG4gICAgTWVzc2FnaW5nUHJvdmlkZXJUeXBlLFxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/index.js":
/*!*********************************************!*\
  !*** ./node_modules/node-appwrite/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Client = __webpack_require__(/*! ./lib/client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Query = __webpack_require__(/*! ./lib/query.js */ \"(rsc)/./node_modules/node-appwrite/lib/query.js\");\nconst Permission = __webpack_require__(/*! ./lib/permission.js */ \"(rsc)/./node_modules/node-appwrite/lib/permission.js\");\nconst Role = __webpack_require__(/*! ./lib/role.js */ \"(rsc)/./node_modules/node-appwrite/lib/role.js\");\nconst ID = __webpack_require__(/*! ./lib/id.js */ \"(rsc)/./node_modules/node-appwrite/lib/id.js\");\nconst InputFile = __webpack_require__(/*! ./lib/inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst AppwriteException = __webpack_require__(/*! ./lib/exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst Account = __webpack_require__(/*! ./lib/services/account.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/account.js\");\nconst Avatars = __webpack_require__(/*! ./lib/services/avatars.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/avatars.js\");\nconst Databases = __webpack_require__(/*! ./lib/services/databases.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/databases.js\");\nconst Functions = __webpack_require__(/*! ./lib/services/functions.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/functions.js\");\nconst Graphql = __webpack_require__(/*! ./lib/services/graphql.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/graphql.js\");\nconst Health = __webpack_require__(/*! ./lib/services/health.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/health.js\");\nconst Locale = __webpack_require__(/*! ./lib/services/locale.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/locale.js\");\nconst Messaging = __webpack_require__(/*! ./lib/services/messaging.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/messaging.js\");\nconst Storage = __webpack_require__(/*! ./lib/services/storage.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/storage.js\");\nconst Teams = __webpack_require__(/*! ./lib/services/teams.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/teams.js\");\nconst Users = __webpack_require__(/*! ./lib/services/users.js */ \"(rsc)/./node_modules/node-appwrite/lib/services/users.js\");\nconst AuthenticatorType = __webpack_require__(/*! ./lib/enums/authenticator-type.js */ \"(rsc)/./node_modules/node-appwrite/lib/enums/authenticator-type.js\");\nconst AuthenticationFactor = __webpack_require__(/*! ./lib/enums/authentication-factor.js */ \"(rsc)/./node_modules/node-appwrite/lib/enums/authentication-factor.js\");\nconst OAuthProvider = __webpack_require__(/*! ./lib/enums/o-auth-provider.js */ \"(rsc)/./node_modules/node-appwrite/lib/enums/o-auth-provider.js\");\nconst Browser = __webpack_require__(/*! ./lib/enums/browser.js */ \"(rsc)/./node_modules/node-appwrite/lib/enums/browser.js\");\nconst CreditCard = __webpack_require__(/*! ./lib/enums/credit-card.js */ \"(rsc)/./node_modules/node-appwrite/lib/enums/credit-card.js\");\nconst Flag = __webpack_require__(/*! ./lib/enums/flag.js */ \"(rsc)/./node_modules/node-appwrite/lib/enums/flag.js\");\nconst RelationshipType = __webpack_require__(/*! ./lib/enums/relationship-type.js */ \"(rsc)/./node_modules/node-appwrite/lib/enums/relationship-type.js\");\nconst RelationMutate = __webpack_require__(/*! ./lib/enums/relation-mutate.js */ \"(rsc)/./node_modules/node-appwrite/lib/enums/relation-mutate.js\");\nconst IndexType = __webpack_require__(/*! ./lib/enums/index-type.js */ \"(rsc)/./node_modules/node-appwrite/lib/enums/index-type.js\");\nconst Runtime = __webpack_require__(/*! ./lib/enums/runtime.js */ \"(rsc)/./node_modules/node-appwrite/lib/enums/runtime.js\");\nconst ExecutionMethod = __webpack_require__(/*! ./lib/enums/execution-method.js */ \"(rsc)/./node_modules/node-appwrite/lib/enums/execution-method.js\");\nconst Name = __webpack_require__(/*! ./lib/enums/name.js */ \"(rsc)/./node_modules/node-appwrite/lib/enums/name.js\");\nconst SmtpEncryption = __webpack_require__(/*! ./lib/enums/smtp-encryption.js */ \"(rsc)/./node_modules/node-appwrite/lib/enums/smtp-encryption.js\");\nconst Compression = __webpack_require__(/*! ./lib/enums/compression.js */ \"(rsc)/./node_modules/node-appwrite/lib/enums/compression.js\");\nconst ImageGravity = __webpack_require__(/*! ./lib/enums/image-gravity.js */ \"(rsc)/./node_modules/node-appwrite/lib/enums/image-gravity.js\");\nconst ImageFormat = __webpack_require__(/*! ./lib/enums/image-format.js */ \"(rsc)/./node_modules/node-appwrite/lib/enums/image-format.js\");\nconst PasswordHash = __webpack_require__(/*! ./lib/enums/password-hash.js */ \"(rsc)/./node_modules/node-appwrite/lib/enums/password-hash.js\");\nconst MessagingProviderType = __webpack_require__(/*! ./lib/enums/messaging-provider-type.js */ \"(rsc)/./node_modules/node-appwrite/lib/enums/messaging-provider-type.js\");\n\nmodule.exports = {\n    Client,\n    Query,\n    Permission,\n    Role,\n    ID,\n    InputFile,\n    AppwriteException,\n    Account,\n    Avatars,\n    Databases,\n    Functions,\n    Graphql,\n    Health,\n    Locale,\n    Messaging,\n    Storage,\n    Teams,\n    Users,\n    AuthenticatorType,\n    AuthenticationFactor,\n    OAuthProvider,\n    Browser,\n    CreditCard,\n    Flag,\n    RelationshipType,\n    RelationMutate,\n    IndexType,\n    Runtime,\n    ExecutionMethod,\n    Name,\n    SmtpEncryption,\n    Compression,\n    ImageGravity,\n    ImageFormat,\n    PasswordHash,\n    MessagingProviderType,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMseUVBQWlCO0FBQ3hDLGNBQWMsbUJBQU8sQ0FBQyx1RUFBZ0I7QUFDdEMsbUJBQW1CLG1CQUFPLENBQUMsaUZBQXFCO0FBQ2hELGFBQWEsbUJBQU8sQ0FBQyxxRUFBZTtBQUNwQyxXQUFXLG1CQUFPLENBQUMsaUVBQWE7QUFDaEMsa0JBQWtCLG1CQUFPLENBQUMsK0VBQW9CO0FBQzlDLDBCQUEwQixtQkFBTyxDQUFDLCtFQUFvQjtBQUN0RCxnQkFBZ0IsbUJBQU8sQ0FBQyw2RkFBMkI7QUFDbkQsZ0JBQWdCLG1CQUFPLENBQUMsNkZBQTJCO0FBQ25ELGtCQUFrQixtQkFBTyxDQUFDLGlHQUE2QjtBQUN2RCxrQkFBa0IsbUJBQU8sQ0FBQyxpR0FBNkI7QUFDdkQsZ0JBQWdCLG1CQUFPLENBQUMsNkZBQTJCO0FBQ25ELGVBQWUsbUJBQU8sQ0FBQywyRkFBMEI7QUFDakQsZUFBZSxtQkFBTyxDQUFDLDJGQUEwQjtBQUNqRCxrQkFBa0IsbUJBQU8sQ0FBQyxpR0FBNkI7QUFDdkQsZ0JBQWdCLG1CQUFPLENBQUMsNkZBQTJCO0FBQ25ELGNBQWMsbUJBQU8sQ0FBQyx5RkFBeUI7QUFDL0MsY0FBYyxtQkFBTyxDQUFDLHlGQUF5QjtBQUMvQywwQkFBMEIsbUJBQU8sQ0FBQyw2R0FBbUM7QUFDckUsNkJBQTZCLG1CQUFPLENBQUMsbUhBQXNDO0FBQzNFLHNCQUFzQixtQkFBTyxDQUFDLHVHQUFnQztBQUM5RCxnQkFBZ0IsbUJBQU8sQ0FBQyx1RkFBd0I7QUFDaEQsbUJBQW1CLG1CQUFPLENBQUMsK0ZBQTRCO0FBQ3ZELGFBQWEsbUJBQU8sQ0FBQyxpRkFBcUI7QUFDMUMseUJBQXlCLG1CQUFPLENBQUMsMkdBQWtDO0FBQ25FLHVCQUF1QixtQkFBTyxDQUFDLHVHQUFnQztBQUMvRCxrQkFBa0IsbUJBQU8sQ0FBQyw2RkFBMkI7QUFDckQsZ0JBQWdCLG1CQUFPLENBQUMsdUZBQXdCO0FBQ2hELHdCQUF3QixtQkFBTyxDQUFDLHlHQUFpQztBQUNqRSxhQUFhLG1CQUFPLENBQUMsaUZBQXFCO0FBQzFDLHVCQUF1QixtQkFBTyxDQUFDLHVHQUFnQztBQUMvRCxvQkFBb0IsbUJBQU8sQ0FBQywrRkFBNEI7QUFDeEQscUJBQXFCLG1CQUFPLENBQUMsbUdBQThCO0FBQzNELG9CQUFvQixtQkFBTyxDQUFDLGlHQUE2QjtBQUN6RCxxQkFBcUIsbUJBQU8sQ0FBQyxtR0FBOEI7QUFDM0QsOEJBQThCLG1CQUFPLENBQUMsdUhBQXdDOztBQUU5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyZXB1bHNlLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvaW5kZXguanM/YmYwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBDbGllbnQgPSByZXF1aXJlKCcuL2xpYi9jbGllbnQuanMnKTtcbmNvbnN0IFF1ZXJ5ID0gcmVxdWlyZSgnLi9saWIvcXVlcnkuanMnKTtcbmNvbnN0IFBlcm1pc3Npb24gPSByZXF1aXJlKCcuL2xpYi9wZXJtaXNzaW9uLmpzJyk7XG5jb25zdCBSb2xlID0gcmVxdWlyZSgnLi9saWIvcm9sZS5qcycpO1xuY29uc3QgSUQgPSByZXF1aXJlKCcuL2xpYi9pZC5qcycpO1xuY29uc3QgSW5wdXRGaWxlID0gcmVxdWlyZSgnLi9saWIvaW5wdXRGaWxlLmpzJyk7XG5jb25zdCBBcHB3cml0ZUV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vbGliL2V4Y2VwdGlvbi5qcycpO1xuY29uc3QgQWNjb3VudCA9IHJlcXVpcmUoJy4vbGliL3NlcnZpY2VzL2FjY291bnQuanMnKTtcbmNvbnN0IEF2YXRhcnMgPSByZXF1aXJlKCcuL2xpYi9zZXJ2aWNlcy9hdmF0YXJzLmpzJyk7XG5jb25zdCBEYXRhYmFzZXMgPSByZXF1aXJlKCcuL2xpYi9zZXJ2aWNlcy9kYXRhYmFzZXMuanMnKTtcbmNvbnN0IEZ1bmN0aW9ucyA9IHJlcXVpcmUoJy4vbGliL3NlcnZpY2VzL2Z1bmN0aW9ucy5qcycpO1xuY29uc3QgR3JhcGhxbCA9IHJlcXVpcmUoJy4vbGliL3NlcnZpY2VzL2dyYXBocWwuanMnKTtcbmNvbnN0IEhlYWx0aCA9IHJlcXVpcmUoJy4vbGliL3NlcnZpY2VzL2hlYWx0aC5qcycpO1xuY29uc3QgTG9jYWxlID0gcmVxdWlyZSgnLi9saWIvc2VydmljZXMvbG9jYWxlLmpzJyk7XG5jb25zdCBNZXNzYWdpbmcgPSByZXF1aXJlKCcuL2xpYi9zZXJ2aWNlcy9tZXNzYWdpbmcuanMnKTtcbmNvbnN0IFN0b3JhZ2UgPSByZXF1aXJlKCcuL2xpYi9zZXJ2aWNlcy9zdG9yYWdlLmpzJyk7XG5jb25zdCBUZWFtcyA9IHJlcXVpcmUoJy4vbGliL3NlcnZpY2VzL3RlYW1zLmpzJyk7XG5jb25zdCBVc2VycyA9IHJlcXVpcmUoJy4vbGliL3NlcnZpY2VzL3VzZXJzLmpzJyk7XG5jb25zdCBBdXRoZW50aWNhdG9yVHlwZSA9IHJlcXVpcmUoXCIuL2xpYi9lbnVtcy9hdXRoZW50aWNhdG9yLXR5cGUuanNcIik7XG5jb25zdCBBdXRoZW50aWNhdGlvbkZhY3RvciA9IHJlcXVpcmUoXCIuL2xpYi9lbnVtcy9hdXRoZW50aWNhdGlvbi1mYWN0b3IuanNcIik7XG5jb25zdCBPQXV0aFByb3ZpZGVyID0gcmVxdWlyZShcIi4vbGliL2VudW1zL28tYXV0aC1wcm92aWRlci5qc1wiKTtcbmNvbnN0IEJyb3dzZXIgPSByZXF1aXJlKFwiLi9saWIvZW51bXMvYnJvd3Nlci5qc1wiKTtcbmNvbnN0IENyZWRpdENhcmQgPSByZXF1aXJlKFwiLi9saWIvZW51bXMvY3JlZGl0LWNhcmQuanNcIik7XG5jb25zdCBGbGFnID0gcmVxdWlyZShcIi4vbGliL2VudW1zL2ZsYWcuanNcIik7XG5jb25zdCBSZWxhdGlvbnNoaXBUeXBlID0gcmVxdWlyZShcIi4vbGliL2VudW1zL3JlbGF0aW9uc2hpcC10eXBlLmpzXCIpO1xuY29uc3QgUmVsYXRpb25NdXRhdGUgPSByZXF1aXJlKFwiLi9saWIvZW51bXMvcmVsYXRpb24tbXV0YXRlLmpzXCIpO1xuY29uc3QgSW5kZXhUeXBlID0gcmVxdWlyZShcIi4vbGliL2VudW1zL2luZGV4LXR5cGUuanNcIik7XG5jb25zdCBSdW50aW1lID0gcmVxdWlyZShcIi4vbGliL2VudW1zL3J1bnRpbWUuanNcIik7XG5jb25zdCBFeGVjdXRpb25NZXRob2QgPSByZXF1aXJlKFwiLi9saWIvZW51bXMvZXhlY3V0aW9uLW1ldGhvZC5qc1wiKTtcbmNvbnN0IE5hbWUgPSByZXF1aXJlKFwiLi9saWIvZW51bXMvbmFtZS5qc1wiKTtcbmNvbnN0IFNtdHBFbmNyeXB0aW9uID0gcmVxdWlyZShcIi4vbGliL2VudW1zL3NtdHAtZW5jcnlwdGlvbi5qc1wiKTtcbmNvbnN0IENvbXByZXNzaW9uID0gcmVxdWlyZShcIi4vbGliL2VudW1zL2NvbXByZXNzaW9uLmpzXCIpO1xuY29uc3QgSW1hZ2VHcmF2aXR5ID0gcmVxdWlyZShcIi4vbGliL2VudW1zL2ltYWdlLWdyYXZpdHkuanNcIik7XG5jb25zdCBJbWFnZUZvcm1hdCA9IHJlcXVpcmUoXCIuL2xpYi9lbnVtcy9pbWFnZS1mb3JtYXQuanNcIik7XG5jb25zdCBQYXNzd29yZEhhc2ggPSByZXF1aXJlKFwiLi9saWIvZW51bXMvcGFzc3dvcmQtaGFzaC5qc1wiKTtcbmNvbnN0IE1lc3NhZ2luZ1Byb3ZpZGVyVHlwZSA9IHJlcXVpcmUoXCIuL2xpYi9lbnVtcy9tZXNzYWdpbmctcHJvdmlkZXItdHlwZS5qc1wiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgQ2xpZW50LFxuICAgIFF1ZXJ5LFxuICAgIFBlcm1pc3Npb24sXG4gICAgUm9sZSxcbiAgICBJRCxcbiAgICBJbnB1dEZpbGUsXG4gICAgQXBwd3JpdGVFeGNlcHRpb24sXG4gICAgQWNjb3VudCxcbiAgICBBdmF0YXJzLFxuICAgIERhdGFiYXNlcyxcbiAgICBGdW5jdGlvbnMsXG4gICAgR3JhcGhxbCxcbiAgICBIZWFsdGgsXG4gICAgTG9jYWxlLFxuICAgIE1lc3NhZ2luZyxcbiAgICBTdG9yYWdlLFxuICAgIFRlYW1zLFxuICAgIFVzZXJzLFxuICAgIEF1dGhlbnRpY2F0b3JUeXBlLFxuICAgIEF1dGhlbnRpY2F0aW9uRmFjdG9yLFxuICAgIE9BdXRoUHJvdmlkZXIsXG4gICAgQnJvd3NlcixcbiAgICBDcmVkaXRDYXJkLFxuICAgIEZsYWcsXG4gICAgUmVsYXRpb25zaGlwVHlwZSxcbiAgICBSZWxhdGlvbk11dGF0ZSxcbiAgICBJbmRleFR5cGUsXG4gICAgUnVudGltZSxcbiAgICBFeGVjdXRpb25NZXRob2QsXG4gICAgTmFtZSxcbiAgICBTbXRwRW5jcnlwdGlvbixcbiAgICBDb21wcmVzc2lvbixcbiAgICBJbWFnZUdyYXZpdHksXG4gICAgSW1hZ2VGb3JtYXQsXG4gICAgUGFzc3dvcmRIYXNoLFxuICAgIE1lc3NhZ2luZ1Byb3ZpZGVyVHlwZSxcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/client.js":
/*!**************************************************!*\
  !*** ./node_modules/node-appwrite/lib/client.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const os = __webpack_require__(/*! os */ \"os\");\nconst URL = (__webpack_require__(/*! url */ \"url\").URL);\nconst Query = __webpack_require__(/*! ./query.js */ \"(action-browser)/./node_modules/node-appwrite/lib/query.js\");\nconst {fetch, FormData, Agent} = __webpack_require__(/*! undici */ \"undici\");\nconst AppwriteException = __webpack_require__(/*! ./exception.js */ \"(action-browser)/./node_modules/node-appwrite/lib/exception.js\");\n\nclass Client {\n    static CHUNK_SIZE = 5*1024*1024; // 5MB\n    \n    constructor() {\n        this.endpoint = 'https://cloud.appwrite.io/v1';\n        this.headers = {\n            'accept-encoding': '*',\n            'content-type': '',\n            'user-agent' : `AppwriteNodeJSSDK/12.0.1 (${os.type()}; ${os.version()}; ${os.arch()})`,\n            'x-sdk-name': 'Node.js',\n            'x-sdk-platform': 'server',\n            'x-sdk-language': 'nodejs',\n            'x-sdk-version': '12.0.1',\n            'X-Appwrite-Response-Format' : '1.5.0',\n        };\n        this.selfSigned = false;\n    }\n\n    /**\n     * Set Project\n     *\n     * Your project ID\n     *\n     * @param {string} project\n     *\n     * @return Client\n     */\n    setProject(project) {\n        this.addHeader('X-Appwrite-Project', project);\n\n        return this;\n    }\n\n    /**\n     * Set Key\n     *\n     * Your secret API key\n     *\n     * @param {string} key\n     *\n     * @return Client\n     */\n    setKey(key) {\n        this.addHeader('X-Appwrite-Key', key);\n\n        return this;\n    }\n\n    /**\n     * Set JWT\n     *\n     * Your secret JSON Web Token\n     *\n     * @param {string} jwt\n     *\n     * @return Client\n     */\n    setJWT(jwt) {\n        this.addHeader('X-Appwrite-JWT', jwt);\n\n        return this;\n    }\n\n    /**\n     * Set Locale\n     *\n     * @param {string} locale\n     *\n     * @return Client\n     */\n    setLocale(locale) {\n        this.addHeader('X-Appwrite-Locale', locale);\n\n        return this;\n    }\n\n    /**\n     * Set Session\n     *\n     * The user session to authenticate with\n     *\n     * @param {string} session\n     *\n     * @return Client\n     */\n    setSession(session) {\n        this.addHeader('X-Appwrite-Session', session);\n\n        return this;\n    }\n\n    /**\n     * Set ForwardedUserAgent\n     *\n     * The user agent string of the client that made the request\n     *\n     * @param {string} forwardeduseragent\n     *\n     * @return Client\n     */\n    setForwardedUserAgent(forwardeduseragent) {\n        this.addHeader('X-Forwarded-User-Agent', forwardeduseragent);\n\n        return this;\n    }\n\n    /**\n     * Set self signed.\n     *\n     * @param {bool} status\n     *\n     * @return this\n     */\n    setSelfSigned(status = true) {\n        this.selfSigned = status;\n\n        return this;\n    }\n\n    /**\n     * Set endpoint.\n     *\n     * @param {string} endpoint\n     *\n     * @return this\n     */\n    setEndpoint(endpoint)\n    {\n        this.endpoint = endpoint;\n\n        return this;\n    }\n\n    /**\n     * Sets a header for requests.\n     * \n     * @param {string} key\n     * @param {string} value\n     * \n     * @return this\n     */\n    addHeader(key, value) {\n        this.headers[key.toLowerCase()] = value;\n        \n        return this;\n    }\n      \n    async call(method, path = \"\", headers = {}, params = {}, responseType = \"json\") {\n        headers = {...this.headers, ...headers};\n        const url = new URL(this.endpoint + path);\n\n        let body = undefined;\n\n        if (method.toUpperCase() === \"GET\") {\n            url.search = new URLSearchParams(Client.flatten(params)).toString();\n        } else if (headers[\"content-type\"]?.toLowerCase().startsWith(\"multipart/form-data\")) {\n            delete headers[\"content-type\"];\n            const formData = new FormData();\n\n            const flatParams = Client.flatten(params);\n\n            for (const [key, value] of Object.entries(flatParams)) {\n                if (value && value.type && value.type === \"file\") {\n                    formData.append(key, value.file, value.filename);\n                } else {\n                    formData.append(key, value);\n                }\n            }\n\n            body = formData;\n        } else {\n            body = JSON.stringify(params);\n        }\n\n      let response = undefined;\n      try {\n        response = await fetch(url.toString(), {\n            method: method.toUpperCase(),\n            headers,\n            body,\n            redirect: responseType === \"location\" ? \"manual\" : \"follow\",\n            dispatcher: new Agent({\n                connect: {\n                    rejectUnauthorized: !this.selfSigned,\n                },\n            }),\n        });\n      } catch (error) {\n        throw new AppwriteException(error.message);\n      }\n\n      if (response.status >= 400) {\n        const text = await response.text();\n        let json = undefined;\n        try {\n            json = JSON.parse(text);\n        } catch (error) {\n            throw new AppwriteException(text, response.status, \"\", text);\n        }\n        throw new AppwriteException(json.message, json.code, json.type, json);\n      }\n\n      if (responseType === \"arraybuffer\") {\n        const data = await response.arrayBuffer();\n        return data;\n      }\n\n      if (responseType === \"location\") {\n        return response.headers.get(\"location\");\n      }\n\n      const text = await response.text();\n      let json = undefined;\n      try {\n          json = JSON.parse(text);\n      } catch (error) {\n          return text;\n      }\n      return json;\n    }\n\n    static flatten(data, prefix = \"\") {\n        let output = {};\n\n        for (const [key, value] of Object.entries(data)) {\n            let finalKey = prefix ? prefix + \"[\" + key + \"]\" : key;\n\n            if (Array.isArray(value)) {\n                output = { ...output, ...Client.flatten(value, finalKey) };\n            } else {\n                output[finalKey] = value;\n            }\n        }\n\n        return output;\n    }\n}\n\nmodule.exports = Client;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/client.js":
/*!**************************************************!*\
  !*** ./node_modules/node-appwrite/lib/client.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const os = __webpack_require__(/*! os */ \"os\");\nconst URL = (__webpack_require__(/*! url */ \"url\").URL);\nconst Query = __webpack_require__(/*! ./query.js */ \"(rsc)/./node_modules/node-appwrite/lib/query.js\");\nconst {fetch, FormData, Agent} = __webpack_require__(/*! undici */ \"undici\");\nconst AppwriteException = __webpack_require__(/*! ./exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\n\nclass Client {\n    static CHUNK_SIZE = 5*1024*1024; // 5MB\n    \n    constructor() {\n        this.endpoint = 'https://cloud.appwrite.io/v1';\n        this.headers = {\n            'accept-encoding': '*',\n            'content-type': '',\n            'user-agent' : `AppwriteNodeJSSDK/12.0.1 (${os.type()}; ${os.version()}; ${os.arch()})`,\n            'x-sdk-name': 'Node.js',\n            'x-sdk-platform': 'server',\n            'x-sdk-language': 'nodejs',\n            'x-sdk-version': '12.0.1',\n            'X-Appwrite-Response-Format' : '1.5.0',\n        };\n        this.selfSigned = false;\n    }\n\n    /**\n     * Set Project\n     *\n     * Your project ID\n     *\n     * @param {string} project\n     *\n     * @return Client\n     */\n    setProject(project) {\n        this.addHeader('X-Appwrite-Project', project);\n\n        return this;\n    }\n\n    /**\n     * Set Key\n     *\n     * Your secret API key\n     *\n     * @param {string} key\n     *\n     * @return Client\n     */\n    setKey(key) {\n        this.addHeader('X-Appwrite-Key', key);\n\n        return this;\n    }\n\n    /**\n     * Set JWT\n     *\n     * Your secret JSON Web Token\n     *\n     * @param {string} jwt\n     *\n     * @return Client\n     */\n    setJWT(jwt) {\n        this.addHeader('X-Appwrite-JWT', jwt);\n\n        return this;\n    }\n\n    /**\n     * Set Locale\n     *\n     * @param {string} locale\n     *\n     * @return Client\n     */\n    setLocale(locale) {\n        this.addHeader('X-Appwrite-Locale', locale);\n\n        return this;\n    }\n\n    /**\n     * Set Session\n     *\n     * The user session to authenticate with\n     *\n     * @param {string} session\n     *\n     * @return Client\n     */\n    setSession(session) {\n        this.addHeader('X-Appwrite-Session', session);\n\n        return this;\n    }\n\n    /**\n     * Set ForwardedUserAgent\n     *\n     * The user agent string of the client that made the request\n     *\n     * @param {string} forwardeduseragent\n     *\n     * @return Client\n     */\n    setForwardedUserAgent(forwardeduseragent) {\n        this.addHeader('X-Forwarded-User-Agent', forwardeduseragent);\n\n        return this;\n    }\n\n    /**\n     * Set self signed.\n     *\n     * @param {bool} status\n     *\n     * @return this\n     */\n    setSelfSigned(status = true) {\n        this.selfSigned = status;\n\n        return this;\n    }\n\n    /**\n     * Set endpoint.\n     *\n     * @param {string} endpoint\n     *\n     * @return this\n     */\n    setEndpoint(endpoint)\n    {\n        this.endpoint = endpoint;\n\n        return this;\n    }\n\n    /**\n     * Sets a header for requests.\n     * \n     * @param {string} key\n     * @param {string} value\n     * \n     * @return this\n     */\n    addHeader(key, value) {\n        this.headers[key.toLowerCase()] = value;\n        \n        return this;\n    }\n      \n    async call(method, path = \"\", headers = {}, params = {}, responseType = \"json\") {\n        headers = {...this.headers, ...headers};\n        const url = new URL(this.endpoint + path);\n\n        let body = undefined;\n\n        if (method.toUpperCase() === \"GET\") {\n            url.search = new URLSearchParams(Client.flatten(params)).toString();\n        } else if (headers[\"content-type\"]?.toLowerCase().startsWith(\"multipart/form-data\")) {\n            delete headers[\"content-type\"];\n            const formData = new FormData();\n\n            const flatParams = Client.flatten(params);\n\n            for (const [key, value] of Object.entries(flatParams)) {\n                if (value && value.type && value.type === \"file\") {\n                    formData.append(key, value.file, value.filename);\n                } else {\n                    formData.append(key, value);\n                }\n            }\n\n            body = formData;\n        } else {\n            body = JSON.stringify(params);\n        }\n\n      let response = undefined;\n      try {\n        response = await fetch(url.toString(), {\n            method: method.toUpperCase(),\n            headers,\n            body,\n            redirect: responseType === \"location\" ? \"manual\" : \"follow\",\n            dispatcher: new Agent({\n                connect: {\n                    rejectUnauthorized: !this.selfSigned,\n                },\n            }),\n        });\n      } catch (error) {\n        throw new AppwriteException(error.message);\n      }\n\n      if (response.status >= 400) {\n        const text = await response.text();\n        let json = undefined;\n        try {\n            json = JSON.parse(text);\n        } catch (error) {\n            throw new AppwriteException(text, response.status, \"\", text);\n        }\n        throw new AppwriteException(json.message, json.code, json.type, json);\n      }\n\n      if (responseType === \"arraybuffer\") {\n        const data = await response.arrayBuffer();\n        return data;\n      }\n\n      if (responseType === \"location\") {\n        return response.headers.get(\"location\");\n      }\n\n      const text = await response.text();\n      let json = undefined;\n      try {\n          json = JSON.parse(text);\n      } catch (error) {\n          return text;\n      }\n      return json;\n    }\n\n    static flatten(data, prefix = \"\") {\n        let output = {};\n\n        for (const [key, value] of Object.entries(data)) {\n            let finalKey = prefix ? prefix + \"[\" + key + \"]\" : key;\n\n            if (Array.isArray(value)) {\n                output = { ...output, ...Client.flatten(value, finalKey) };\n            } else {\n                output[finalKey] = value;\n            }\n        }\n\n        return output;\n    }\n}\n\nmodule.exports = Client;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/client.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/enums/authentication-factor.js":
/*!***********************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/authentication-factor.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("const AuthenticationFactor = Object.freeze({\n    Email: 'email' ,\n    Phone: 'phone' ,\n    Totp: 'totp' ,\n    Recoverycode: 'recoverycode' \n});\n\nmodule.exports = AuthenticationFactor;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9hdXRoZW50aWNhdGlvbi1mYWN0b3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvYXV0aGVudGljYXRpb24tZmFjdG9yLmpzP2NkYjgiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQXV0aGVudGljYXRpb25GYWN0b3IgPSBPYmplY3QuZnJlZXplKHtcbiAgICBFbWFpbDogJ2VtYWlsJyAsXG4gICAgUGhvbmU6ICdwaG9uZScgLFxuICAgIFRvdHA6ICd0b3RwJyAsXG4gICAgUmVjb3Zlcnljb2RlOiAncmVjb3Zlcnljb2RlJyBcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF1dGhlbnRpY2F0aW9uRmFjdG9yOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/enums/authentication-factor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/enums/authentication-factor.js":
/*!***********************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/authentication-factor.js ***!
  \***********************************************************************/
/***/ ((module) => {

eval("const AuthenticationFactor = Object.freeze({\n    Email: 'email' ,\n    Phone: 'phone' ,\n    Totp: 'totp' ,\n    Recoverycode: 'recoverycode' \n});\n\nmodule.exports = AuthenticationFactor;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvYXV0aGVudGljYXRpb24tZmFjdG9yLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyZXB1bHNlLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL2VudW1zL2F1dGhlbnRpY2F0aW9uLWZhY3Rvci5qcz9iZmUyIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEF1dGhlbnRpY2F0aW9uRmFjdG9yID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgRW1haWw6ICdlbWFpbCcgLFxuICAgIFBob25lOiAncGhvbmUnICxcbiAgICBUb3RwOiAndG90cCcgLFxuICAgIFJlY292ZXJ5Y29kZTogJ3JlY292ZXJ5Y29kZScgXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdXRoZW50aWNhdGlvbkZhY3RvcjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/enums/authentication-factor.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/enums/authenticator-type.js":
/*!********************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/authenticator-type.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("const AuthenticatorType = Object.freeze({\n    Totp: 'totp' \n});\n\nmodule.exports = AuthenticatorType;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9hdXRoZW50aWNhdG9yLXR5cGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvYXV0aGVudGljYXRvci10eXBlLmpzPzYyNTQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQXV0aGVudGljYXRvclR5cGUgPSBPYmplY3QuZnJlZXplKHtcbiAgICBUb3RwOiAndG90cCcgXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBdXRoZW50aWNhdG9yVHlwZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/enums/authenticator-type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/enums/authenticator-type.js":
/*!********************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/authenticator-type.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("const AuthenticatorType = Object.freeze({\n    Totp: 'totp' \n});\n\nmodule.exports = AuthenticatorType;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvYXV0aGVudGljYXRvci10eXBlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyZXB1bHNlLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL2VudW1zL2F1dGhlbnRpY2F0b3ItdHlwZS5qcz8wNTM3Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEF1dGhlbnRpY2F0b3JUeXBlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgVG90cDogJ3RvdHAnIFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXV0aGVudGljYXRvclR5cGU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/enums/authenticator-type.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/enums/browser.js":
/*!*********************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/browser.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("const Browser = Object.freeze({\n    AvantBrowser: 'aa' ,\n    AndroidWebViewBeta: 'an' ,\n    GoogleChrome: 'ch' ,\n    GoogleChromeIOS: 'ci' ,\n    GoogleChromeMobile: 'cm' ,\n    Chromium: 'cr' ,\n    MozillaFirefox: 'ff' ,\n    Safari: 'sf' ,\n    MobileSafari: 'mf' ,\n    MicrosoftEdge: 'ps' ,\n    MicrosoftEdgeIOS: 'oi' ,\n    OperaMini: 'om' ,\n    Opera: 'op' ,\n    OperaNext: 'on' \n});\n\nmodule.exports = Browser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9icm93c2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvYnJvd3Nlci5qcz9mNmQ3Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEJyb3dzZXIgPSBPYmplY3QuZnJlZXplKHtcbiAgICBBdmFudEJyb3dzZXI6ICdhYScgLFxuICAgIEFuZHJvaWRXZWJWaWV3QmV0YTogJ2FuJyAsXG4gICAgR29vZ2xlQ2hyb21lOiAnY2gnICxcbiAgICBHb29nbGVDaHJvbWVJT1M6ICdjaScgLFxuICAgIEdvb2dsZUNocm9tZU1vYmlsZTogJ2NtJyAsXG4gICAgQ2hyb21pdW06ICdjcicgLFxuICAgIE1vemlsbGFGaXJlZm94OiAnZmYnICxcbiAgICBTYWZhcmk6ICdzZicgLFxuICAgIE1vYmlsZVNhZmFyaTogJ21mJyAsXG4gICAgTWljcm9zb2Z0RWRnZTogJ3BzJyAsXG4gICAgTWljcm9zb2Z0RWRnZUlPUzogJ29pJyAsXG4gICAgT3BlcmFNaW5pOiAnb20nICxcbiAgICBPcGVyYTogJ29wJyAsXG4gICAgT3BlcmFOZXh0OiAnb24nIFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQnJvd3NlcjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/enums/browser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/enums/browser.js":
/*!*********************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/browser.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("const Browser = Object.freeze({\n    AvantBrowser: 'aa' ,\n    AndroidWebViewBeta: 'an' ,\n    GoogleChrome: 'ch' ,\n    GoogleChromeIOS: 'ci' ,\n    GoogleChromeMobile: 'cm' ,\n    Chromium: 'cr' ,\n    MozillaFirefox: 'ff' ,\n    Safari: 'sf' ,\n    MobileSafari: 'mf' ,\n    MicrosoftEdge: 'ps' ,\n    MicrosoftEdgeIOS: 'oi' ,\n    OperaMini: 'om' ,\n    Opera: 'op' ,\n    OperaNext: 'on' \n});\n\nmodule.exports = Browser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvYnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyZXB1bHNlLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL2VudW1zL2Jyb3dzZXIuanM/NDMyNSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBCcm93c2VyID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgQXZhbnRCcm93c2VyOiAnYWEnICxcbiAgICBBbmRyb2lkV2ViVmlld0JldGE6ICdhbicgLFxuICAgIEdvb2dsZUNocm9tZTogJ2NoJyAsXG4gICAgR29vZ2xlQ2hyb21lSU9TOiAnY2knICxcbiAgICBHb29nbGVDaHJvbWVNb2JpbGU6ICdjbScgLFxuICAgIENocm9taXVtOiAnY3InICxcbiAgICBNb3ppbGxhRmlyZWZveDogJ2ZmJyAsXG4gICAgU2FmYXJpOiAnc2YnICxcbiAgICBNb2JpbGVTYWZhcmk6ICdtZicgLFxuICAgIE1pY3Jvc29mdEVkZ2U6ICdwcycgLFxuICAgIE1pY3Jvc29mdEVkZ2VJT1M6ICdvaScgLFxuICAgIE9wZXJhTWluaTogJ29tJyAsXG4gICAgT3BlcmE6ICdvcCcgLFxuICAgIE9wZXJhTmV4dDogJ29uJyBcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJyb3dzZXI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/enums/browser.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/enums/compression.js":
/*!*************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/compression.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("const Compression = Object.freeze({\n    None: 'none' ,\n    Gzip: 'gzip' ,\n    Zstd: 'zstd' \n});\n\nmodule.exports = Compression;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9jb21wcmVzc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvY29tcHJlc3Npb24uanM/MDE1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBDb21wcmVzc2lvbiA9IE9iamVjdC5mcmVlemUoe1xuICAgIE5vbmU6ICdub25lJyAsXG4gICAgR3ppcDogJ2d6aXAnICxcbiAgICBac3RkOiAnenN0ZCcgXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb21wcmVzc2lvbjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/enums/compression.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/enums/compression.js":
/*!*************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/compression.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("const Compression = Object.freeze({\n    None: 'none' ,\n    Gzip: 'gzip' ,\n    Zstd: 'zstd' \n});\n\nmodule.exports = Compression;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvY29tcHJlc3Npb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyZXB1bHNlLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL2VudW1zL2NvbXByZXNzaW9uLmpzPzFjZTMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQ29tcHJlc3Npb24gPSBPYmplY3QuZnJlZXplKHtcbiAgICBOb25lOiAnbm9uZScgLFxuICAgIEd6aXA6ICdnemlwJyAsXG4gICAgWnN0ZDogJ3pzdGQnIFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ29tcHJlc3Npb247Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/enums/compression.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/enums/credit-card.js":
/*!*************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/credit-card.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("const CreditCard = Object.freeze({\n    AmericanExpress: 'amex' ,\n    Argencard: 'argencard' ,\n    Cabal: 'cabal' ,\n    Consosud: 'censosud' ,\n    DinersClub: 'diners' ,\n    Discover: 'discover' ,\n    Elo: 'elo' ,\n    Hipercard: 'hipercard' ,\n    JCB: 'jcb' ,\n    Mastercard: 'mastercard' ,\n    Naranja: 'naranja' ,\n    TarjetaShopping: 'targeta-shopping' ,\n    UnionChinaPay: 'union-china-pay' ,\n    Visa: 'visa' ,\n    MIR: 'mir' ,\n    Maestro: 'maestro' \n});\n\nmodule.exports = CreditCard;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9jcmVkaXQtY2FyZC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NhcmVwdWxzZS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9jcmVkaXQtY2FyZC5qcz82MTE2Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IENyZWRpdENhcmQgPSBPYmplY3QuZnJlZXplKHtcbiAgICBBbWVyaWNhbkV4cHJlc3M6ICdhbWV4JyAsXG4gICAgQXJnZW5jYXJkOiAnYXJnZW5jYXJkJyAsXG4gICAgQ2FiYWw6ICdjYWJhbCcgLFxuICAgIENvbnNvc3VkOiAnY2Vuc29zdWQnICxcbiAgICBEaW5lcnNDbHViOiAnZGluZXJzJyAsXG4gICAgRGlzY292ZXI6ICdkaXNjb3ZlcicgLFxuICAgIEVsbzogJ2VsbycgLFxuICAgIEhpcGVyY2FyZDogJ2hpcGVyY2FyZCcgLFxuICAgIEpDQjogJ2pjYicgLFxuICAgIE1hc3RlcmNhcmQ6ICdtYXN0ZXJjYXJkJyAsXG4gICAgTmFyYW5qYTogJ25hcmFuamEnICxcbiAgICBUYXJqZXRhU2hvcHBpbmc6ICd0YXJnZXRhLXNob3BwaW5nJyAsXG4gICAgVW5pb25DaGluYVBheTogJ3VuaW9uLWNoaW5hLXBheScgLFxuICAgIFZpc2E6ICd2aXNhJyAsXG4gICAgTUlSOiAnbWlyJyAsXG4gICAgTWFlc3RybzogJ21hZXN0cm8nIFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ3JlZGl0Q2FyZDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/enums/credit-card.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/enums/credit-card.js":
/*!*************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/credit-card.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("const CreditCard = Object.freeze({\n    AmericanExpress: 'amex' ,\n    Argencard: 'argencard' ,\n    Cabal: 'cabal' ,\n    Consosud: 'censosud' ,\n    DinersClub: 'diners' ,\n    Discover: 'discover' ,\n    Elo: 'elo' ,\n    Hipercard: 'hipercard' ,\n    JCB: 'jcb' ,\n    Mastercard: 'mastercard' ,\n    Naranja: 'naranja' ,\n    TarjetaShopping: 'targeta-shopping' ,\n    UnionChinaPay: 'union-china-pay' ,\n    Visa: 'visa' ,\n    MIR: 'mir' ,\n    Maestro: 'maestro' \n});\n\nmodule.exports = CreditCard;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvY3JlZGl0LWNhcmQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvY3JlZGl0LWNhcmQuanM/NzJkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBDcmVkaXRDYXJkID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgQW1lcmljYW5FeHByZXNzOiAnYW1leCcgLFxuICAgIEFyZ2VuY2FyZDogJ2FyZ2VuY2FyZCcgLFxuICAgIENhYmFsOiAnY2FiYWwnICxcbiAgICBDb25zb3N1ZDogJ2NlbnNvc3VkJyAsXG4gICAgRGluZXJzQ2x1YjogJ2RpbmVycycgLFxuICAgIERpc2NvdmVyOiAnZGlzY292ZXInICxcbiAgICBFbG86ICdlbG8nICxcbiAgICBIaXBlcmNhcmQ6ICdoaXBlcmNhcmQnICxcbiAgICBKQ0I6ICdqY2InICxcbiAgICBNYXN0ZXJjYXJkOiAnbWFzdGVyY2FyZCcgLFxuICAgIE5hcmFuamE6ICduYXJhbmphJyAsXG4gICAgVGFyamV0YVNob3BwaW5nOiAndGFyZ2V0YS1zaG9wcGluZycgLFxuICAgIFVuaW9uQ2hpbmFQYXk6ICd1bmlvbi1jaGluYS1wYXknICxcbiAgICBWaXNhOiAndmlzYScgLFxuICAgIE1JUjogJ21pcicgLFxuICAgIE1hZXN0cm86ICdtYWVzdHJvJyBcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENyZWRpdENhcmQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/enums/credit-card.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/enums/execution-method.js":
/*!******************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/execution-method.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("const ExecutionMethod = Object.freeze({\n    GET: 'GET' ,\n    POST: 'POST' ,\n    PUT: 'PUT' ,\n    PATCH: 'PATCH' ,\n    DELETE: 'DELETE' ,\n    OPTIONS: 'OPTIONS' \n});\n\nmodule.exports = ExecutionMethod;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9leGVjdXRpb24tbWV0aG9kLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NhcmVwdWxzZS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9leGVjdXRpb24tbWV0aG9kLmpzP2Y3YmEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgRXhlY3V0aW9uTWV0aG9kID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgR0VUOiAnR0VUJyAsXG4gICAgUE9TVDogJ1BPU1QnICxcbiAgICBQVVQ6ICdQVVQnICxcbiAgICBQQVRDSDogJ1BBVENIJyAsXG4gICAgREVMRVRFOiAnREVMRVRFJyAsXG4gICAgT1BUSU9OUzogJ09QVElPTlMnIFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRXhlY3V0aW9uTWV0aG9kOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/enums/execution-method.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/enums/execution-method.js":
/*!******************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/execution-method.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("const ExecutionMethod = Object.freeze({\n    GET: 'GET' ,\n    POST: 'POST' ,\n    PUT: 'PUT' ,\n    PATCH: 'PATCH' ,\n    DELETE: 'DELETE' ,\n    OPTIONS: 'OPTIONS' \n});\n\nmodule.exports = ExecutionMethod;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvZXhlY3V0aW9uLW1ldGhvZC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvZXhlY3V0aW9uLW1ldGhvZC5qcz83ZTFlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEV4ZWN1dGlvbk1ldGhvZCA9IE9iamVjdC5mcmVlemUoe1xuICAgIEdFVDogJ0dFVCcgLFxuICAgIFBPU1Q6ICdQT1NUJyAsXG4gICAgUFVUOiAnUFVUJyAsXG4gICAgUEFUQ0g6ICdQQVRDSCcgLFxuICAgIERFTEVURTogJ0RFTEVURScgLFxuICAgIE9QVElPTlM6ICdPUFRJT05TJyBcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV4ZWN1dGlvbk1ldGhvZDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/enums/execution-method.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/enums/flag.js":
/*!******************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/flag.js ***!
  \******************************************************/
/***/ ((module) => {

eval("const Flag = Object.freeze({\n    Afghanistan: 'af' ,\n    Angola: 'ao' ,\n    Albania: 'al' ,\n    Andorra: 'ad' ,\n    UnitedArabEmirates: 'ae' ,\n    Argentina: 'ar' ,\n    Armenia: 'am' ,\n    AntiguaAndBarbuda: 'ag' ,\n    Australia: 'au' ,\n    Austria: 'at' ,\n    Azerbaijan: 'az' ,\n    Burundi: 'bi' ,\n    Belgium: 'be' ,\n    Benin: 'bj' ,\n    BurkinaFaso: 'bf' ,\n    Bangladesh: 'bd' ,\n    Bulgaria: 'bg' ,\n    Bahrain: 'bh' ,\n    Bahamas: 'bs' ,\n    BosniaAndHerzegovina: 'ba' ,\n    Belarus: 'by' ,\n    Belize: 'bz' ,\n    Bolivia: 'bo' ,\n    Brazil: 'br' ,\n    Barbados: 'bb' ,\n    BruneiDarussalam: 'bn' ,\n    Bhutan: 'bt' ,\n    Botswana: 'bw' ,\n    CentralAfricanRepublic: 'cf' ,\n    Canada: 'ca' ,\n    Switzerland: 'ch' ,\n    Chile: 'cl' ,\n    China: 'cn' ,\n    CoteDIvoire: 'ci' ,\n    Cameroon: 'cm' ,\n    DemocraticRepublicOfTheCongo: 'cd' ,\n    RepublicOfTheCongo: 'cg' ,\n    Colombia: 'co' ,\n    Comoros: 'km' ,\n    CapeVerde: 'cv' ,\n    CostaRica: 'cr' ,\n    Cuba: 'cu' ,\n    Cyprus: 'cy' ,\n    CzechRepublic: 'cz' ,\n    Germany: 'de' ,\n    Djibouti: 'dj' ,\n    Dominica: 'dm' ,\n    Denmark: 'dk' ,\n    DominicanRepublic: 'do' ,\n    Algeria: 'dz' ,\n    Ecuador: 'ec' ,\n    Egypt: 'eg' ,\n    Eritrea: 'er' ,\n    Spain: 'es' ,\n    Estonia: 'ee' ,\n    Ethiopia: 'et' ,\n    Finland: 'fi' ,\n    Fiji: 'fj' ,\n    France: 'fr' ,\n    MicronesiaFederatedStatesOf: 'fm' ,\n    Gabon: 'ga' ,\n    UnitedKingdom: 'gb' ,\n    Georgia: 'ge' ,\n    Ghana: 'gh' ,\n    Guinea: 'gn' ,\n    Gambia: 'gm' ,\n    GuineaBissau: 'gw' ,\n    EquatorialGuinea: 'gq' ,\n    Greece: 'gr' ,\n    Grenada: 'gd' ,\n    Guatemala: 'gt' ,\n    Guyana: 'gy' ,\n    Honduras: 'hn' ,\n    Croatia: 'hr' ,\n    Haiti: 'ht' ,\n    Hungary: 'hu' ,\n    Indonesia: 'id' ,\n    India: 'in' ,\n    Ireland: 'ie' ,\n    IranIslamicRepublicOf: 'ir' ,\n    Iraq: 'iq' ,\n    Iceland: 'is' ,\n    Israel: 'il' ,\n    Italy: 'it' ,\n    Jamaica: 'jm' ,\n    Jordan: 'jo' ,\n    Japan: 'jp' ,\n    Kazakhstan: 'kz' ,\n    Kenya: 'ke' ,\n    Kyrgyzstan: 'kg' ,\n    Cambodia: 'kh' ,\n    Kiribati: 'ki' ,\n    SaintKittsAndNevis: 'kn' ,\n    SouthKorea: 'kr' ,\n    Kuwait: 'kw' ,\n    LaoPeopleSDemocraticRepublic: 'la' ,\n    Lebanon: 'lb' ,\n    Liberia: 'lr' ,\n    Libya: 'ly' ,\n    SaintLucia: 'lc' ,\n    Liechtenstein: 'li' ,\n    SriLanka: 'lk' ,\n    Lesotho: 'ls' ,\n    Lithuania: 'lt' ,\n    Luxembourg: 'lu' ,\n    Latvia: 'lv' ,\n    Morocco: 'ma' ,\n    Monaco: 'mc' ,\n    Moldova: 'md' ,\n    Madagascar: 'mg' ,\n    Maldives: 'mv' ,\n    Mexico: 'mx' ,\n    MarshallIslands: 'mh' ,\n    NorthMacedonia: 'mk' ,\n    Mali: 'ml' ,\n    Malta: 'mt' ,\n    Myanmar: 'mm' ,\n    Montenegro: 'me' ,\n    Mongolia: 'mn' ,\n    Mozambique: 'mz' ,\n    Mauritania: 'mr' ,\n    Mauritius: 'mu' ,\n    Malawi: 'mw' ,\n    Malaysia: 'my' ,\n    Namibia: 'na' ,\n    Niger: 'ne' ,\n    Nigeria: 'ng' ,\n    Nicaragua: 'ni' ,\n    Netherlands: 'nl' ,\n    Norway: 'no' ,\n    Nepal: 'np' ,\n    Nauru: 'nr' ,\n    NewZealand: 'nz' ,\n    Oman: 'om' ,\n    Pakistan: 'pk' ,\n    Panama: 'pa' ,\n    Peru: 'pe' ,\n    Philippines: 'ph' ,\n    Palau: 'pw' ,\n    PapuaNewGuinea: 'pg' ,\n    Poland: 'pl' ,\n    NorthKorea: 'kp' ,\n    Portugal: 'pt' ,\n    Paraguay: 'py' ,\n    Qatar: 'qa' ,\n    Romania: 'ro' ,\n    Russia: 'ru' ,\n    Rwanda: 'rw' ,\n    SaudiArabia: 'sa' ,\n    Sudan: 'sd' ,\n    Senegal: 'sn' ,\n    Singapore: 'sg' ,\n    SolomonIslands: 'sb' ,\n    SierraLeone: 'sl' ,\n    ElSalvador: 'sv' ,\n    SanMarino: 'sm' ,\n    Somalia: 'so' ,\n    Serbia: 'rs' ,\n    SouthSudan: 'ss' ,\n    SaoTomeAndPrincipe: 'st' ,\n    Suriname: 'sr' ,\n    Slovakia: 'sk' ,\n    Slovenia: 'si' ,\n    Sweden: 'se' ,\n    Eswatini: 'sz' ,\n    Seychelles: 'sc' ,\n    Syria: 'sy' ,\n    Chad: 'td' ,\n    Togo: 'tg' ,\n    Thailand: 'th' ,\n    Tajikistan: 'tj' ,\n    Turkmenistan: 'tm' ,\n    TimorLeste: 'tl' ,\n    Tonga: 'to' ,\n    TrinidadAndTobago: 'tt' ,\n    Tunisia: 'tn' ,\n    Turkey: 'tr' ,\n    Tuvalu: 'tv' ,\n    Tanzania: 'tz' ,\n    Uganda: 'ug' ,\n    Ukraine: 'ua' ,\n    Uruguay: 'uy' ,\n    UnitedStates: 'us' ,\n    Uzbekistan: 'uz' ,\n    VaticanCity: 'va' ,\n    SaintVincentAndTheGrenadines: 'vc' ,\n    Venezuela: 've' ,\n    Vietnam: 'vn' ,\n    Vanuatu: 'vu' ,\n    Samoa: 'ws' ,\n    Yemen: 'ye' ,\n    SouthAfrica: 'za' ,\n    Zambia: 'zm' ,\n    Zimbabwe: 'zw' \n});\n\nmodule.exports = Flag;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9mbGFnLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvZmxhZy5qcz84MDZiIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEZsYWcgPSBPYmplY3QuZnJlZXplKHtcbiAgICBBZmdoYW5pc3RhbjogJ2FmJyAsXG4gICAgQW5nb2xhOiAnYW8nICxcbiAgICBBbGJhbmlhOiAnYWwnICxcbiAgICBBbmRvcnJhOiAnYWQnICxcbiAgICBVbml0ZWRBcmFiRW1pcmF0ZXM6ICdhZScgLFxuICAgIEFyZ2VudGluYTogJ2FyJyAsXG4gICAgQXJtZW5pYTogJ2FtJyAsXG4gICAgQW50aWd1YUFuZEJhcmJ1ZGE6ICdhZycgLFxuICAgIEF1c3RyYWxpYTogJ2F1JyAsXG4gICAgQXVzdHJpYTogJ2F0JyAsXG4gICAgQXplcmJhaWphbjogJ2F6JyAsXG4gICAgQnVydW5kaTogJ2JpJyAsXG4gICAgQmVsZ2l1bTogJ2JlJyAsXG4gICAgQmVuaW46ICdiaicgLFxuICAgIEJ1cmtpbmFGYXNvOiAnYmYnICxcbiAgICBCYW5nbGFkZXNoOiAnYmQnICxcbiAgICBCdWxnYXJpYTogJ2JnJyAsXG4gICAgQmFocmFpbjogJ2JoJyAsXG4gICAgQmFoYW1hczogJ2JzJyAsXG4gICAgQm9zbmlhQW5kSGVyemVnb3ZpbmE6ICdiYScgLFxuICAgIEJlbGFydXM6ICdieScgLFxuICAgIEJlbGl6ZTogJ2J6JyAsXG4gICAgQm9saXZpYTogJ2JvJyAsXG4gICAgQnJhemlsOiAnYnInICxcbiAgICBCYXJiYWRvczogJ2JiJyAsXG4gICAgQnJ1bmVpRGFydXNzYWxhbTogJ2JuJyAsXG4gICAgQmh1dGFuOiAnYnQnICxcbiAgICBCb3Rzd2FuYTogJ2J3JyAsXG4gICAgQ2VudHJhbEFmcmljYW5SZXB1YmxpYzogJ2NmJyAsXG4gICAgQ2FuYWRhOiAnY2EnICxcbiAgICBTd2l0emVybGFuZDogJ2NoJyAsXG4gICAgQ2hpbGU6ICdjbCcgLFxuICAgIENoaW5hOiAnY24nICxcbiAgICBDb3RlREl2b2lyZTogJ2NpJyAsXG4gICAgQ2FtZXJvb246ICdjbScgLFxuICAgIERlbW9jcmF0aWNSZXB1YmxpY09mVGhlQ29uZ286ICdjZCcgLFxuICAgIFJlcHVibGljT2ZUaGVDb25nbzogJ2NnJyAsXG4gICAgQ29sb21iaWE6ICdjbycgLFxuICAgIENvbW9yb3M6ICdrbScgLFxuICAgIENhcGVWZXJkZTogJ2N2JyAsXG4gICAgQ29zdGFSaWNhOiAnY3InICxcbiAgICBDdWJhOiAnY3UnICxcbiAgICBDeXBydXM6ICdjeScgLFxuICAgIEN6ZWNoUmVwdWJsaWM6ICdjeicgLFxuICAgIEdlcm1hbnk6ICdkZScgLFxuICAgIERqaWJvdXRpOiAnZGonICxcbiAgICBEb21pbmljYTogJ2RtJyAsXG4gICAgRGVubWFyazogJ2RrJyAsXG4gICAgRG9taW5pY2FuUmVwdWJsaWM6ICdkbycgLFxuICAgIEFsZ2VyaWE6ICdkeicgLFxuICAgIEVjdWFkb3I6ICdlYycgLFxuICAgIEVneXB0OiAnZWcnICxcbiAgICBFcml0cmVhOiAnZXInICxcbiAgICBTcGFpbjogJ2VzJyAsXG4gICAgRXN0b25pYTogJ2VlJyAsXG4gICAgRXRoaW9waWE6ICdldCcgLFxuICAgIEZpbmxhbmQ6ICdmaScgLFxuICAgIEZpamk6ICdmaicgLFxuICAgIEZyYW5jZTogJ2ZyJyAsXG4gICAgTWljcm9uZXNpYUZlZGVyYXRlZFN0YXRlc09mOiAnZm0nICxcbiAgICBHYWJvbjogJ2dhJyAsXG4gICAgVW5pdGVkS2luZ2RvbTogJ2diJyAsXG4gICAgR2VvcmdpYTogJ2dlJyAsXG4gICAgR2hhbmE6ICdnaCcgLFxuICAgIEd1aW5lYTogJ2duJyAsXG4gICAgR2FtYmlhOiAnZ20nICxcbiAgICBHdWluZWFCaXNzYXU6ICdndycgLFxuICAgIEVxdWF0b3JpYWxHdWluZWE6ICdncScgLFxuICAgIEdyZWVjZTogJ2dyJyAsXG4gICAgR3JlbmFkYTogJ2dkJyAsXG4gICAgR3VhdGVtYWxhOiAnZ3QnICxcbiAgICBHdXlhbmE6ICdneScgLFxuICAgIEhvbmR1cmFzOiAnaG4nICxcbiAgICBDcm9hdGlhOiAnaHInICxcbiAgICBIYWl0aTogJ2h0JyAsXG4gICAgSHVuZ2FyeTogJ2h1JyAsXG4gICAgSW5kb25lc2lhOiAnaWQnICxcbiAgICBJbmRpYTogJ2luJyAsXG4gICAgSXJlbGFuZDogJ2llJyAsXG4gICAgSXJhbklzbGFtaWNSZXB1YmxpY09mOiAnaXInICxcbiAgICBJcmFxOiAnaXEnICxcbiAgICBJY2VsYW5kOiAnaXMnICxcbiAgICBJc3JhZWw6ICdpbCcgLFxuICAgIEl0YWx5OiAnaXQnICxcbiAgICBKYW1haWNhOiAnam0nICxcbiAgICBKb3JkYW46ICdqbycgLFxuICAgIEphcGFuOiAnanAnICxcbiAgICBLYXpha2hzdGFuOiAna3onICxcbiAgICBLZW55YTogJ2tlJyAsXG4gICAgS3lyZ3l6c3RhbjogJ2tnJyAsXG4gICAgQ2FtYm9kaWE6ICdraCcgLFxuICAgIEtpcmliYXRpOiAna2knICxcbiAgICBTYWludEtpdHRzQW5kTmV2aXM6ICdrbicgLFxuICAgIFNvdXRoS29yZWE6ICdrcicgLFxuICAgIEt1d2FpdDogJ2t3JyAsXG4gICAgTGFvUGVvcGxlU0RlbW9jcmF0aWNSZXB1YmxpYzogJ2xhJyAsXG4gICAgTGViYW5vbjogJ2xiJyAsXG4gICAgTGliZXJpYTogJ2xyJyAsXG4gICAgTGlieWE6ICdseScgLFxuICAgIFNhaW50THVjaWE6ICdsYycgLFxuICAgIExpZWNodGVuc3RlaW46ICdsaScgLFxuICAgIFNyaUxhbmthOiAnbGsnICxcbiAgICBMZXNvdGhvOiAnbHMnICxcbiAgICBMaXRodWFuaWE6ICdsdCcgLFxuICAgIEx1eGVtYm91cmc6ICdsdScgLFxuICAgIExhdHZpYTogJ2x2JyAsXG4gICAgTW9yb2NjbzogJ21hJyAsXG4gICAgTW9uYWNvOiAnbWMnICxcbiAgICBNb2xkb3ZhOiAnbWQnICxcbiAgICBNYWRhZ2FzY2FyOiAnbWcnICxcbiAgICBNYWxkaXZlczogJ212JyAsXG4gICAgTWV4aWNvOiAnbXgnICxcbiAgICBNYXJzaGFsbElzbGFuZHM6ICdtaCcgLFxuICAgIE5vcnRoTWFjZWRvbmlhOiAnbWsnICxcbiAgICBNYWxpOiAnbWwnICxcbiAgICBNYWx0YTogJ210JyAsXG4gICAgTXlhbm1hcjogJ21tJyAsXG4gICAgTW9udGVuZWdybzogJ21lJyAsXG4gICAgTW9uZ29saWE6ICdtbicgLFxuICAgIE1vemFtYmlxdWU6ICdteicgLFxuICAgIE1hdXJpdGFuaWE6ICdtcicgLFxuICAgIE1hdXJpdGl1czogJ211JyAsXG4gICAgTWFsYXdpOiAnbXcnICxcbiAgICBNYWxheXNpYTogJ215JyAsXG4gICAgTmFtaWJpYTogJ25hJyAsXG4gICAgTmlnZXI6ICduZScgLFxuICAgIE5pZ2VyaWE6ICduZycgLFxuICAgIE5pY2FyYWd1YTogJ25pJyAsXG4gICAgTmV0aGVybGFuZHM6ICdubCcgLFxuICAgIE5vcndheTogJ25vJyAsXG4gICAgTmVwYWw6ICducCcgLFxuICAgIE5hdXJ1OiAnbnInICxcbiAgICBOZXdaZWFsYW5kOiAnbnonICxcbiAgICBPbWFuOiAnb20nICxcbiAgICBQYWtpc3RhbjogJ3BrJyAsXG4gICAgUGFuYW1hOiAncGEnICxcbiAgICBQZXJ1OiAncGUnICxcbiAgICBQaGlsaXBwaW5lczogJ3BoJyAsXG4gICAgUGFsYXU6ICdwdycgLFxuICAgIFBhcHVhTmV3R3VpbmVhOiAncGcnICxcbiAgICBQb2xhbmQ6ICdwbCcgLFxuICAgIE5vcnRoS29yZWE6ICdrcCcgLFxuICAgIFBvcnR1Z2FsOiAncHQnICxcbiAgICBQYXJhZ3VheTogJ3B5JyAsXG4gICAgUWF0YXI6ICdxYScgLFxuICAgIFJvbWFuaWE6ICdybycgLFxuICAgIFJ1c3NpYTogJ3J1JyAsXG4gICAgUndhbmRhOiAncncnICxcbiAgICBTYXVkaUFyYWJpYTogJ3NhJyAsXG4gICAgU3VkYW46ICdzZCcgLFxuICAgIFNlbmVnYWw6ICdzbicgLFxuICAgIFNpbmdhcG9yZTogJ3NnJyAsXG4gICAgU29sb21vbklzbGFuZHM6ICdzYicgLFxuICAgIFNpZXJyYUxlb25lOiAnc2wnICxcbiAgICBFbFNhbHZhZG9yOiAnc3YnICxcbiAgICBTYW5NYXJpbm86ICdzbScgLFxuICAgIFNvbWFsaWE6ICdzbycgLFxuICAgIFNlcmJpYTogJ3JzJyAsXG4gICAgU291dGhTdWRhbjogJ3NzJyAsXG4gICAgU2FvVG9tZUFuZFByaW5jaXBlOiAnc3QnICxcbiAgICBTdXJpbmFtZTogJ3NyJyAsXG4gICAgU2xvdmFraWE6ICdzaycgLFxuICAgIFNsb3ZlbmlhOiAnc2knICxcbiAgICBTd2VkZW46ICdzZScgLFxuICAgIEVzd2F0aW5pOiAnc3onICxcbiAgICBTZXljaGVsbGVzOiAnc2MnICxcbiAgICBTeXJpYTogJ3N5JyAsXG4gICAgQ2hhZDogJ3RkJyAsXG4gICAgVG9nbzogJ3RnJyAsXG4gICAgVGhhaWxhbmQ6ICd0aCcgLFxuICAgIFRhamlraXN0YW46ICd0aicgLFxuICAgIFR1cmttZW5pc3RhbjogJ3RtJyAsXG4gICAgVGltb3JMZXN0ZTogJ3RsJyAsXG4gICAgVG9uZ2E6ICd0bycgLFxuICAgIFRyaW5pZGFkQW5kVG9iYWdvOiAndHQnICxcbiAgICBUdW5pc2lhOiAndG4nICxcbiAgICBUdXJrZXk6ICd0cicgLFxuICAgIFR1dmFsdTogJ3R2JyAsXG4gICAgVGFuemFuaWE6ICd0eicgLFxuICAgIFVnYW5kYTogJ3VnJyAsXG4gICAgVWtyYWluZTogJ3VhJyAsXG4gICAgVXJ1Z3VheTogJ3V5JyAsXG4gICAgVW5pdGVkU3RhdGVzOiAndXMnICxcbiAgICBVemJla2lzdGFuOiAndXonICxcbiAgICBWYXRpY2FuQ2l0eTogJ3ZhJyAsXG4gICAgU2FpbnRWaW5jZW50QW5kVGhlR3JlbmFkaW5lczogJ3ZjJyAsXG4gICAgVmVuZXp1ZWxhOiAndmUnICxcbiAgICBWaWV0bmFtOiAndm4nICxcbiAgICBWYW51YXR1OiAndnUnICxcbiAgICBTYW1vYTogJ3dzJyAsXG4gICAgWWVtZW46ICd5ZScgLFxuICAgIFNvdXRoQWZyaWNhOiAnemEnICxcbiAgICBaYW1iaWE6ICd6bScgLFxuICAgIFppbWJhYndlOiAnencnIFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gRmxhZzsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/enums/flag.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/enums/flag.js":
/*!******************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/flag.js ***!
  \******************************************************/
/***/ ((module) => {

eval("const Flag = Object.freeze({\n    Afghanistan: 'af' ,\n    Angola: 'ao' ,\n    Albania: 'al' ,\n    Andorra: 'ad' ,\n    UnitedArabEmirates: 'ae' ,\n    Argentina: 'ar' ,\n    Armenia: 'am' ,\n    AntiguaAndBarbuda: 'ag' ,\n    Australia: 'au' ,\n    Austria: 'at' ,\n    Azerbaijan: 'az' ,\n    Burundi: 'bi' ,\n    Belgium: 'be' ,\n    Benin: 'bj' ,\n    BurkinaFaso: 'bf' ,\n    Bangladesh: 'bd' ,\n    Bulgaria: 'bg' ,\n    Bahrain: 'bh' ,\n    Bahamas: 'bs' ,\n    BosniaAndHerzegovina: 'ba' ,\n    Belarus: 'by' ,\n    Belize: 'bz' ,\n    Bolivia: 'bo' ,\n    Brazil: 'br' ,\n    Barbados: 'bb' ,\n    BruneiDarussalam: 'bn' ,\n    Bhutan: 'bt' ,\n    Botswana: 'bw' ,\n    CentralAfricanRepublic: 'cf' ,\n    Canada: 'ca' ,\n    Switzerland: 'ch' ,\n    Chile: 'cl' ,\n    China: 'cn' ,\n    CoteDIvoire: 'ci' ,\n    Cameroon: 'cm' ,\n    DemocraticRepublicOfTheCongo: 'cd' ,\n    RepublicOfTheCongo: 'cg' ,\n    Colombia: 'co' ,\n    Comoros: 'km' ,\n    CapeVerde: 'cv' ,\n    CostaRica: 'cr' ,\n    Cuba: 'cu' ,\n    Cyprus: 'cy' ,\n    CzechRepublic: 'cz' ,\n    Germany: 'de' ,\n    Djibouti: 'dj' ,\n    Dominica: 'dm' ,\n    Denmark: 'dk' ,\n    DominicanRepublic: 'do' ,\n    Algeria: 'dz' ,\n    Ecuador: 'ec' ,\n    Egypt: 'eg' ,\n    Eritrea: 'er' ,\n    Spain: 'es' ,\n    Estonia: 'ee' ,\n    Ethiopia: 'et' ,\n    Finland: 'fi' ,\n    Fiji: 'fj' ,\n    France: 'fr' ,\n    MicronesiaFederatedStatesOf: 'fm' ,\n    Gabon: 'ga' ,\n    UnitedKingdom: 'gb' ,\n    Georgia: 'ge' ,\n    Ghana: 'gh' ,\n    Guinea: 'gn' ,\n    Gambia: 'gm' ,\n    GuineaBissau: 'gw' ,\n    EquatorialGuinea: 'gq' ,\n    Greece: 'gr' ,\n    Grenada: 'gd' ,\n    Guatemala: 'gt' ,\n    Guyana: 'gy' ,\n    Honduras: 'hn' ,\n    Croatia: 'hr' ,\n    Haiti: 'ht' ,\n    Hungary: 'hu' ,\n    Indonesia: 'id' ,\n    India: 'in' ,\n    Ireland: 'ie' ,\n    IranIslamicRepublicOf: 'ir' ,\n    Iraq: 'iq' ,\n    Iceland: 'is' ,\n    Israel: 'il' ,\n    Italy: 'it' ,\n    Jamaica: 'jm' ,\n    Jordan: 'jo' ,\n    Japan: 'jp' ,\n    Kazakhstan: 'kz' ,\n    Kenya: 'ke' ,\n    Kyrgyzstan: 'kg' ,\n    Cambodia: 'kh' ,\n    Kiribati: 'ki' ,\n    SaintKittsAndNevis: 'kn' ,\n    SouthKorea: 'kr' ,\n    Kuwait: 'kw' ,\n    LaoPeopleSDemocraticRepublic: 'la' ,\n    Lebanon: 'lb' ,\n    Liberia: 'lr' ,\n    Libya: 'ly' ,\n    SaintLucia: 'lc' ,\n    Liechtenstein: 'li' ,\n    SriLanka: 'lk' ,\n    Lesotho: 'ls' ,\n    Lithuania: 'lt' ,\n    Luxembourg: 'lu' ,\n    Latvia: 'lv' ,\n    Morocco: 'ma' ,\n    Monaco: 'mc' ,\n    Moldova: 'md' ,\n    Madagascar: 'mg' ,\n    Maldives: 'mv' ,\n    Mexico: 'mx' ,\n    MarshallIslands: 'mh' ,\n    NorthMacedonia: 'mk' ,\n    Mali: 'ml' ,\n    Malta: 'mt' ,\n    Myanmar: 'mm' ,\n    Montenegro: 'me' ,\n    Mongolia: 'mn' ,\n    Mozambique: 'mz' ,\n    Mauritania: 'mr' ,\n    Mauritius: 'mu' ,\n    Malawi: 'mw' ,\n    Malaysia: 'my' ,\n    Namibia: 'na' ,\n    Niger: 'ne' ,\n    Nigeria: 'ng' ,\n    Nicaragua: 'ni' ,\n    Netherlands: 'nl' ,\n    Norway: 'no' ,\n    Nepal: 'np' ,\n    Nauru: 'nr' ,\n    NewZealand: 'nz' ,\n    Oman: 'om' ,\n    Pakistan: 'pk' ,\n    Panama: 'pa' ,\n    Peru: 'pe' ,\n    Philippines: 'ph' ,\n    Palau: 'pw' ,\n    PapuaNewGuinea: 'pg' ,\n    Poland: 'pl' ,\n    NorthKorea: 'kp' ,\n    Portugal: 'pt' ,\n    Paraguay: 'py' ,\n    Qatar: 'qa' ,\n    Romania: 'ro' ,\n    Russia: 'ru' ,\n    Rwanda: 'rw' ,\n    SaudiArabia: 'sa' ,\n    Sudan: 'sd' ,\n    Senegal: 'sn' ,\n    Singapore: 'sg' ,\n    SolomonIslands: 'sb' ,\n    SierraLeone: 'sl' ,\n    ElSalvador: 'sv' ,\n    SanMarino: 'sm' ,\n    Somalia: 'so' ,\n    Serbia: 'rs' ,\n    SouthSudan: 'ss' ,\n    SaoTomeAndPrincipe: 'st' ,\n    Suriname: 'sr' ,\n    Slovakia: 'sk' ,\n    Slovenia: 'si' ,\n    Sweden: 'se' ,\n    Eswatini: 'sz' ,\n    Seychelles: 'sc' ,\n    Syria: 'sy' ,\n    Chad: 'td' ,\n    Togo: 'tg' ,\n    Thailand: 'th' ,\n    Tajikistan: 'tj' ,\n    Turkmenistan: 'tm' ,\n    TimorLeste: 'tl' ,\n    Tonga: 'to' ,\n    TrinidadAndTobago: 'tt' ,\n    Tunisia: 'tn' ,\n    Turkey: 'tr' ,\n    Tuvalu: 'tv' ,\n    Tanzania: 'tz' ,\n    Uganda: 'ug' ,\n    Ukraine: 'ua' ,\n    Uruguay: 'uy' ,\n    UnitedStates: 'us' ,\n    Uzbekistan: 'uz' ,\n    VaticanCity: 'va' ,\n    SaintVincentAndTheGrenadines: 'vc' ,\n    Venezuela: 've' ,\n    Vietnam: 'vn' ,\n    Vanuatu: 'vu' ,\n    Samoa: 'ws' ,\n    Yemen: 'ye' ,\n    SouthAfrica: 'za' ,\n    Zambia: 'zm' ,\n    Zimbabwe: 'zw' \n});\n\nmodule.exports = Flag;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvZmxhZy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyZXB1bHNlLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL2VudW1zL2ZsYWcuanM/NjdmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBGbGFnID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgQWZnaGFuaXN0YW46ICdhZicgLFxuICAgIEFuZ29sYTogJ2FvJyAsXG4gICAgQWxiYW5pYTogJ2FsJyAsXG4gICAgQW5kb3JyYTogJ2FkJyAsXG4gICAgVW5pdGVkQXJhYkVtaXJhdGVzOiAnYWUnICxcbiAgICBBcmdlbnRpbmE6ICdhcicgLFxuICAgIEFybWVuaWE6ICdhbScgLFxuICAgIEFudGlndWFBbmRCYXJidWRhOiAnYWcnICxcbiAgICBBdXN0cmFsaWE6ICdhdScgLFxuICAgIEF1c3RyaWE6ICdhdCcgLFxuICAgIEF6ZXJiYWlqYW46ICdheicgLFxuICAgIEJ1cnVuZGk6ICdiaScgLFxuICAgIEJlbGdpdW06ICdiZScgLFxuICAgIEJlbmluOiAnYmonICxcbiAgICBCdXJraW5hRmFzbzogJ2JmJyAsXG4gICAgQmFuZ2xhZGVzaDogJ2JkJyAsXG4gICAgQnVsZ2FyaWE6ICdiZycgLFxuICAgIEJhaHJhaW46ICdiaCcgLFxuICAgIEJhaGFtYXM6ICdicycgLFxuICAgIEJvc25pYUFuZEhlcnplZ292aW5hOiAnYmEnICxcbiAgICBCZWxhcnVzOiAnYnknICxcbiAgICBCZWxpemU6ICdieicgLFxuICAgIEJvbGl2aWE6ICdibycgLFxuICAgIEJyYXppbDogJ2JyJyAsXG4gICAgQmFyYmFkb3M6ICdiYicgLFxuICAgIEJydW5laURhcnVzc2FsYW06ICdibicgLFxuICAgIEJodXRhbjogJ2J0JyAsXG4gICAgQm90c3dhbmE6ICdidycgLFxuICAgIENlbnRyYWxBZnJpY2FuUmVwdWJsaWM6ICdjZicgLFxuICAgIENhbmFkYTogJ2NhJyAsXG4gICAgU3dpdHplcmxhbmQ6ICdjaCcgLFxuICAgIENoaWxlOiAnY2wnICxcbiAgICBDaGluYTogJ2NuJyAsXG4gICAgQ290ZURJdm9pcmU6ICdjaScgLFxuICAgIENhbWVyb29uOiAnY20nICxcbiAgICBEZW1vY3JhdGljUmVwdWJsaWNPZlRoZUNvbmdvOiAnY2QnICxcbiAgICBSZXB1YmxpY09mVGhlQ29uZ286ICdjZycgLFxuICAgIENvbG9tYmlhOiAnY28nICxcbiAgICBDb21vcm9zOiAna20nICxcbiAgICBDYXBlVmVyZGU6ICdjdicgLFxuICAgIENvc3RhUmljYTogJ2NyJyAsXG4gICAgQ3ViYTogJ2N1JyAsXG4gICAgQ3lwcnVzOiAnY3knICxcbiAgICBDemVjaFJlcHVibGljOiAnY3onICxcbiAgICBHZXJtYW55OiAnZGUnICxcbiAgICBEamlib3V0aTogJ2RqJyAsXG4gICAgRG9taW5pY2E6ICdkbScgLFxuICAgIERlbm1hcms6ICdkaycgLFxuICAgIERvbWluaWNhblJlcHVibGljOiAnZG8nICxcbiAgICBBbGdlcmlhOiAnZHonICxcbiAgICBFY3VhZG9yOiAnZWMnICxcbiAgICBFZ3lwdDogJ2VnJyAsXG4gICAgRXJpdHJlYTogJ2VyJyAsXG4gICAgU3BhaW46ICdlcycgLFxuICAgIEVzdG9uaWE6ICdlZScgLFxuICAgIEV0aGlvcGlhOiAnZXQnICxcbiAgICBGaW5sYW5kOiAnZmknICxcbiAgICBGaWppOiAnZmonICxcbiAgICBGcmFuY2U6ICdmcicgLFxuICAgIE1pY3JvbmVzaWFGZWRlcmF0ZWRTdGF0ZXNPZjogJ2ZtJyAsXG4gICAgR2Fib246ICdnYScgLFxuICAgIFVuaXRlZEtpbmdkb206ICdnYicgLFxuICAgIEdlb3JnaWE6ICdnZScgLFxuICAgIEdoYW5hOiAnZ2gnICxcbiAgICBHdWluZWE6ICdnbicgLFxuICAgIEdhbWJpYTogJ2dtJyAsXG4gICAgR3VpbmVhQmlzc2F1OiAnZ3cnICxcbiAgICBFcXVhdG9yaWFsR3VpbmVhOiAnZ3EnICxcbiAgICBHcmVlY2U6ICdncicgLFxuICAgIEdyZW5hZGE6ICdnZCcgLFxuICAgIEd1YXRlbWFsYTogJ2d0JyAsXG4gICAgR3V5YW5hOiAnZ3knICxcbiAgICBIb25kdXJhczogJ2huJyAsXG4gICAgQ3JvYXRpYTogJ2hyJyAsXG4gICAgSGFpdGk6ICdodCcgLFxuICAgIEh1bmdhcnk6ICdodScgLFxuICAgIEluZG9uZXNpYTogJ2lkJyAsXG4gICAgSW5kaWE6ICdpbicgLFxuICAgIElyZWxhbmQ6ICdpZScgLFxuICAgIElyYW5Jc2xhbWljUmVwdWJsaWNPZjogJ2lyJyAsXG4gICAgSXJhcTogJ2lxJyAsXG4gICAgSWNlbGFuZDogJ2lzJyAsXG4gICAgSXNyYWVsOiAnaWwnICxcbiAgICBJdGFseTogJ2l0JyAsXG4gICAgSmFtYWljYTogJ2ptJyAsXG4gICAgSm9yZGFuOiAnam8nICxcbiAgICBKYXBhbjogJ2pwJyAsXG4gICAgS2F6YWtoc3RhbjogJ2t6JyAsXG4gICAgS2VueWE6ICdrZScgLFxuICAgIEt5cmd5enN0YW46ICdrZycgLFxuICAgIENhbWJvZGlhOiAna2gnICxcbiAgICBLaXJpYmF0aTogJ2tpJyAsXG4gICAgU2FpbnRLaXR0c0FuZE5ldmlzOiAna24nICxcbiAgICBTb3V0aEtvcmVhOiAna3InICxcbiAgICBLdXdhaXQ6ICdrdycgLFxuICAgIExhb1Blb3BsZVNEZW1vY3JhdGljUmVwdWJsaWM6ICdsYScgLFxuICAgIExlYmFub246ICdsYicgLFxuICAgIExpYmVyaWE6ICdscicgLFxuICAgIExpYnlhOiAnbHknICxcbiAgICBTYWludEx1Y2lhOiAnbGMnICxcbiAgICBMaWVjaHRlbnN0ZWluOiAnbGknICxcbiAgICBTcmlMYW5rYTogJ2xrJyAsXG4gICAgTGVzb3RobzogJ2xzJyAsXG4gICAgTGl0aHVhbmlhOiAnbHQnICxcbiAgICBMdXhlbWJvdXJnOiAnbHUnICxcbiAgICBMYXR2aWE6ICdsdicgLFxuICAgIE1vcm9jY286ICdtYScgLFxuICAgIE1vbmFjbzogJ21jJyAsXG4gICAgTW9sZG92YTogJ21kJyAsXG4gICAgTWFkYWdhc2NhcjogJ21nJyAsXG4gICAgTWFsZGl2ZXM6ICdtdicgLFxuICAgIE1leGljbzogJ214JyAsXG4gICAgTWFyc2hhbGxJc2xhbmRzOiAnbWgnICxcbiAgICBOb3J0aE1hY2Vkb25pYTogJ21rJyAsXG4gICAgTWFsaTogJ21sJyAsXG4gICAgTWFsdGE6ICdtdCcgLFxuICAgIE15YW5tYXI6ICdtbScgLFxuICAgIE1vbnRlbmVncm86ICdtZScgLFxuICAgIE1vbmdvbGlhOiAnbW4nICxcbiAgICBNb3phbWJpcXVlOiAnbXonICxcbiAgICBNYXVyaXRhbmlhOiAnbXInICxcbiAgICBNYXVyaXRpdXM6ICdtdScgLFxuICAgIE1hbGF3aTogJ213JyAsXG4gICAgTWFsYXlzaWE6ICdteScgLFxuICAgIE5hbWliaWE6ICduYScgLFxuICAgIE5pZ2VyOiAnbmUnICxcbiAgICBOaWdlcmlhOiAnbmcnICxcbiAgICBOaWNhcmFndWE6ICduaScgLFxuICAgIE5ldGhlcmxhbmRzOiAnbmwnICxcbiAgICBOb3J3YXk6ICdubycgLFxuICAgIE5lcGFsOiAnbnAnICxcbiAgICBOYXVydTogJ25yJyAsXG4gICAgTmV3WmVhbGFuZDogJ256JyAsXG4gICAgT21hbjogJ29tJyAsXG4gICAgUGFraXN0YW46ICdwaycgLFxuICAgIFBhbmFtYTogJ3BhJyAsXG4gICAgUGVydTogJ3BlJyAsXG4gICAgUGhpbGlwcGluZXM6ICdwaCcgLFxuICAgIFBhbGF1OiAncHcnICxcbiAgICBQYXB1YU5ld0d1aW5lYTogJ3BnJyAsXG4gICAgUG9sYW5kOiAncGwnICxcbiAgICBOb3J0aEtvcmVhOiAna3AnICxcbiAgICBQb3J0dWdhbDogJ3B0JyAsXG4gICAgUGFyYWd1YXk6ICdweScgLFxuICAgIFFhdGFyOiAncWEnICxcbiAgICBSb21hbmlhOiAncm8nICxcbiAgICBSdXNzaWE6ICdydScgLFxuICAgIFJ3YW5kYTogJ3J3JyAsXG4gICAgU2F1ZGlBcmFiaWE6ICdzYScgLFxuICAgIFN1ZGFuOiAnc2QnICxcbiAgICBTZW5lZ2FsOiAnc24nICxcbiAgICBTaW5nYXBvcmU6ICdzZycgLFxuICAgIFNvbG9tb25Jc2xhbmRzOiAnc2InICxcbiAgICBTaWVycmFMZW9uZTogJ3NsJyAsXG4gICAgRWxTYWx2YWRvcjogJ3N2JyAsXG4gICAgU2FuTWFyaW5vOiAnc20nICxcbiAgICBTb21hbGlhOiAnc28nICxcbiAgICBTZXJiaWE6ICdycycgLFxuICAgIFNvdXRoU3VkYW46ICdzcycgLFxuICAgIFNhb1RvbWVBbmRQcmluY2lwZTogJ3N0JyAsXG4gICAgU3VyaW5hbWU6ICdzcicgLFxuICAgIFNsb3Zha2lhOiAnc2snICxcbiAgICBTbG92ZW5pYTogJ3NpJyAsXG4gICAgU3dlZGVuOiAnc2UnICxcbiAgICBFc3dhdGluaTogJ3N6JyAsXG4gICAgU2V5Y2hlbGxlczogJ3NjJyAsXG4gICAgU3lyaWE6ICdzeScgLFxuICAgIENoYWQ6ICd0ZCcgLFxuICAgIFRvZ286ICd0ZycgLFxuICAgIFRoYWlsYW5kOiAndGgnICxcbiAgICBUYWppa2lzdGFuOiAndGonICxcbiAgICBUdXJrbWVuaXN0YW46ICd0bScgLFxuICAgIFRpbW9yTGVzdGU6ICd0bCcgLFxuICAgIFRvbmdhOiAndG8nICxcbiAgICBUcmluaWRhZEFuZFRvYmFnbzogJ3R0JyAsXG4gICAgVHVuaXNpYTogJ3RuJyAsXG4gICAgVHVya2V5OiAndHInICxcbiAgICBUdXZhbHU6ICd0dicgLFxuICAgIFRhbnphbmlhOiAndHonICxcbiAgICBVZ2FuZGE6ICd1ZycgLFxuICAgIFVrcmFpbmU6ICd1YScgLFxuICAgIFVydWd1YXk6ICd1eScgLFxuICAgIFVuaXRlZFN0YXRlczogJ3VzJyAsXG4gICAgVXpiZWtpc3RhbjogJ3V6JyAsXG4gICAgVmF0aWNhbkNpdHk6ICd2YScgLFxuICAgIFNhaW50VmluY2VudEFuZFRoZUdyZW5hZGluZXM6ICd2YycgLFxuICAgIFZlbmV6dWVsYTogJ3ZlJyAsXG4gICAgVmlldG5hbTogJ3ZuJyAsXG4gICAgVmFudWF0dTogJ3Z1JyAsXG4gICAgU2Ftb2E6ICd3cycgLFxuICAgIFllbWVuOiAneWUnICxcbiAgICBTb3V0aEFmcmljYTogJ3phJyAsXG4gICAgWmFtYmlhOiAnem0nICxcbiAgICBaaW1iYWJ3ZTogJ3p3JyBcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZsYWc7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/enums/flag.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/enums/image-format.js":
/*!**************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/image-format.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("const ImageFormat = Object.freeze({\n    Jpg: 'jpg' ,\n    Jpeg: 'jpeg' ,\n    Gif: 'gif' ,\n    Png: 'png' ,\n    Webp: 'webp' \n});\n\nmodule.exports = ImageFormat;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9pbWFnZS1mb3JtYXQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NhcmVwdWxzZS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9pbWFnZS1mb3JtYXQuanM/NmQwNiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBJbWFnZUZvcm1hdCA9IE9iamVjdC5mcmVlemUoe1xuICAgIEpwZzogJ2pwZycgLFxuICAgIEpwZWc6ICdqcGVnJyAsXG4gICAgR2lmOiAnZ2lmJyAsXG4gICAgUG5nOiAncG5nJyAsXG4gICAgV2VicDogJ3dlYnAnIFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gSW1hZ2VGb3JtYXQ7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/enums/image-format.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/enums/image-format.js":
/*!**************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/image-format.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("const ImageFormat = Object.freeze({\n    Jpg: 'jpg' ,\n    Jpeg: 'jpeg' ,\n    Gif: 'gif' ,\n    Png: 'png' ,\n    Webp: 'webp' \n});\n\nmodule.exports = ImageFormat;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvaW1hZ2UtZm9ybWF0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvaW1hZ2UtZm9ybWF0LmpzP2EyM2MiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgSW1hZ2VGb3JtYXQgPSBPYmplY3QuZnJlZXplKHtcbiAgICBKcGc6ICdqcGcnICxcbiAgICBKcGVnOiAnanBlZycgLFxuICAgIEdpZjogJ2dpZicgLFxuICAgIFBuZzogJ3BuZycgLFxuICAgIFdlYnA6ICd3ZWJwJyBcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEltYWdlRm9ybWF0OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/enums/image-format.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/enums/image-gravity.js":
/*!***************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/image-gravity.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("const ImageGravity = Object.freeze({\n    Center: 'center' ,\n    TopLeft: 'top-left' ,\n    Top: 'top' ,\n    TopRight: 'top-right' ,\n    Left: 'left' ,\n    Right: 'right' ,\n    BottomLeft: 'bottom-left' ,\n    Bottom: 'bottom' ,\n    BottomRight: 'bottom-right' \n});\n\nmodule.exports = ImageGravity;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9pbWFnZS1ncmF2aXR5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NhcmVwdWxzZS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9pbWFnZS1ncmF2aXR5LmpzP2Y1YjYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgSW1hZ2VHcmF2aXR5ID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgQ2VudGVyOiAnY2VudGVyJyAsXG4gICAgVG9wTGVmdDogJ3RvcC1sZWZ0JyAsXG4gICAgVG9wOiAndG9wJyAsXG4gICAgVG9wUmlnaHQ6ICd0b3AtcmlnaHQnICxcbiAgICBMZWZ0OiAnbGVmdCcgLFxuICAgIFJpZ2h0OiAncmlnaHQnICxcbiAgICBCb3R0b21MZWZ0OiAnYm90dG9tLWxlZnQnICxcbiAgICBCb3R0b206ICdib3R0b20nICxcbiAgICBCb3R0b21SaWdodDogJ2JvdHRvbS1yaWdodCcgXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbWFnZUdyYXZpdHk7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/enums/image-gravity.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/enums/image-gravity.js":
/*!***************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/image-gravity.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("const ImageGravity = Object.freeze({\n    Center: 'center' ,\n    TopLeft: 'top-left' ,\n    Top: 'top' ,\n    TopRight: 'top-right' ,\n    Left: 'left' ,\n    Right: 'right' ,\n    BottomLeft: 'bottom-left' ,\n    Bottom: 'bottom' ,\n    BottomRight: 'bottom-right' \n});\n\nmodule.exports = ImageGravity;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvaW1hZ2UtZ3Jhdml0eS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvaW1hZ2UtZ3Jhdml0eS5qcz9iYjc1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEltYWdlR3Jhdml0eSA9IE9iamVjdC5mcmVlemUoe1xuICAgIENlbnRlcjogJ2NlbnRlcicgLFxuICAgIFRvcExlZnQ6ICd0b3AtbGVmdCcgLFxuICAgIFRvcDogJ3RvcCcgLFxuICAgIFRvcFJpZ2h0OiAndG9wLXJpZ2h0JyAsXG4gICAgTGVmdDogJ2xlZnQnICxcbiAgICBSaWdodDogJ3JpZ2h0JyAsXG4gICAgQm90dG9tTGVmdDogJ2JvdHRvbS1sZWZ0JyAsXG4gICAgQm90dG9tOiAnYm90dG9tJyAsXG4gICAgQm90dG9tUmlnaHQ6ICdib3R0b20tcmlnaHQnIFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gSW1hZ2VHcmF2aXR5OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/enums/image-gravity.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/enums/index-type.js":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/index-type.js ***!
  \************************************************************/
/***/ ((module) => {

eval("const IndexType = Object.freeze({\n    Key: 'key' ,\n    Fulltext: 'fulltext' ,\n    Unique: 'unique' \n});\n\nmodule.exports = IndexType;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9pbmRleC10eXBlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NhcmVwdWxzZS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9pbmRleC10eXBlLmpzPzg5MzEiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgSW5kZXhUeXBlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgS2V5OiAna2V5JyAsXG4gICAgRnVsbHRleHQ6ICdmdWxsdGV4dCcgLFxuICAgIFVuaXF1ZTogJ3VuaXF1ZScgXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbmRleFR5cGU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/enums/index-type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/enums/index-type.js":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/index-type.js ***!
  \************************************************************/
/***/ ((module) => {

eval("const IndexType = Object.freeze({\n    Key: 'key' ,\n    Fulltext: 'fulltext' ,\n    Unique: 'unique' \n});\n\nmodule.exports = IndexType;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvaW5kZXgtdHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvaW5kZXgtdHlwZS5qcz9lZTVlIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEluZGV4VHlwZSA9IE9iamVjdC5mcmVlemUoe1xuICAgIEtleTogJ2tleScgLFxuICAgIEZ1bGx0ZXh0OiAnZnVsbHRleHQnICxcbiAgICBVbmlxdWU6ICd1bmlxdWUnIFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gSW5kZXhUeXBlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/enums/index-type.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/enums/messaging-provider-type.js":
/*!*************************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/messaging-provider-type.js ***!
  \*************************************************************************/
/***/ ((module) => {

eval("const MessagingProviderType = Object.freeze({\n    Email: 'email' ,\n    Sms: 'sms' ,\n    Push: 'push' \n});\n\nmodule.exports = MessagingProviderType;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9tZXNzYWdpbmctcHJvdmlkZXItdHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvbWVzc2FnaW5nLXByb3ZpZGVyLXR5cGUuanM/ZjAwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBNZXNzYWdpbmdQcm92aWRlclR5cGUgPSBPYmplY3QuZnJlZXplKHtcbiAgICBFbWFpbDogJ2VtYWlsJyAsXG4gICAgU21zOiAnc21zJyAsXG4gICAgUHVzaDogJ3B1c2gnIFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWVzc2FnaW5nUHJvdmlkZXJUeXBlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/enums/messaging-provider-type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/enums/messaging-provider-type.js":
/*!*************************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/messaging-provider-type.js ***!
  \*************************************************************************/
/***/ ((module) => {

eval("const MessagingProviderType = Object.freeze({\n    Email: 'email' ,\n    Sms: 'sms' ,\n    Push: 'push' \n});\n\nmodule.exports = MessagingProviderType;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvbWVzc2FnaW5nLXByb3ZpZGVyLXR5cGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyZXB1bHNlLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL2VudW1zL21lc3NhZ2luZy1wcm92aWRlci10eXBlLmpzPzAxYTIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTWVzc2FnaW5nUHJvdmlkZXJUeXBlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgRW1haWw6ICdlbWFpbCcgLFxuICAgIFNtczogJ3NtcycgLFxuICAgIFB1c2g6ICdwdXNoJyBcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1lc3NhZ2luZ1Byb3ZpZGVyVHlwZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/enums/messaging-provider-type.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/enums/name.js":
/*!******************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/name.js ***!
  \******************************************************/
/***/ ((module) => {

eval("const Name = Object.freeze({\n    V1Database: 'v1-database' ,\n    V1Deletes: 'v1-deletes' ,\n    V1Audits: 'v1-audits' ,\n    V1Mails: 'v1-mails' ,\n    V1Functions: 'v1-functions' ,\n    V1Usage: 'v1-usage' ,\n    V1UsageDump: 'v1-usage-dump' ,\n    Webhooksv1: 'webhooksv1' ,\n    V1Certificates: 'v1-certificates' ,\n    V1Builds: 'v1-builds' ,\n    V1Messaging: 'v1-messaging' ,\n    V1Migrations: 'v1-migrations' ,\n    Hamsterv1: 'hamsterv1' \n});\n\nmodule.exports = Name;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9uYW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyZXB1bHNlLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL2VudW1zL25hbWUuanM/ZmE3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBOYW1lID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgVjFEYXRhYmFzZTogJ3YxLWRhdGFiYXNlJyAsXG4gICAgVjFEZWxldGVzOiAndjEtZGVsZXRlcycgLFxuICAgIFYxQXVkaXRzOiAndjEtYXVkaXRzJyAsXG4gICAgVjFNYWlsczogJ3YxLW1haWxzJyAsXG4gICAgVjFGdW5jdGlvbnM6ICd2MS1mdW5jdGlvbnMnICxcbiAgICBWMVVzYWdlOiAndjEtdXNhZ2UnICxcbiAgICBWMVVzYWdlRHVtcDogJ3YxLXVzYWdlLWR1bXAnICxcbiAgICBXZWJob29rc3YxOiAnd2ViaG9va3N2MScgLFxuICAgIFYxQ2VydGlmaWNhdGVzOiAndjEtY2VydGlmaWNhdGVzJyAsXG4gICAgVjFCdWlsZHM6ICd2MS1idWlsZHMnICxcbiAgICBWMU1lc3NhZ2luZzogJ3YxLW1lc3NhZ2luZycgLFxuICAgIFYxTWlncmF0aW9uczogJ3YxLW1pZ3JhdGlvbnMnICxcbiAgICBIYW1zdGVydjE6ICdoYW1zdGVydjEnIFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gTmFtZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/enums/name.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/enums/name.js":
/*!******************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/name.js ***!
  \******************************************************/
/***/ ((module) => {

eval("const Name = Object.freeze({\n    V1Database: 'v1-database' ,\n    V1Deletes: 'v1-deletes' ,\n    V1Audits: 'v1-audits' ,\n    V1Mails: 'v1-mails' ,\n    V1Functions: 'v1-functions' ,\n    V1Usage: 'v1-usage' ,\n    V1UsageDump: 'v1-usage-dump' ,\n    Webhooksv1: 'webhooksv1' ,\n    V1Certificates: 'v1-certificates' ,\n    V1Builds: 'v1-builds' ,\n    V1Messaging: 'v1-messaging' ,\n    V1Migrations: 'v1-migrations' ,\n    Hamsterv1: 'hamsterv1' \n});\n\nmodule.exports = Name;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvbmFtZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NhcmVwdWxzZS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9uYW1lLmpzPzQ0NGIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTmFtZSA9IE9iamVjdC5mcmVlemUoe1xuICAgIFYxRGF0YWJhc2U6ICd2MS1kYXRhYmFzZScgLFxuICAgIFYxRGVsZXRlczogJ3YxLWRlbGV0ZXMnICxcbiAgICBWMUF1ZGl0czogJ3YxLWF1ZGl0cycgLFxuICAgIFYxTWFpbHM6ICd2MS1tYWlscycgLFxuICAgIFYxRnVuY3Rpb25zOiAndjEtZnVuY3Rpb25zJyAsXG4gICAgVjFVc2FnZTogJ3YxLXVzYWdlJyAsXG4gICAgVjFVc2FnZUR1bXA6ICd2MS11c2FnZS1kdW1wJyAsXG4gICAgV2ViaG9va3N2MTogJ3dlYmhvb2tzdjEnICxcbiAgICBWMUNlcnRpZmljYXRlczogJ3YxLWNlcnRpZmljYXRlcycgLFxuICAgIFYxQnVpbGRzOiAndjEtYnVpbGRzJyAsXG4gICAgVjFNZXNzYWdpbmc6ICd2MS1tZXNzYWdpbmcnICxcbiAgICBWMU1pZ3JhdGlvbnM6ICd2MS1taWdyYXRpb25zJyAsXG4gICAgSGFtc3RlcnYxOiAnaGFtc3RlcnYxJyBcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5hbWU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/enums/name.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/enums/o-auth-provider.js":
/*!*****************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/o-auth-provider.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("const OAuthProvider = Object.freeze({\n    Amazon: 'amazon' ,\n    Apple: 'apple' ,\n    Auth0: 'auth0' ,\n    Authentik: 'authentik' ,\n    Autodesk: 'autodesk' ,\n    Bitbucket: 'bitbucket' ,\n    Bitly: 'bitly' ,\n    Box: 'box' ,\n    Dailymotion: 'dailymotion' ,\n    Discord: 'discord' ,\n    Disqus: 'disqus' ,\n    Dropbox: 'dropbox' ,\n    Etsy: 'etsy' ,\n    Facebook: 'facebook' ,\n    Github: 'github' ,\n    Gitlab: 'gitlab' ,\n    Google: 'google' ,\n    Linkedin: 'linkedin' ,\n    Microsoft: 'microsoft' ,\n    Notion: 'notion' ,\n    Oidc: 'oidc' ,\n    Okta: 'okta' ,\n    Paypal: 'paypal' ,\n    PaypalSandbox: 'paypalSandbox' ,\n    Podio: 'podio' ,\n    Salesforce: 'salesforce' ,\n    Slack: 'slack' ,\n    Spotify: 'spotify' ,\n    Stripe: 'stripe' ,\n    Tradeshift: 'tradeshift' ,\n    TradeshiftBox: 'tradeshiftBox' ,\n    Twitch: 'twitch' ,\n    Wordpress: 'wordpress' ,\n    Yahoo: 'yahoo' ,\n    Yammer: 'yammer' ,\n    Yandex: 'yandex' ,\n    Zoho: 'zoho' ,\n    Zoom: 'zoom' ,\n    Mock: 'mock' \n});\n\nmodule.exports = OAuthProvider;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9vLWF1dGgtcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyZXB1bHNlLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL2VudW1zL28tYXV0aC1wcm92aWRlci5qcz8xMjU0Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE9BdXRoUHJvdmlkZXIgPSBPYmplY3QuZnJlZXplKHtcbiAgICBBbWF6b246ICdhbWF6b24nICxcbiAgICBBcHBsZTogJ2FwcGxlJyAsXG4gICAgQXV0aDA6ICdhdXRoMCcgLFxuICAgIEF1dGhlbnRpazogJ2F1dGhlbnRpaycgLFxuICAgIEF1dG9kZXNrOiAnYXV0b2Rlc2snICxcbiAgICBCaXRidWNrZXQ6ICdiaXRidWNrZXQnICxcbiAgICBCaXRseTogJ2JpdGx5JyAsXG4gICAgQm94OiAnYm94JyAsXG4gICAgRGFpbHltb3Rpb246ICdkYWlseW1vdGlvbicgLFxuICAgIERpc2NvcmQ6ICdkaXNjb3JkJyAsXG4gICAgRGlzcXVzOiAnZGlzcXVzJyAsXG4gICAgRHJvcGJveDogJ2Ryb3Bib3gnICxcbiAgICBFdHN5OiAnZXRzeScgLFxuICAgIEZhY2Vib29rOiAnZmFjZWJvb2snICxcbiAgICBHaXRodWI6ICdnaXRodWInICxcbiAgICBHaXRsYWI6ICdnaXRsYWInICxcbiAgICBHb29nbGU6ICdnb29nbGUnICxcbiAgICBMaW5rZWRpbjogJ2xpbmtlZGluJyAsXG4gICAgTWljcm9zb2Z0OiAnbWljcm9zb2Z0JyAsXG4gICAgTm90aW9uOiAnbm90aW9uJyAsXG4gICAgT2lkYzogJ29pZGMnICxcbiAgICBPa3RhOiAnb2t0YScgLFxuICAgIFBheXBhbDogJ3BheXBhbCcgLFxuICAgIFBheXBhbFNhbmRib3g6ICdwYXlwYWxTYW5kYm94JyAsXG4gICAgUG9kaW86ICdwb2RpbycgLFxuICAgIFNhbGVzZm9yY2U6ICdzYWxlc2ZvcmNlJyAsXG4gICAgU2xhY2s6ICdzbGFjaycgLFxuICAgIFNwb3RpZnk6ICdzcG90aWZ5JyAsXG4gICAgU3RyaXBlOiAnc3RyaXBlJyAsXG4gICAgVHJhZGVzaGlmdDogJ3RyYWRlc2hpZnQnICxcbiAgICBUcmFkZXNoaWZ0Qm94OiAndHJhZGVzaGlmdEJveCcgLFxuICAgIFR3aXRjaDogJ3R3aXRjaCcgLFxuICAgIFdvcmRwcmVzczogJ3dvcmRwcmVzcycgLFxuICAgIFlhaG9vOiAneWFob28nICxcbiAgICBZYW1tZXI6ICd5YW1tZXInICxcbiAgICBZYW5kZXg6ICd5YW5kZXgnICxcbiAgICBab2hvOiAnem9obycgLFxuICAgIFpvb206ICd6b29tJyAsXG4gICAgTW9jazogJ21vY2snIFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gT0F1dGhQcm92aWRlcjsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/enums/o-auth-provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/enums/o-auth-provider.js":
/*!*****************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/o-auth-provider.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("const OAuthProvider = Object.freeze({\n    Amazon: 'amazon' ,\n    Apple: 'apple' ,\n    Auth0: 'auth0' ,\n    Authentik: 'authentik' ,\n    Autodesk: 'autodesk' ,\n    Bitbucket: 'bitbucket' ,\n    Bitly: 'bitly' ,\n    Box: 'box' ,\n    Dailymotion: 'dailymotion' ,\n    Discord: 'discord' ,\n    Disqus: 'disqus' ,\n    Dropbox: 'dropbox' ,\n    Etsy: 'etsy' ,\n    Facebook: 'facebook' ,\n    Github: 'github' ,\n    Gitlab: 'gitlab' ,\n    Google: 'google' ,\n    Linkedin: 'linkedin' ,\n    Microsoft: 'microsoft' ,\n    Notion: 'notion' ,\n    Oidc: 'oidc' ,\n    Okta: 'okta' ,\n    Paypal: 'paypal' ,\n    PaypalSandbox: 'paypalSandbox' ,\n    Podio: 'podio' ,\n    Salesforce: 'salesforce' ,\n    Slack: 'slack' ,\n    Spotify: 'spotify' ,\n    Stripe: 'stripe' ,\n    Tradeshift: 'tradeshift' ,\n    TradeshiftBox: 'tradeshiftBox' ,\n    Twitch: 'twitch' ,\n    Wordpress: 'wordpress' ,\n    Yahoo: 'yahoo' ,\n    Yammer: 'yammer' ,\n    Yandex: 'yandex' ,\n    Zoho: 'zoho' ,\n    Zoom: 'zoom' ,\n    Mock: 'mock' \n});\n\nmodule.exports = OAuthProvider;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvby1hdXRoLXByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NhcmVwdWxzZS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9vLWF1dGgtcHJvdmlkZXIuanM/OGQwNCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBPQXV0aFByb3ZpZGVyID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgQW1hem9uOiAnYW1hem9uJyAsXG4gICAgQXBwbGU6ICdhcHBsZScgLFxuICAgIEF1dGgwOiAnYXV0aDAnICxcbiAgICBBdXRoZW50aWs6ICdhdXRoZW50aWsnICxcbiAgICBBdXRvZGVzazogJ2F1dG9kZXNrJyAsXG4gICAgQml0YnVja2V0OiAnYml0YnVja2V0JyAsXG4gICAgQml0bHk6ICdiaXRseScgLFxuICAgIEJveDogJ2JveCcgLFxuICAgIERhaWx5bW90aW9uOiAnZGFpbHltb3Rpb24nICxcbiAgICBEaXNjb3JkOiAnZGlzY29yZCcgLFxuICAgIERpc3F1czogJ2Rpc3F1cycgLFxuICAgIERyb3Bib3g6ICdkcm9wYm94JyAsXG4gICAgRXRzeTogJ2V0c3knICxcbiAgICBGYWNlYm9vazogJ2ZhY2Vib29rJyAsXG4gICAgR2l0aHViOiAnZ2l0aHViJyAsXG4gICAgR2l0bGFiOiAnZ2l0bGFiJyAsXG4gICAgR29vZ2xlOiAnZ29vZ2xlJyAsXG4gICAgTGlua2VkaW46ICdsaW5rZWRpbicgLFxuICAgIE1pY3Jvc29mdDogJ21pY3Jvc29mdCcgLFxuICAgIE5vdGlvbjogJ25vdGlvbicgLFxuICAgIE9pZGM6ICdvaWRjJyAsXG4gICAgT2t0YTogJ29rdGEnICxcbiAgICBQYXlwYWw6ICdwYXlwYWwnICxcbiAgICBQYXlwYWxTYW5kYm94OiAncGF5cGFsU2FuZGJveCcgLFxuICAgIFBvZGlvOiAncG9kaW8nICxcbiAgICBTYWxlc2ZvcmNlOiAnc2FsZXNmb3JjZScgLFxuICAgIFNsYWNrOiAnc2xhY2snICxcbiAgICBTcG90aWZ5OiAnc3BvdGlmeScgLFxuICAgIFN0cmlwZTogJ3N0cmlwZScgLFxuICAgIFRyYWRlc2hpZnQ6ICd0cmFkZXNoaWZ0JyAsXG4gICAgVHJhZGVzaGlmdEJveDogJ3RyYWRlc2hpZnRCb3gnICxcbiAgICBUd2l0Y2g6ICd0d2l0Y2gnICxcbiAgICBXb3JkcHJlc3M6ICd3b3JkcHJlc3MnICxcbiAgICBZYWhvbzogJ3lhaG9vJyAsXG4gICAgWWFtbWVyOiAneWFtbWVyJyAsXG4gICAgWWFuZGV4OiAneWFuZGV4JyAsXG4gICAgWm9obzogJ3pvaG8nICxcbiAgICBab29tOiAnem9vbScgLFxuICAgIE1vY2s6ICdtb2NrJyBcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9BdXRoUHJvdmlkZXI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/enums/o-auth-provider.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/enums/password-hash.js":
/*!***************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/password-hash.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("const PasswordHash = Object.freeze({\n    Sha1: 'sha1' ,\n    Sha224: 'sha224' ,\n    Sha256: 'sha256' ,\n    Sha384: 'sha384' ,\n    Sha512224: 'sha512/224' ,\n    Sha512256: 'sha512/256' ,\n    Sha512: 'sha512' ,\n    Sha3224: 'sha3-224' ,\n    Sha3256: 'sha3-256' ,\n    Sha3384: 'sha3-384' ,\n    Sha3512: 'sha3-512' \n});\n\nmodule.exports = PasswordHash;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9wYXNzd29yZC1oYXNoLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvcGFzc3dvcmQtaGFzaC5qcz82NmY2Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFBhc3N3b3JkSGFzaCA9IE9iamVjdC5mcmVlemUoe1xuICAgIFNoYTE6ICdzaGExJyAsXG4gICAgU2hhMjI0OiAnc2hhMjI0JyAsXG4gICAgU2hhMjU2OiAnc2hhMjU2JyAsXG4gICAgU2hhMzg0OiAnc2hhMzg0JyAsXG4gICAgU2hhNTEyMjI0OiAnc2hhNTEyLzIyNCcgLFxuICAgIFNoYTUxMjI1NjogJ3NoYTUxMi8yNTYnICxcbiAgICBTaGE1MTI6ICdzaGE1MTInICxcbiAgICBTaGEzMjI0OiAnc2hhMy0yMjQnICxcbiAgICBTaGEzMjU2OiAnc2hhMy0yNTYnICxcbiAgICBTaGEzMzg0OiAnc2hhMy0zODQnICxcbiAgICBTaGEzNTEyOiAnc2hhMy01MTInIFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUGFzc3dvcmRIYXNoOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/enums/password-hash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/enums/password-hash.js":
/*!***************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/password-hash.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("const PasswordHash = Object.freeze({\n    Sha1: 'sha1' ,\n    Sha224: 'sha224' ,\n    Sha256: 'sha256' ,\n    Sha384: 'sha384' ,\n    Sha512224: 'sha512/224' ,\n    Sha512256: 'sha512/256' ,\n    Sha512: 'sha512' ,\n    Sha3224: 'sha3-224' ,\n    Sha3256: 'sha3-256' ,\n    Sha3384: 'sha3-384' ,\n    Sha3512: 'sha3-512' \n});\n\nmodule.exports = PasswordHash;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvcGFzc3dvcmQtaGFzaC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyZXB1bHNlLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL2VudW1zL3Bhc3N3b3JkLWhhc2guanM/MzVhNyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQYXNzd29yZEhhc2ggPSBPYmplY3QuZnJlZXplKHtcbiAgICBTaGExOiAnc2hhMScgLFxuICAgIFNoYTIyNDogJ3NoYTIyNCcgLFxuICAgIFNoYTI1NjogJ3NoYTI1NicgLFxuICAgIFNoYTM4NDogJ3NoYTM4NCcgLFxuICAgIFNoYTUxMjIyNDogJ3NoYTUxMi8yMjQnICxcbiAgICBTaGE1MTIyNTY6ICdzaGE1MTIvMjU2JyAsXG4gICAgU2hhNTEyOiAnc2hhNTEyJyAsXG4gICAgU2hhMzIyNDogJ3NoYTMtMjI0JyAsXG4gICAgU2hhMzI1NjogJ3NoYTMtMjU2JyAsXG4gICAgU2hhMzM4NDogJ3NoYTMtMzg0JyAsXG4gICAgU2hhMzUxMjogJ3NoYTMtNTEyJyBcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhc3N3b3JkSGFzaDsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/enums/password-hash.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/enums/relation-mutate.js":
/*!*****************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/relation-mutate.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("const RelationMutate = Object.freeze({\n    Cascade: 'cascade' ,\n    Restrict: 'restrict' ,\n    SetNull: 'setNull' \n});\n\nmodule.exports = RelationMutate;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9yZWxhdGlvbi1tdXRhdGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyZXB1bHNlLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL2VudW1zL3JlbGF0aW9uLW11dGF0ZS5qcz8yN2E1Il0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlbGF0aW9uTXV0YXRlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgQ2FzY2FkZTogJ2Nhc2NhZGUnICxcbiAgICBSZXN0cmljdDogJ3Jlc3RyaWN0JyAsXG4gICAgU2V0TnVsbDogJ3NldE51bGwnIFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVsYXRpb25NdXRhdGU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/enums/relation-mutate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/enums/relation-mutate.js":
/*!*****************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/relation-mutate.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("const RelationMutate = Object.freeze({\n    Cascade: 'cascade' ,\n    Restrict: 'restrict' ,\n    SetNull: 'setNull' \n});\n\nmodule.exports = RelationMutate;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvcmVsYXRpb24tbXV0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NhcmVwdWxzZS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9yZWxhdGlvbi1tdXRhdGUuanM/ZDRmMyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWxhdGlvbk11dGF0ZSA9IE9iamVjdC5mcmVlemUoe1xuICAgIENhc2NhZGU6ICdjYXNjYWRlJyAsXG4gICAgUmVzdHJpY3Q6ICdyZXN0cmljdCcgLFxuICAgIFNldE51bGw6ICdzZXROdWxsJyBcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF0aW9uTXV0YXRlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/enums/relation-mutate.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/enums/relationship-type.js":
/*!*******************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/relationship-type.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("const RelationshipType = Object.freeze({\n    OneToOne: 'oneToOne' ,\n    ManyToOne: 'manyToOne' ,\n    ManyToMany: 'manyToMany' ,\n    OneToMany: 'oneToMany' \n});\n\nmodule.exports = RelationshipType;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9yZWxhdGlvbnNoaXAtdHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NhcmVwdWxzZS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9yZWxhdGlvbnNoaXAtdHlwZS5qcz8yMzczIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJlbGF0aW9uc2hpcFR5cGUgPSBPYmplY3QuZnJlZXplKHtcbiAgICBPbmVUb09uZTogJ29uZVRvT25lJyAsXG4gICAgTWFueVRvT25lOiAnbWFueVRvT25lJyAsXG4gICAgTWFueVRvTWFueTogJ21hbnlUb01hbnknICxcbiAgICBPbmVUb01hbnk6ICdvbmVUb01hbnknIFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVsYXRpb25zaGlwVHlwZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/enums/relationship-type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/enums/relationship-type.js":
/*!*******************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/relationship-type.js ***!
  \*******************************************************************/
/***/ ((module) => {

eval("const RelationshipType = Object.freeze({\n    OneToOne: 'oneToOne' ,\n    ManyToOne: 'manyToOne' ,\n    ManyToMany: 'manyToMany' ,\n    OneToMany: 'oneToMany' \n});\n\nmodule.exports = RelationshipType;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvcmVsYXRpb25zaGlwLXR5cGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvcmVsYXRpb25zaGlwLXR5cGUuanM/YWVkYSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSZWxhdGlvbnNoaXBUeXBlID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgT25lVG9PbmU6ICdvbmVUb09uZScgLFxuICAgIE1hbnlUb09uZTogJ21hbnlUb09uZScgLFxuICAgIE1hbnlUb01hbnk6ICdtYW55VG9NYW55JyAsXG4gICAgT25lVG9NYW55OiAnb25lVG9NYW55JyBcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlbGF0aW9uc2hpcFR5cGU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/enums/relationship-type.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/enums/runtime.js":
/*!*********************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/runtime.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("const Runtime = Object.freeze({\n    Node145: 'node-14.5' ,\n    Node160: 'node-16.0' ,\n    Node180: 'node-18.0' ,\n    Node190: 'node-19.0' ,\n    Node200: 'node-20.0' ,\n    Node210: 'node-21.0' ,\n    Php80: 'php-8.0' ,\n    Php81: 'php-8.1' ,\n    Php82: 'php-8.2' ,\n    Php83: 'php-8.3' ,\n    Ruby30: 'ruby-3.0' ,\n    Ruby31: 'ruby-3.1' ,\n    Ruby32: 'ruby-3.2' ,\n    Ruby33: 'ruby-3.3' ,\n    Python38: 'python-3.8' ,\n    Python39: 'python-3.9' ,\n    Python310: 'python-3.10' ,\n    Python311: 'python-3.11' ,\n    Python312: 'python-3.12' ,\n    Deno140: 'deno-1.40' ,\n    Dart215: 'dart-2.15' ,\n    Dart216: 'dart-2.16' ,\n    Dart217: 'dart-2.17' ,\n    Dart218: 'dart-2.18' ,\n    Dart30: 'dart-3.0' ,\n    Dart31: 'dart-3.1' ,\n    Dart33: 'dart-3.3' ,\n    Dotnet31: 'dotnet-3.1' ,\n    Dotnet60: 'dotnet-6.0' ,\n    Dotnet70: 'dotnet-7.0' ,\n    Java80: 'java-8.0' ,\n    Java110: 'java-11.0' ,\n    Java170: 'java-17.0' ,\n    Java180: 'java-18.0' ,\n    Java210: 'java-21.0' ,\n    Swift55: 'swift-5.5' ,\n    Swift58: 'swift-5.8' ,\n    Swift59: 'swift-5.9' ,\n    Kotlin16: 'kotlin-1.6' ,\n    Kotlin18: 'kotlin-1.8' ,\n    Kotlin19: 'kotlin-1.9' ,\n    Cpp17: 'cpp-17' ,\n    Cpp20: 'cpp-20' ,\n    Bun10: 'bun-1.0' \n});\n\nmodule.exports = Runtime;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvcnVudGltZS5qcz9lOTUwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFJ1bnRpbWUgPSBPYmplY3QuZnJlZXplKHtcbiAgICBOb2RlMTQ1OiAnbm9kZS0xNC41JyAsXG4gICAgTm9kZTE2MDogJ25vZGUtMTYuMCcgLFxuICAgIE5vZGUxODA6ICdub2RlLTE4LjAnICxcbiAgICBOb2RlMTkwOiAnbm9kZS0xOS4wJyAsXG4gICAgTm9kZTIwMDogJ25vZGUtMjAuMCcgLFxuICAgIE5vZGUyMTA6ICdub2RlLTIxLjAnICxcbiAgICBQaHA4MDogJ3BocC04LjAnICxcbiAgICBQaHA4MTogJ3BocC04LjEnICxcbiAgICBQaHA4MjogJ3BocC04LjInICxcbiAgICBQaHA4MzogJ3BocC04LjMnICxcbiAgICBSdWJ5MzA6ICdydWJ5LTMuMCcgLFxuICAgIFJ1YnkzMTogJ3J1YnktMy4xJyAsXG4gICAgUnVieTMyOiAncnVieS0zLjInICxcbiAgICBSdWJ5MzM6ICdydWJ5LTMuMycgLFxuICAgIFB5dGhvbjM4OiAncHl0aG9uLTMuOCcgLFxuICAgIFB5dGhvbjM5OiAncHl0aG9uLTMuOScgLFxuICAgIFB5dGhvbjMxMDogJ3B5dGhvbi0zLjEwJyAsXG4gICAgUHl0aG9uMzExOiAncHl0aG9uLTMuMTEnICxcbiAgICBQeXRob24zMTI6ICdweXRob24tMy4xMicgLFxuICAgIERlbm8xNDA6ICdkZW5vLTEuNDAnICxcbiAgICBEYXJ0MjE1OiAnZGFydC0yLjE1JyAsXG4gICAgRGFydDIxNjogJ2RhcnQtMi4xNicgLFxuICAgIERhcnQyMTc6ICdkYXJ0LTIuMTcnICxcbiAgICBEYXJ0MjE4OiAnZGFydC0yLjE4JyAsXG4gICAgRGFydDMwOiAnZGFydC0zLjAnICxcbiAgICBEYXJ0MzE6ICdkYXJ0LTMuMScgLFxuICAgIERhcnQzMzogJ2RhcnQtMy4zJyAsXG4gICAgRG90bmV0MzE6ICdkb3RuZXQtMy4xJyAsXG4gICAgRG90bmV0NjA6ICdkb3RuZXQtNi4wJyAsXG4gICAgRG90bmV0NzA6ICdkb3RuZXQtNy4wJyAsXG4gICAgSmF2YTgwOiAnamF2YS04LjAnICxcbiAgICBKYXZhMTEwOiAnamF2YS0xMS4wJyAsXG4gICAgSmF2YTE3MDogJ2phdmEtMTcuMCcgLFxuICAgIEphdmExODA6ICdqYXZhLTE4LjAnICxcbiAgICBKYXZhMjEwOiAnamF2YS0yMS4wJyAsXG4gICAgU3dpZnQ1NTogJ3N3aWZ0LTUuNScgLFxuICAgIFN3aWZ0NTg6ICdzd2lmdC01LjgnICxcbiAgICBTd2lmdDU5OiAnc3dpZnQtNS45JyAsXG4gICAgS290bGluMTY6ICdrb3RsaW4tMS42JyAsXG4gICAgS290bGluMTg6ICdrb3RsaW4tMS44JyAsXG4gICAgS290bGluMTk6ICdrb3RsaW4tMS45JyAsXG4gICAgQ3BwMTc6ICdjcHAtMTcnICxcbiAgICBDcHAyMDogJ2NwcC0yMCcgLFxuICAgIEJ1bjEwOiAnYnVuLTEuMCcgXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBSdW50aW1lOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/enums/runtime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/enums/runtime.js":
/*!*********************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/runtime.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("const Runtime = Object.freeze({\n    Node145: 'node-14.5' ,\n    Node160: 'node-16.0' ,\n    Node180: 'node-18.0' ,\n    Node190: 'node-19.0' ,\n    Node200: 'node-20.0' ,\n    Node210: 'node-21.0' ,\n    Php80: 'php-8.0' ,\n    Php81: 'php-8.1' ,\n    Php82: 'php-8.2' ,\n    Php83: 'php-8.3' ,\n    Ruby30: 'ruby-3.0' ,\n    Ruby31: 'ruby-3.1' ,\n    Ruby32: 'ruby-3.2' ,\n    Ruby33: 'ruby-3.3' ,\n    Python38: 'python-3.8' ,\n    Python39: 'python-3.9' ,\n    Python310: 'python-3.10' ,\n    Python311: 'python-3.11' ,\n    Python312: 'python-3.12' ,\n    Deno140: 'deno-1.40' ,\n    Dart215: 'dart-2.15' ,\n    Dart216: 'dart-2.16' ,\n    Dart217: 'dart-2.17' ,\n    Dart218: 'dart-2.18' ,\n    Dart30: 'dart-3.0' ,\n    Dart31: 'dart-3.1' ,\n    Dart33: 'dart-3.3' ,\n    Dotnet31: 'dotnet-3.1' ,\n    Dotnet60: 'dotnet-6.0' ,\n    Dotnet70: 'dotnet-7.0' ,\n    Java80: 'java-8.0' ,\n    Java110: 'java-11.0' ,\n    Java170: 'java-17.0' ,\n    Java180: 'java-18.0' ,\n    Java210: 'java-21.0' ,\n    Swift55: 'swift-5.5' ,\n    Swift58: 'swift-5.8' ,\n    Swift59: 'swift-5.9' ,\n    Kotlin16: 'kotlin-1.6' ,\n    Kotlin18: 'kotlin-1.8' ,\n    Kotlin19: 'kotlin-1.9' ,\n    Cpp17: 'cpp-17' ,\n    Cpp20: 'cpp-20' ,\n    Bun10: 'bun-1.0' \n});\n\nmodule.exports = Runtime;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyZXB1bHNlLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL2VudW1zL3J1bnRpbWUuanM/M2I1YiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBSdW50aW1lID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgTm9kZTE0NTogJ25vZGUtMTQuNScgLFxuICAgIE5vZGUxNjA6ICdub2RlLTE2LjAnICxcbiAgICBOb2RlMTgwOiAnbm9kZS0xOC4wJyAsXG4gICAgTm9kZTE5MDogJ25vZGUtMTkuMCcgLFxuICAgIE5vZGUyMDA6ICdub2RlLTIwLjAnICxcbiAgICBOb2RlMjEwOiAnbm9kZS0yMS4wJyAsXG4gICAgUGhwODA6ICdwaHAtOC4wJyAsXG4gICAgUGhwODE6ICdwaHAtOC4xJyAsXG4gICAgUGhwODI6ICdwaHAtOC4yJyAsXG4gICAgUGhwODM6ICdwaHAtOC4zJyAsXG4gICAgUnVieTMwOiAncnVieS0zLjAnICxcbiAgICBSdWJ5MzE6ICdydWJ5LTMuMScgLFxuICAgIFJ1YnkzMjogJ3J1YnktMy4yJyAsXG4gICAgUnVieTMzOiAncnVieS0zLjMnICxcbiAgICBQeXRob24zODogJ3B5dGhvbi0zLjgnICxcbiAgICBQeXRob24zOTogJ3B5dGhvbi0zLjknICxcbiAgICBQeXRob24zMTA6ICdweXRob24tMy4xMCcgLFxuICAgIFB5dGhvbjMxMTogJ3B5dGhvbi0zLjExJyAsXG4gICAgUHl0aG9uMzEyOiAncHl0aG9uLTMuMTInICxcbiAgICBEZW5vMTQwOiAnZGVuby0xLjQwJyAsXG4gICAgRGFydDIxNTogJ2RhcnQtMi4xNScgLFxuICAgIERhcnQyMTY6ICdkYXJ0LTIuMTYnICxcbiAgICBEYXJ0MjE3OiAnZGFydC0yLjE3JyAsXG4gICAgRGFydDIxODogJ2RhcnQtMi4xOCcgLFxuICAgIERhcnQzMDogJ2RhcnQtMy4wJyAsXG4gICAgRGFydDMxOiAnZGFydC0zLjEnICxcbiAgICBEYXJ0MzM6ICdkYXJ0LTMuMycgLFxuICAgIERvdG5ldDMxOiAnZG90bmV0LTMuMScgLFxuICAgIERvdG5ldDYwOiAnZG90bmV0LTYuMCcgLFxuICAgIERvdG5ldDcwOiAnZG90bmV0LTcuMCcgLFxuICAgIEphdmE4MDogJ2phdmEtOC4wJyAsXG4gICAgSmF2YTExMDogJ2phdmEtMTEuMCcgLFxuICAgIEphdmExNzA6ICdqYXZhLTE3LjAnICxcbiAgICBKYXZhMTgwOiAnamF2YS0xOC4wJyAsXG4gICAgSmF2YTIxMDogJ2phdmEtMjEuMCcgLFxuICAgIFN3aWZ0NTU6ICdzd2lmdC01LjUnICxcbiAgICBTd2lmdDU4OiAnc3dpZnQtNS44JyAsXG4gICAgU3dpZnQ1OTogJ3N3aWZ0LTUuOScgLFxuICAgIEtvdGxpbjE2OiAna290bGluLTEuNicgLFxuICAgIEtvdGxpbjE4OiAna290bGluLTEuOCcgLFxuICAgIEtvdGxpbjE5OiAna290bGluLTEuOScgLFxuICAgIENwcDE3OiAnY3BwLTE3JyAsXG4gICAgQ3BwMjA6ICdjcHAtMjAnICxcbiAgICBCdW4xMDogJ2J1bi0xLjAnIFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gUnVudGltZTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/enums/runtime.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/enums/smtp-encryption.js":
/*!*****************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/smtp-encryption.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("const SmtpEncryption = Object.freeze({\n    None: 'none' ,\n    Ssl: 'ssl' ,\n    Tls: 'tls' \n});\n\nmodule.exports = SmtpEncryption;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9zbXRwLWVuY3J5cHRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyZXB1bHNlLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL2VudW1zL3NtdHAtZW5jcnlwdGlvbi5qcz81MWRiIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IFNtdHBFbmNyeXB0aW9uID0gT2JqZWN0LmZyZWV6ZSh7XG4gICAgTm9uZTogJ25vbmUnICxcbiAgICBTc2w6ICdzc2wnICxcbiAgICBUbHM6ICd0bHMnIFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gU210cEVuY3J5cHRpb247Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/enums/smtp-encryption.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/enums/smtp-encryption.js":
/*!*****************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/enums/smtp-encryption.js ***!
  \*****************************************************************/
/***/ ((module) => {

eval("const SmtpEncryption = Object.freeze({\n    None: 'none' ,\n    Ssl: 'ssl' ,\n    Tls: 'tls' \n});\n\nmodule.exports = SmtpEncryption;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZW51bXMvc210cC1lbmNyeXB0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2NhcmVwdWxzZS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9lbnVtcy9zbXRwLWVuY3J5cHRpb24uanM/NzFmOCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTbXRwRW5jcnlwdGlvbiA9IE9iamVjdC5mcmVlemUoe1xuICAgIE5vbmU6ICdub25lJyAsXG4gICAgU3NsOiAnc3NsJyAsXG4gICAgVGxzOiAndGxzJyBcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFNtdHBFbmNyeXB0aW9uOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/enums/smtp-encryption.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/exception.js":
/*!*****************************************************!*\
  !*** ./node_modules/node-appwrite/lib/exception.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("class AppwriteException extends Error {\n  constructor(message, code, type, response) {\n    super(message);\n    this.code = code;\n    this.type = type;\n    this.response = response;\n  }\n}\n\nmodule.exports = AppwriteException;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9leGNlcHRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NhcmVwdWxzZS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9leGNlcHRpb24uanM/MmMxMiJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBBcHB3cml0ZUV4Y2VwdGlvbiBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgY29kZSwgdHlwZSwgcmVzcG9uc2UpIHtcbiAgICBzdXBlcihtZXNzYWdlKTtcbiAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQXBwd3JpdGVFeGNlcHRpb247Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/exception.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/exception.js":
/*!*****************************************************!*\
  !*** ./node_modules/node-appwrite/lib/exception.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("class AppwriteException extends Error {\n  constructor(message, code, type, response) {\n    super(message);\n    this.code = code;\n    this.type = type;\n    this.response = response;\n  }\n}\n\nmodule.exports = AppwriteException;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZXhjZXB0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvZXhjZXB0aW9uLmpzP2M3MTkiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgQXBwd3JpdGVFeGNlcHRpb24gZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGNvZGUsIHR5cGUsIHJlc3BvbnNlKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFwcHdyaXRlRXhjZXB0aW9uOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/exception.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/id.js":
/*!**********************************************!*\
  !*** ./node_modules/node-appwrite/lib/id.js ***!
  \**********************************************/
/***/ ((module) => {

eval("class ID {\n    // Generate an hex ID based on timestamp\n    // Recreated from https://www.php.net/manual/en/function.uniqid.php\n    static #hexTimestamp = () => {\n        const now = new Date();\n        const sec = Math.floor(now.getTime() / 1000);\n        const msec = now.getMilliseconds();\n\n        // Convert to hexadecimal\n        const hexTimestamp = sec.toString(16) + msec.toString(16).padStart(5, '0');\n        return hexTimestamp;\n    }\n\n    // Generate a unique ID with padding to have a longer ID\n    static unique = (padding = 7) => {\n        const baseId = ID.#hexTimestamp();\n        let randomPadding = '';\n\n        for (let i = 0; i < padding; i++) {\n            const randomHexDigit = Math.floor(Math.random() * 16).toString(16);\n            randomPadding += randomHexDigit;\n        }\n\n        return baseId + randomPadding;\n    }\n\n    static custom = (id) => {\n         return id\n    }\n}\n\nmodule.exports = ID;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9pZC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSx3QkFBd0IsYUFBYTtBQUNyQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NhcmVwdWxzZS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9pZC5qcz8zODUyIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIElEIHtcbiAgICAvLyBHZW5lcmF0ZSBhbiBoZXggSUQgYmFzZWQgb24gdGltZXN0YW1wXG4gICAgLy8gUmVjcmVhdGVkIGZyb20gaHR0cHM6Ly93d3cucGhwLm5ldC9tYW51YWwvZW4vZnVuY3Rpb24udW5pcWlkLnBocFxuICAgIHN0YXRpYyAjaGV4VGltZXN0YW1wID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBjb25zdCBzZWMgPSBNYXRoLmZsb29yKG5vdy5nZXRUaW1lKCkgLyAxMDAwKTtcbiAgICAgICAgY29uc3QgbXNlYyA9IG5vdy5nZXRNaWxsaXNlY29uZHMoKTtcblxuICAgICAgICAvLyBDb252ZXJ0IHRvIGhleGFkZWNpbWFsXG4gICAgICAgIGNvbnN0IGhleFRpbWVzdGFtcCA9IHNlYy50b1N0cmluZygxNikgKyBtc2VjLnRvU3RyaW5nKDE2KS5wYWRTdGFydCg1LCAnMCcpO1xuICAgICAgICByZXR1cm4gaGV4VGltZXN0YW1wO1xuICAgIH1cblxuICAgIC8vIEdlbmVyYXRlIGEgdW5pcXVlIElEIHdpdGggcGFkZGluZyB0byBoYXZlIGEgbG9uZ2VyIElEXG4gICAgc3RhdGljIHVuaXF1ZSA9IChwYWRkaW5nID0gNykgPT4ge1xuICAgICAgICBjb25zdCBiYXNlSWQgPSBJRC4jaGV4VGltZXN0YW1wKCk7XG4gICAgICAgIGxldCByYW5kb21QYWRkaW5nID0gJyc7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWRkaW5nOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHJhbmRvbUhleERpZ2l0ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTYpLnRvU3RyaW5nKDE2KTtcbiAgICAgICAgICAgIHJhbmRvbVBhZGRpbmcgKz0gcmFuZG9tSGV4RGlnaXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYmFzZUlkICsgcmFuZG9tUGFkZGluZztcbiAgICB9XG5cbiAgICBzdGF0aWMgY3VzdG9tID0gKGlkKSA9PiB7XG4gICAgICAgICByZXR1cm4gaWRcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSUQ7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/id.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/id.js":
/*!**********************************************!*\
  !*** ./node_modules/node-appwrite/lib/id.js ***!
  \**********************************************/
/***/ ((module) => {

eval("class ID {\n    // Generate an hex ID based on timestamp\n    // Recreated from https://www.php.net/manual/en/function.uniqid.php\n    static #hexTimestamp = () => {\n        const now = new Date();\n        const sec = Math.floor(now.getTime() / 1000);\n        const msec = now.getMilliseconds();\n\n        // Convert to hexadecimal\n        const hexTimestamp = sec.toString(16) + msec.toString(16).padStart(5, '0');\n        return hexTimestamp;\n    }\n\n    // Generate a unique ID with padding to have a longer ID\n    static unique = (padding = 7) => {\n        const baseId = ID.#hexTimestamp();\n        let randomPadding = '';\n\n        for (let i = 0; i < padding; i++) {\n            const randomHexDigit = Math.floor(Math.random() * 16).toString(16);\n            randomPadding += randomHexDigit;\n        }\n\n        return baseId + randomPadding;\n    }\n\n    static custom = (id) => {\n         return id\n    }\n}\n\nmodule.exports = ID;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvaWQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsd0JBQXdCLGFBQWE7QUFDckM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvaWQuanM/ZTg4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBJRCB7XG4gICAgLy8gR2VuZXJhdGUgYW4gaGV4IElEIGJhc2VkIG9uIHRpbWVzdGFtcFxuICAgIC8vIFJlY3JlYXRlZCBmcm9tIGh0dHBzOi8vd3d3LnBocC5uZXQvbWFudWFsL2VuL2Z1bmN0aW9uLnVuaXFpZC5waHBcbiAgICBzdGF0aWMgI2hleFRpbWVzdGFtcCA9ICgpID0+IHtcbiAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3Qgc2VjID0gTWF0aC5mbG9vcihub3cuZ2V0VGltZSgpIC8gMTAwMCk7XG4gICAgICAgIGNvbnN0IG1zZWMgPSBub3cuZ2V0TWlsbGlzZWNvbmRzKCk7XG5cbiAgICAgICAgLy8gQ29udmVydCB0byBoZXhhZGVjaW1hbFxuICAgICAgICBjb25zdCBoZXhUaW1lc3RhbXAgPSBzZWMudG9TdHJpbmcoMTYpICsgbXNlYy50b1N0cmluZygxNikucGFkU3RhcnQoNSwgJzAnKTtcbiAgICAgICAgcmV0dXJuIGhleFRpbWVzdGFtcDtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBJRCB3aXRoIHBhZGRpbmcgdG8gaGF2ZSBhIGxvbmdlciBJRFxuICAgIHN0YXRpYyB1bmlxdWUgPSAocGFkZGluZyA9IDcpID0+IHtcbiAgICAgICAgY29uc3QgYmFzZUlkID0gSUQuI2hleFRpbWVzdGFtcCgpO1xuICAgICAgICBsZXQgcmFuZG9tUGFkZGluZyA9ICcnO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFkZGluZzsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByYW5kb21IZXhEaWdpdCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDE2KS50b1N0cmluZygxNik7XG4gICAgICAgICAgICByYW5kb21QYWRkaW5nICs9IHJhbmRvbUhleERpZ2l0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJhc2VJZCArIHJhbmRvbVBhZGRpbmc7XG4gICAgfVxuXG4gICAgc3RhdGljIGN1c3RvbSA9IChpZCkgPT4ge1xuICAgICAgICAgcmV0dXJuIGlkXG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IElEO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/id.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/inputFile.js":
/*!*****************************************************!*\
  !*** ./node_modules/node-appwrite/lib/inputFile.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const fs = __webpack_require__(/*! fs */ \"fs\");\nconst { ReadableStream } = __webpack_require__(/*! stream/web */ \"stream/web\");\n\n/**\n * @param {fs.ReadStream} readStream\n * @returns {ReadableStream}\n */\nfunction convertReadStreamToReadableStream(readStream) {\n  return new ReadableStream({\n    start(controller) {\n      readStream.on(\"data\", (chunk) => {\n        controller.enqueue(chunk);\n      });\n      readStream.on(\"end\", () => {\n        controller.close();\n      });\n      readStream.on(\"error\", (err) => {\n        controller.error(err);\n      });\n    },\n    cancel() {\n      readStream.destroy();\n    },\n  });\n}\n\n/**\n * @param {Buffer} buffer\n * @returns {ReadableStream}\n */\nfunction bufferToReadableStream(buffer) {\n  return new ReadableStream({\n    start(controller) {\n      controller.enqueue(buffer);\n      controller.close();\n    },\n  });\n}\n\nclass InputFile {\n  /** @type {ReadableStream} Content of file as a stream */\n  stream;\n\n  /** @type {number} Total final size of the file content */\n  size;\n\n  /** @type {string} File name */\n  filename;\n\n  /**\n   * @param {string} filePath\n   * @param {string} filename\n   * @returns {InputFile}\n   */\n  static fromPath = (filePath, filename) => {\n    const nodeStream = fs.createReadStream(filePath);\n    const stream = convertReadStreamToReadableStream(nodeStream);\n    const size = fs.statSync(filePath).size;\n    return new InputFile(stream, filename, size);\n  };\n\n  /**\n   * @param {Buffer} buffer\n   * @param {string} filename\n   * @returns {InputFile}\n   */\n  static fromBuffer = (buffer, filename) => {\n    const stream = bufferToReadableStream(buffer);\n    const size = buffer.byteLength;\n    return new InputFile(stream, filename, size);\n  };\n\n  /**\n   * @param {string} content\n   * @param {string} filename\n   * @returns {InputFile}\n   */\n  static fromPlainText = (content, filename) => {\n    const array = new TextEncoder().encode(content);\n    const buffer = Buffer.from(array);\n    return InputFile.fromBuffer(buffer, filename);\n  };\n\n  /**\n   * @param {ReadableStream} stream\n   * @param {string} filename\n   * @param {number} size\n   * @returns {InputFile}\n   */\n  static fromStream = (stream, filename, size) => {\n    return new InputFile(stream, filename, size);\n  };\n\n  /**\n   * @param {Blob} blob\n   * @param {string} filename\n   * @returns {InputFile}\n   */\n  static fromBlob = (blob, filename) => {\n    const stream = blob.stream();\n    const size = blob.size;\n    return new InputFile(stream, filename, size);\n  };\n\n  /**\n   * @param {ReadableStream} stream\n   * @param {string} filename\n   * @param {number} size\n   */\n  constructor(stream, filename, size) {\n    this.stream = stream;\n    this.filename = filename;\n    this.size = size;\n  }\n}\n\nmodule.exports = InputFile;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9pbnB1dEZpbGUuanMiLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxtQkFBTyxDQUFDLGNBQUk7QUFDdkIsUUFBUSxpQkFBaUIsRUFBRSxtQkFBTyxDQUFDLDhCQUFZOztBQUUvQztBQUNBLFdBQVcsZUFBZTtBQUMxQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQSxhQUFhLGdCQUFnQjtBQUM3Qjs7QUFFQSxhQUFhLFFBQVE7QUFDckI7O0FBRUEsYUFBYSxRQUFRO0FBQ3JCOztBQUVBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLGdCQUFnQjtBQUM3QixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsTUFBTTtBQUNuQixhQUFhLFFBQVE7QUFDckIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGFBQWEsZ0JBQWdCO0FBQzdCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvaW5wdXRGaWxlLmpzPzMzOWQiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZnMgPSByZXF1aXJlKFwiZnNcIik7XG5jb25zdCB7IFJlYWRhYmxlU3RyZWFtIH0gPSByZXF1aXJlKFwic3RyZWFtL3dlYlwiKTtcblxuLyoqXG4gKiBAcGFyYW0ge2ZzLlJlYWRTdHJlYW19IHJlYWRTdHJlYW1cbiAqIEByZXR1cm5zIHtSZWFkYWJsZVN0cmVhbX1cbiAqL1xuZnVuY3Rpb24gY29udmVydFJlYWRTdHJlYW1Ub1JlYWRhYmxlU3RyZWFtKHJlYWRTdHJlYW0pIHtcbiAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgc3RhcnQoY29udHJvbGxlcikge1xuICAgICAgcmVhZFN0cmVhbS5vbihcImRhdGFcIiwgKGNodW5rKSA9PiB7XG4gICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShjaHVuayk7XG4gICAgICB9KTtcbiAgICAgIHJlYWRTdHJlYW0ub24oXCJlbmRcIiwgKCkgPT4ge1xuICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICB9KTtcbiAgICAgIHJlYWRTdHJlYW0ub24oXCJlcnJvclwiLCAoZXJyKSA9PiB7XG4gICAgICAgIGNvbnRyb2xsZXIuZXJyb3IoZXJyKTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY2FuY2VsKCkge1xuICAgICAgcmVhZFN0cmVhbS5kZXN0cm95KCk7XG4gICAgfSxcbiAgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlclxuICogQHJldHVybnMge1JlYWRhYmxlU3RyZWFtfVxuICovXG5mdW5jdGlvbiBidWZmZXJUb1JlYWRhYmxlU3RyZWFtKGJ1ZmZlcikge1xuICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICBzdGFydChjb250cm9sbGVyKSB7XG4gICAgICBjb250cm9sbGVyLmVucXVldWUoYnVmZmVyKTtcbiAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICB9LFxuICB9KTtcbn1cblxuY2xhc3MgSW5wdXRGaWxlIHtcbiAgLyoqIEB0eXBlIHtSZWFkYWJsZVN0cmVhbX0gQ29udGVudCBvZiBmaWxlIGFzIGEgc3RyZWFtICovXG4gIHN0cmVhbTtcblxuICAvKiogQHR5cGUge251bWJlcn0gVG90YWwgZmluYWwgc2l6ZSBvZiB0aGUgZmlsZSBjb250ZW50ICovXG4gIHNpemU7XG5cbiAgLyoqIEB0eXBlIHtzdHJpbmd9IEZpbGUgbmFtZSAqL1xuICBmaWxlbmFtZTtcblxuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVQYXRoXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZVxuICAgKiBAcmV0dXJucyB7SW5wdXRGaWxlfVxuICAgKi9cbiAgc3RhdGljIGZyb21QYXRoID0gKGZpbGVQYXRoLCBmaWxlbmFtZSkgPT4ge1xuICAgIGNvbnN0IG5vZGVTdHJlYW0gPSBmcy5jcmVhdGVSZWFkU3RyZWFtKGZpbGVQYXRoKTtcbiAgICBjb25zdCBzdHJlYW0gPSBjb252ZXJ0UmVhZFN0cmVhbVRvUmVhZGFibGVTdHJlYW0obm9kZVN0cmVhbSk7XG4gICAgY29uc3Qgc2l6ZSA9IGZzLnN0YXRTeW5jKGZpbGVQYXRoKS5zaXplO1xuICAgIHJldHVybiBuZXcgSW5wdXRGaWxlKHN0cmVhbSwgZmlsZW5hbWUsIHNpemUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZVxuICAgKiBAcmV0dXJucyB7SW5wdXRGaWxlfVxuICAgKi9cbiAgc3RhdGljIGZyb21CdWZmZXIgPSAoYnVmZmVyLCBmaWxlbmFtZSkgPT4ge1xuICAgIGNvbnN0IHN0cmVhbSA9IGJ1ZmZlclRvUmVhZGFibGVTdHJlYW0oYnVmZmVyKTtcbiAgICBjb25zdCBzaXplID0gYnVmZmVyLmJ5dGVMZW5ndGg7XG4gICAgcmV0dXJuIG5ldyBJbnB1dEZpbGUoc3RyZWFtLCBmaWxlbmFtZSwgc2l6ZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZVxuICAgKiBAcmV0dXJucyB7SW5wdXRGaWxlfVxuICAgKi9cbiAgc3RhdGljIGZyb21QbGFpblRleHQgPSAoY29udGVudCwgZmlsZW5hbWUpID0+IHtcbiAgICBjb25zdCBhcnJheSA9IG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShjb250ZW50KTtcbiAgICBjb25zdCBidWZmZXIgPSBCdWZmZXIuZnJvbShhcnJheSk7XG4gICAgcmV0dXJuIElucHV0RmlsZS5mcm9tQnVmZmVyKGJ1ZmZlciwgZmlsZW5hbWUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge1JlYWRhYmxlU3RyZWFtfSBzdHJlYW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVuYW1lXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG4gICAqIEByZXR1cm5zIHtJbnB1dEZpbGV9XG4gICAqL1xuICBzdGF0aWMgZnJvbVN0cmVhbSA9IChzdHJlYW0sIGZpbGVuYW1lLCBzaXplKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBJbnB1dEZpbGUoc3RyZWFtLCBmaWxlbmFtZSwgc2l6ZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7QmxvYn0gYmxvYlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWVcbiAgICogQHJldHVybnMge0lucHV0RmlsZX1cbiAgICovXG4gIHN0YXRpYyBmcm9tQmxvYiA9IChibG9iLCBmaWxlbmFtZSkgPT4ge1xuICAgIGNvbnN0IHN0cmVhbSA9IGJsb2Iuc3RyZWFtKCk7XG4gICAgY29uc3Qgc2l6ZSA9IGJsb2Iuc2l6ZTtcbiAgICByZXR1cm4gbmV3IElucHV0RmlsZShzdHJlYW0sIGZpbGVuYW1lLCBzaXplKTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtSZWFkYWJsZVN0cmVhbX0gc3RyZWFtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZVxuICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZVxuICAgKi9cbiAgY29uc3RydWN0b3Ioc3RyZWFtLCBmaWxlbmFtZSwgc2l6ZSkge1xuICAgIHRoaXMuc3RyZWFtID0gc3RyZWFtO1xuICAgIHRoaXMuZmlsZW5hbWUgPSBmaWxlbmFtZTtcbiAgICB0aGlzLnNpemUgPSBzaXplO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSW5wdXRGaWxlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/inputFile.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/inputFile.js":
/*!*****************************************************!*\
  !*** ./node_modules/node-appwrite/lib/inputFile.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const fs = __webpack_require__(/*! fs */ \"fs\");\nconst { ReadableStream } = __webpack_require__(/*! stream/web */ \"stream/web\");\n\n/**\n * @param {fs.ReadStream} readStream\n * @returns {ReadableStream}\n */\nfunction convertReadStreamToReadableStream(readStream) {\n  return new ReadableStream({\n    start(controller) {\n      readStream.on(\"data\", (chunk) => {\n        controller.enqueue(chunk);\n      });\n      readStream.on(\"end\", () => {\n        controller.close();\n      });\n      readStream.on(\"error\", (err) => {\n        controller.error(err);\n      });\n    },\n    cancel() {\n      readStream.destroy();\n    },\n  });\n}\n\n/**\n * @param {Buffer} buffer\n * @returns {ReadableStream}\n */\nfunction bufferToReadableStream(buffer) {\n  return new ReadableStream({\n    start(controller) {\n      controller.enqueue(buffer);\n      controller.close();\n    },\n  });\n}\n\nclass InputFile {\n  /** @type {ReadableStream} Content of file as a stream */\n  stream;\n\n  /** @type {number} Total final size of the file content */\n  size;\n\n  /** @type {string} File name */\n  filename;\n\n  /**\n   * @param {string} filePath\n   * @param {string} filename\n   * @returns {InputFile}\n   */\n  static fromPath = (filePath, filename) => {\n    const nodeStream = fs.createReadStream(filePath);\n    const stream = convertReadStreamToReadableStream(nodeStream);\n    const size = fs.statSync(filePath).size;\n    return new InputFile(stream, filename, size);\n  };\n\n  /**\n   * @param {Buffer} buffer\n   * @param {string} filename\n   * @returns {InputFile}\n   */\n  static fromBuffer = (buffer, filename) => {\n    const stream = bufferToReadableStream(buffer);\n    const size = buffer.byteLength;\n    return new InputFile(stream, filename, size);\n  };\n\n  /**\n   * @param {string} content\n   * @param {string} filename\n   * @returns {InputFile}\n   */\n  static fromPlainText = (content, filename) => {\n    const array = new TextEncoder().encode(content);\n    const buffer = Buffer.from(array);\n    return InputFile.fromBuffer(buffer, filename);\n  };\n\n  /**\n   * @param {ReadableStream} stream\n   * @param {string} filename\n   * @param {number} size\n   * @returns {InputFile}\n   */\n  static fromStream = (stream, filename, size) => {\n    return new InputFile(stream, filename, size);\n  };\n\n  /**\n   * @param {Blob} blob\n   * @param {string} filename\n   * @returns {InputFile}\n   */\n  static fromBlob = (blob, filename) => {\n    const stream = blob.stream();\n    const size = blob.size;\n    return new InputFile(stream, filename, size);\n  };\n\n  /**\n   * @param {ReadableStream} stream\n   * @param {string} filename\n   * @param {number} size\n   */\n  constructor(stream, filename, size) {\n    this.stream = stream;\n    this.filename = filename;\n    this.size = size;\n  }\n}\n\nmodule.exports = InputFile;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvaW5wdXRGaWxlLmpzIiwibWFwcGluZ3MiOiJBQUFBLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCLFFBQVEsaUJBQWlCLEVBQUUsbUJBQU8sQ0FBQyw4QkFBWTs7QUFFL0M7QUFDQSxXQUFXLGVBQWU7QUFDMUIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIOztBQUVBO0FBQ0EsYUFBYSxnQkFBZ0I7QUFDN0I7O0FBRUEsYUFBYSxRQUFRO0FBQ3JCOztBQUVBLGFBQWEsUUFBUTtBQUNyQjs7QUFFQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxnQkFBZ0I7QUFDN0IsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLE1BQU07QUFDbkIsYUFBYSxRQUFRO0FBQ3JCLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxhQUFhLGdCQUFnQjtBQUM3QixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyZXB1bHNlLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL2lucHV0RmlsZS5qcz82OWFiIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZzID0gcmVxdWlyZShcImZzXCIpO1xuY29uc3QgeyBSZWFkYWJsZVN0cmVhbSB9ID0gcmVxdWlyZShcInN0cmVhbS93ZWJcIik7XG5cbi8qKlxuICogQHBhcmFtIHtmcy5SZWFkU3RyZWFtfSByZWFkU3RyZWFtXG4gKiBAcmV0dXJucyB7UmVhZGFibGVTdHJlYW19XG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRSZWFkU3RyZWFtVG9SZWFkYWJsZVN0cmVhbShyZWFkU3RyZWFtKSB7XG4gIHJldHVybiBuZXcgUmVhZGFibGVTdHJlYW0oe1xuICAgIHN0YXJ0KGNvbnRyb2xsZXIpIHtcbiAgICAgIHJlYWRTdHJlYW0ub24oXCJkYXRhXCIsIChjaHVuaykgPT4ge1xuICAgICAgICBjb250cm9sbGVyLmVucXVldWUoY2h1bmspO1xuICAgICAgfSk7XG4gICAgICByZWFkU3RyZWFtLm9uKFwiZW5kXCIsICgpID0+IHtcbiAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgICAgfSk7XG4gICAgICByZWFkU3RyZWFtLm9uKFwiZXJyb3JcIiwgKGVycikgPT4ge1xuICAgICAgICBjb250cm9sbGVyLmVycm9yKGVycik7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGNhbmNlbCgpIHtcbiAgICAgIHJlYWRTdHJlYW0uZGVzdHJveSgpO1xuICAgIH0sXG4gIH0pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXJcbiAqIEByZXR1cm5zIHtSZWFkYWJsZVN0cmVhbX1cbiAqL1xuZnVuY3Rpb24gYnVmZmVyVG9SZWFkYWJsZVN0cmVhbShidWZmZXIpIHtcbiAgcmV0dXJuIG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgc3RhcnQoY29udHJvbGxlcikge1xuICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGJ1ZmZlcik7XG4gICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgfSxcbiAgfSk7XG59XG5cbmNsYXNzIElucHV0RmlsZSB7XG4gIC8qKiBAdHlwZSB7UmVhZGFibGVTdHJlYW19IENvbnRlbnQgb2YgZmlsZSBhcyBhIHN0cmVhbSAqL1xuICBzdHJlYW07XG5cbiAgLyoqIEB0eXBlIHtudW1iZXJ9IFRvdGFsIGZpbmFsIHNpemUgb2YgdGhlIGZpbGUgY29udGVudCAqL1xuICBzaXplO1xuXG4gIC8qKiBAdHlwZSB7c3RyaW5nfSBGaWxlIG5hbWUgKi9cbiAgZmlsZW5hbWU7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlUGF0aFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWVcbiAgICogQHJldHVybnMge0lucHV0RmlsZX1cbiAgICovXG4gIHN0YXRpYyBmcm9tUGF0aCA9IChmaWxlUGF0aCwgZmlsZW5hbWUpID0+IHtcbiAgICBjb25zdCBub2RlU3RyZWFtID0gZnMuY3JlYXRlUmVhZFN0cmVhbShmaWxlUGF0aCk7XG4gICAgY29uc3Qgc3RyZWFtID0gY29udmVydFJlYWRTdHJlYW1Ub1JlYWRhYmxlU3RyZWFtKG5vZGVTdHJlYW0pO1xuICAgIGNvbnN0IHNpemUgPSBmcy5zdGF0U3luYyhmaWxlUGF0aCkuc2l6ZTtcbiAgICByZXR1cm4gbmV3IElucHV0RmlsZShzdHJlYW0sIGZpbGVuYW1lLCBzaXplKTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWVcbiAgICogQHJldHVybnMge0lucHV0RmlsZX1cbiAgICovXG4gIHN0YXRpYyBmcm9tQnVmZmVyID0gKGJ1ZmZlciwgZmlsZW5hbWUpID0+IHtcbiAgICBjb25zdCBzdHJlYW0gPSBidWZmZXJUb1JlYWRhYmxlU3RyZWFtKGJ1ZmZlcik7XG4gICAgY29uc3Qgc2l6ZSA9IGJ1ZmZlci5ieXRlTGVuZ3RoO1xuICAgIHJldHVybiBuZXcgSW5wdXRGaWxlKHN0cmVhbSwgZmlsZW5hbWUsIHNpemUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWVcbiAgICogQHJldHVybnMge0lucHV0RmlsZX1cbiAgICovXG4gIHN0YXRpYyBmcm9tUGxhaW5UZXh0ID0gKGNvbnRlbnQsIGZpbGVuYW1lKSA9PiB7XG4gICAgY29uc3QgYXJyYXkgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUoY29udGVudCk7XG4gICAgY29uc3QgYnVmZmVyID0gQnVmZmVyLmZyb20oYXJyYXkpO1xuICAgIHJldHVybiBJbnB1dEZpbGUuZnJvbUJ1ZmZlcihidWZmZXIsIGZpbGVuYW1lKTtcbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtSZWFkYWJsZVN0cmVhbX0gc3RyZWFtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZVxuICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZVxuICAgKiBAcmV0dXJucyB7SW5wdXRGaWxlfVxuICAgKi9cbiAgc3RhdGljIGZyb21TdHJlYW0gPSAoc3RyZWFtLCBmaWxlbmFtZSwgc2l6ZSkgPT4ge1xuICAgIHJldHVybiBuZXcgSW5wdXRGaWxlKHN0cmVhbSwgZmlsZW5hbWUsIHNpemUpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0Jsb2J9IGJsb2JcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZpbGVuYW1lXG4gICAqIEByZXR1cm5zIHtJbnB1dEZpbGV9XG4gICAqL1xuICBzdGF0aWMgZnJvbUJsb2IgPSAoYmxvYiwgZmlsZW5hbWUpID0+IHtcbiAgICBjb25zdCBzdHJlYW0gPSBibG9iLnN0cmVhbSgpO1xuICAgIGNvbnN0IHNpemUgPSBibG9iLnNpemU7XG4gICAgcmV0dXJuIG5ldyBJbnB1dEZpbGUoc3RyZWFtLCBmaWxlbmFtZSwgc2l6ZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7UmVhZGFibGVTdHJlYW19IHN0cmVhbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWVcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNpemVcbiAgICovXG4gIGNvbnN0cnVjdG9yKHN0cmVhbSwgZmlsZW5hbWUsIHNpemUpIHtcbiAgICB0aGlzLnN0cmVhbSA9IHN0cmVhbTtcbiAgICB0aGlzLmZpbGVuYW1lID0gZmlsZW5hbWU7XG4gICAgdGhpcy5zaXplID0gc2l6ZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IElucHV0RmlsZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/inputFile.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/permission.js":
/*!******************************************************!*\
  !*** ./node_modules/node-appwrite/lib/permission.js ***!
  \******************************************************/
/***/ ((module) => {

eval("class Permission {\n\n    static read = (role) => {\n         return `read(\"${role}\")`\n    }\n\n    static write = (role) => {\n         return `write(\"${role}\")`\n    }\n\n    static create = (role) => {\n         return `create(\"${role}\")`\n    }\n\n    static update = (role) => {\n         return `update(\"${role}\")`\n    }\n\n    static delete = (role) => {\n         return `delete(\"${role}\")`\n    }\n}\n\nmodule.exports = Permission;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9wZXJtaXNzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EseUJBQXlCLEtBQUs7QUFDOUI7O0FBRUE7QUFDQSwwQkFBMEIsS0FBSztBQUMvQjs7QUFFQTtBQUNBLDJCQUEyQixLQUFLO0FBQ2hDOztBQUVBO0FBQ0EsMkJBQTJCLEtBQUs7QUFDaEM7O0FBRUE7QUFDQSwyQkFBMkIsS0FBSztBQUNoQztBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyZXB1bHNlLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL3Blcm1pc3Npb24uanM/ZDFmYSJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBQZXJtaXNzaW9uIHtcblxuICAgIHN0YXRpYyByZWFkID0gKHJvbGUpID0+IHtcbiAgICAgICAgIHJldHVybiBgcmVhZChcIiR7cm9sZX1cIilgXG4gICAgfVxuXG4gICAgc3RhdGljIHdyaXRlID0gKHJvbGUpID0+IHtcbiAgICAgICAgIHJldHVybiBgd3JpdGUoXCIke3JvbGV9XCIpYFxuICAgIH1cblxuICAgIHN0YXRpYyBjcmVhdGUgPSAocm9sZSkgPT4ge1xuICAgICAgICAgcmV0dXJuIGBjcmVhdGUoXCIke3JvbGV9XCIpYFxuICAgIH1cblxuICAgIHN0YXRpYyB1cGRhdGUgPSAocm9sZSkgPT4ge1xuICAgICAgICAgcmV0dXJuIGB1cGRhdGUoXCIke3JvbGV9XCIpYFxuICAgIH1cblxuICAgIHN0YXRpYyBkZWxldGUgPSAocm9sZSkgPT4ge1xuICAgICAgICAgcmV0dXJuIGBkZWxldGUoXCIke3JvbGV9XCIpYFxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQZXJtaXNzaW9uO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/permission.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/permission.js":
/*!******************************************************!*\
  !*** ./node_modules/node-appwrite/lib/permission.js ***!
  \******************************************************/
/***/ ((module) => {

eval("class Permission {\n\n    static read = (role) => {\n         return `read(\"${role}\")`\n    }\n\n    static write = (role) => {\n         return `write(\"${role}\")`\n    }\n\n    static create = (role) => {\n         return `create(\"${role}\")`\n    }\n\n    static update = (role) => {\n         return `update(\"${role}\")`\n    }\n\n    static delete = (role) => {\n         return `delete(\"${role}\")`\n    }\n}\n\nmodule.exports = Permission;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvcGVybWlzc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLHlCQUF5QixLQUFLO0FBQzlCOztBQUVBO0FBQ0EsMEJBQTBCLEtBQUs7QUFDL0I7O0FBRUE7QUFDQSwyQkFBMkIsS0FBSztBQUNoQzs7QUFFQTtBQUNBLDJCQUEyQixLQUFLO0FBQ2hDOztBQUVBO0FBQ0EsMkJBQTJCLEtBQUs7QUFDaEM7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NhcmVwdWxzZS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9wZXJtaXNzaW9uLmpzP2ZjMzAiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgUGVybWlzc2lvbiB7XG5cbiAgICBzdGF0aWMgcmVhZCA9IChyb2xlKSA9PiB7XG4gICAgICAgICByZXR1cm4gYHJlYWQoXCIke3JvbGV9XCIpYFxuICAgIH1cblxuICAgIHN0YXRpYyB3cml0ZSA9IChyb2xlKSA9PiB7XG4gICAgICAgICByZXR1cm4gYHdyaXRlKFwiJHtyb2xlfVwiKWBcbiAgICB9XG5cbiAgICBzdGF0aWMgY3JlYXRlID0gKHJvbGUpID0+IHtcbiAgICAgICAgIHJldHVybiBgY3JlYXRlKFwiJHtyb2xlfVwiKWBcbiAgICB9XG5cbiAgICBzdGF0aWMgdXBkYXRlID0gKHJvbGUpID0+IHtcbiAgICAgICAgIHJldHVybiBgdXBkYXRlKFwiJHtyb2xlfVwiKWBcbiAgICB9XG5cbiAgICBzdGF0aWMgZGVsZXRlID0gKHJvbGUpID0+IHtcbiAgICAgICAgIHJldHVybiBgZGVsZXRlKFwiJHtyb2xlfVwiKWBcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUGVybWlzc2lvbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/permission.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/query.js":
/*!*************************************************!*\
  !*** ./node_modules/node-appwrite/lib/query.js ***!
  \*************************************************/
/***/ ((module) => {

eval("class Query {\n  constructor(method, attribute, values) {\n    this.method = method\n    this.attribute = attribute\n\n    if (values !== undefined) {\n      if (Array.isArray(values)) {\n        this.values = values\n      } else {\n        this.values = [values]\n      }\n    }\n  }\n\n  static equal = (attribute, value) =>\n    new Query(\"equal\", attribute, value).toString()\n\n  static notEqual = (attribute, value) =>\n    new Query(\"notEqual\", attribute, value).toString()\n\n  static lessThan = (attribute, value) =>\n    new Query(\"lessThan\", attribute, value).toString()\n\n  static lessThanEqual = (attribute, value) =>\n    new Query(\"lessThanEqual\", attribute, value).toString()\n\n  static greaterThan = (attribute, value) =>\n    new Query(\"greaterThan\", attribute, value).toString()\n\n  static greaterThanEqual = (attribute, value) =>\n    new Query(\"greaterThanEqual\", attribute, value).toString()\n\n  static isNull = attribute =>\n    new Query(\"isNull\", attribute).toString()\n\n  static isNotNull = attribute =>\n    new Query(\"isNotNull\", attribute).toString()\n\n  static between = (attribute, start, end) =>\n    new Query(\"between\", attribute, [start, end]).toString()\n\n  static startsWith = (attribute, value) =>\n    new Query(\"startsWith\", attribute, value).toString()\n\n  static endsWith = (attribute, value) =>\n    new Query(\"endsWith\", attribute, value).toString()\n\n  static select = attributes =>\n    new Query(\"select\", undefined, attributes).toString()\n\n  static search = (attribute, value) =>\n    new Query(\"search\", attribute, value).toString()\n\n  static orderDesc = attribute =>\n    new Query(\"orderDesc\", attribute).toString()\n\n  static orderAsc = attribute =>\n    new Query(\"orderAsc\", attribute).toString()\n\n  static cursorAfter = documentId =>\n    new Query(\"cursorAfter\", undefined, documentId).toString()\n\n  static cursorBefore = documentId =>\n    new Query(\"cursorBefore\", undefined, documentId).toString()\n\n  static limit = limit =>\n    new Query(\"limit\", undefined, limit).toString()\n\n  static offset = offset =>\n    new Query(\"offset\", undefined, offset).toString()\n\n  static contains = (attribute, value) =>\n    new Query(\"contains\", attribute, value).toString()\n\n  static or = (queries) =>\n    new Query(\"or\", undefined, queries.map((query) => JSON.parse(query))).toString()\n\n  static and = (queries) =>\n    new Query(\"and\", undefined, queries.map((query) => JSON.parse(query))).toString();\n}\n\nQuery.prototype.toString = function () {\n  return JSON.stringify({\n    method: this.method,\n    attribute: this.attribute,\n    values: this.values\n  })\n} \n\nmodule.exports = Query;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9xdWVyeS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvcXVlcnkuanM/ZDM0NCJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBRdWVyeSB7XG4gIGNvbnN0cnVjdG9yKG1ldGhvZCwgYXR0cmlidXRlLCB2YWx1ZXMpIHtcbiAgICB0aGlzLm1ldGhvZCA9IG1ldGhvZFxuICAgIHRoaXMuYXR0cmlidXRlID0gYXR0cmlidXRlXG5cbiAgICBpZiAodmFsdWVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlcykpIHtcbiAgICAgICAgdGhpcy52YWx1ZXMgPSB2YWx1ZXNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudmFsdWVzID0gW3ZhbHVlc11cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZXF1YWwgPSAoYXR0cmlidXRlLCB2YWx1ZSkgPT5cbiAgICBuZXcgUXVlcnkoXCJlcXVhbFwiLCBhdHRyaWJ1dGUsIHZhbHVlKS50b1N0cmluZygpXG5cbiAgc3RhdGljIG5vdEVxdWFsID0gKGF0dHJpYnV0ZSwgdmFsdWUpID0+XG4gICAgbmV3IFF1ZXJ5KFwibm90RXF1YWxcIiwgYXR0cmlidXRlLCB2YWx1ZSkudG9TdHJpbmcoKVxuXG4gIHN0YXRpYyBsZXNzVGhhbiA9IChhdHRyaWJ1dGUsIHZhbHVlKSA9PlxuICAgIG5ldyBRdWVyeShcImxlc3NUaGFuXCIsIGF0dHJpYnV0ZSwgdmFsdWUpLnRvU3RyaW5nKClcblxuICBzdGF0aWMgbGVzc1RoYW5FcXVhbCA9IChhdHRyaWJ1dGUsIHZhbHVlKSA9PlxuICAgIG5ldyBRdWVyeShcImxlc3NUaGFuRXF1YWxcIiwgYXR0cmlidXRlLCB2YWx1ZSkudG9TdHJpbmcoKVxuXG4gIHN0YXRpYyBncmVhdGVyVGhhbiA9IChhdHRyaWJ1dGUsIHZhbHVlKSA9PlxuICAgIG5ldyBRdWVyeShcImdyZWF0ZXJUaGFuXCIsIGF0dHJpYnV0ZSwgdmFsdWUpLnRvU3RyaW5nKClcblxuICBzdGF0aWMgZ3JlYXRlclRoYW5FcXVhbCA9IChhdHRyaWJ1dGUsIHZhbHVlKSA9PlxuICAgIG5ldyBRdWVyeShcImdyZWF0ZXJUaGFuRXF1YWxcIiwgYXR0cmlidXRlLCB2YWx1ZSkudG9TdHJpbmcoKVxuXG4gIHN0YXRpYyBpc051bGwgPSBhdHRyaWJ1dGUgPT5cbiAgICBuZXcgUXVlcnkoXCJpc051bGxcIiwgYXR0cmlidXRlKS50b1N0cmluZygpXG5cbiAgc3RhdGljIGlzTm90TnVsbCA9IGF0dHJpYnV0ZSA9PlxuICAgIG5ldyBRdWVyeShcImlzTm90TnVsbFwiLCBhdHRyaWJ1dGUpLnRvU3RyaW5nKClcblxuICBzdGF0aWMgYmV0d2VlbiA9IChhdHRyaWJ1dGUsIHN0YXJ0LCBlbmQpID0+XG4gICAgbmV3IFF1ZXJ5KFwiYmV0d2VlblwiLCBhdHRyaWJ1dGUsIFtzdGFydCwgZW5kXSkudG9TdHJpbmcoKVxuXG4gIHN0YXRpYyBzdGFydHNXaXRoID0gKGF0dHJpYnV0ZSwgdmFsdWUpID0+XG4gICAgbmV3IFF1ZXJ5KFwic3RhcnRzV2l0aFwiLCBhdHRyaWJ1dGUsIHZhbHVlKS50b1N0cmluZygpXG5cbiAgc3RhdGljIGVuZHNXaXRoID0gKGF0dHJpYnV0ZSwgdmFsdWUpID0+XG4gICAgbmV3IFF1ZXJ5KFwiZW5kc1dpdGhcIiwgYXR0cmlidXRlLCB2YWx1ZSkudG9TdHJpbmcoKVxuXG4gIHN0YXRpYyBzZWxlY3QgPSBhdHRyaWJ1dGVzID0+XG4gICAgbmV3IFF1ZXJ5KFwic2VsZWN0XCIsIHVuZGVmaW5lZCwgYXR0cmlidXRlcykudG9TdHJpbmcoKVxuXG4gIHN0YXRpYyBzZWFyY2ggPSAoYXR0cmlidXRlLCB2YWx1ZSkgPT5cbiAgICBuZXcgUXVlcnkoXCJzZWFyY2hcIiwgYXR0cmlidXRlLCB2YWx1ZSkudG9TdHJpbmcoKVxuXG4gIHN0YXRpYyBvcmRlckRlc2MgPSBhdHRyaWJ1dGUgPT5cbiAgICBuZXcgUXVlcnkoXCJvcmRlckRlc2NcIiwgYXR0cmlidXRlKS50b1N0cmluZygpXG5cbiAgc3RhdGljIG9yZGVyQXNjID0gYXR0cmlidXRlID0+XG4gICAgbmV3IFF1ZXJ5KFwib3JkZXJBc2NcIiwgYXR0cmlidXRlKS50b1N0cmluZygpXG5cbiAgc3RhdGljIGN1cnNvckFmdGVyID0gZG9jdW1lbnRJZCA9PlxuICAgIG5ldyBRdWVyeShcImN1cnNvckFmdGVyXCIsIHVuZGVmaW5lZCwgZG9jdW1lbnRJZCkudG9TdHJpbmcoKVxuXG4gIHN0YXRpYyBjdXJzb3JCZWZvcmUgPSBkb2N1bWVudElkID0+XG4gICAgbmV3IFF1ZXJ5KFwiY3Vyc29yQmVmb3JlXCIsIHVuZGVmaW5lZCwgZG9jdW1lbnRJZCkudG9TdHJpbmcoKVxuXG4gIHN0YXRpYyBsaW1pdCA9IGxpbWl0ID0+XG4gICAgbmV3IFF1ZXJ5KFwibGltaXRcIiwgdW5kZWZpbmVkLCBsaW1pdCkudG9TdHJpbmcoKVxuXG4gIHN0YXRpYyBvZmZzZXQgPSBvZmZzZXQgPT5cbiAgICBuZXcgUXVlcnkoXCJvZmZzZXRcIiwgdW5kZWZpbmVkLCBvZmZzZXQpLnRvU3RyaW5nKClcblxuICBzdGF0aWMgY29udGFpbnMgPSAoYXR0cmlidXRlLCB2YWx1ZSkgPT5cbiAgICBuZXcgUXVlcnkoXCJjb250YWluc1wiLCBhdHRyaWJ1dGUsIHZhbHVlKS50b1N0cmluZygpXG5cbiAgc3RhdGljIG9yID0gKHF1ZXJpZXMpID0+XG4gICAgbmV3IFF1ZXJ5KFwib3JcIiwgdW5kZWZpbmVkLCBxdWVyaWVzLm1hcCgocXVlcnkpID0+IEpTT04ucGFyc2UocXVlcnkpKSkudG9TdHJpbmcoKVxuXG4gIHN0YXRpYyBhbmQgPSAocXVlcmllcykgPT5cbiAgICBuZXcgUXVlcnkoXCJhbmRcIiwgdW5kZWZpbmVkLCBxdWVyaWVzLm1hcCgocXVlcnkpID0+IEpTT04ucGFyc2UocXVlcnkpKSkudG9TdHJpbmcoKTtcbn1cblxuUXVlcnkucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgIG1ldGhvZDogdGhpcy5tZXRob2QsXG4gICAgYXR0cmlidXRlOiB0aGlzLmF0dHJpYnV0ZSxcbiAgICB2YWx1ZXM6IHRoaXMudmFsdWVzXG4gIH0pXG59IFxuXG5tb2R1bGUuZXhwb3J0cyA9IFF1ZXJ5O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/query.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/query.js":
/*!*************************************************!*\
  !*** ./node_modules/node-appwrite/lib/query.js ***!
  \*************************************************/
/***/ ((module) => {

eval("class Query {\n  constructor(method, attribute, values) {\n    this.method = method\n    this.attribute = attribute\n\n    if (values !== undefined) {\n      if (Array.isArray(values)) {\n        this.values = values\n      } else {\n        this.values = [values]\n      }\n    }\n  }\n\n  static equal = (attribute, value) =>\n    new Query(\"equal\", attribute, value).toString()\n\n  static notEqual = (attribute, value) =>\n    new Query(\"notEqual\", attribute, value).toString()\n\n  static lessThan = (attribute, value) =>\n    new Query(\"lessThan\", attribute, value).toString()\n\n  static lessThanEqual = (attribute, value) =>\n    new Query(\"lessThanEqual\", attribute, value).toString()\n\n  static greaterThan = (attribute, value) =>\n    new Query(\"greaterThan\", attribute, value).toString()\n\n  static greaterThanEqual = (attribute, value) =>\n    new Query(\"greaterThanEqual\", attribute, value).toString()\n\n  static isNull = attribute =>\n    new Query(\"isNull\", attribute).toString()\n\n  static isNotNull = attribute =>\n    new Query(\"isNotNull\", attribute).toString()\n\n  static between = (attribute, start, end) =>\n    new Query(\"between\", attribute, [start, end]).toString()\n\n  static startsWith = (attribute, value) =>\n    new Query(\"startsWith\", attribute, value).toString()\n\n  static endsWith = (attribute, value) =>\n    new Query(\"endsWith\", attribute, value).toString()\n\n  static select = attributes =>\n    new Query(\"select\", undefined, attributes).toString()\n\n  static search = (attribute, value) =>\n    new Query(\"search\", attribute, value).toString()\n\n  static orderDesc = attribute =>\n    new Query(\"orderDesc\", attribute).toString()\n\n  static orderAsc = attribute =>\n    new Query(\"orderAsc\", attribute).toString()\n\n  static cursorAfter = documentId =>\n    new Query(\"cursorAfter\", undefined, documentId).toString()\n\n  static cursorBefore = documentId =>\n    new Query(\"cursorBefore\", undefined, documentId).toString()\n\n  static limit = limit =>\n    new Query(\"limit\", undefined, limit).toString()\n\n  static offset = offset =>\n    new Query(\"offset\", undefined, offset).toString()\n\n  static contains = (attribute, value) =>\n    new Query(\"contains\", attribute, value).toString()\n\n  static or = (queries) =>\n    new Query(\"or\", undefined, queries.map((query) => JSON.parse(query))).toString()\n\n  static and = (queries) =>\n    new Query(\"and\", undefined, queries.map((query) => JSON.parse(query))).toString();\n}\n\nQuery.prototype.toString = function () {\n  return JSON.stringify({\n    method: this.method,\n    attribute: this.attribute,\n    values: this.values\n  })\n} \n\nmodule.exports = Query;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvcXVlcnkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyZXB1bHNlLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL3F1ZXJ5LmpzPzkwMzAiXSwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgUXVlcnkge1xuICBjb25zdHJ1Y3RvcihtZXRob2QsIGF0dHJpYnV0ZSwgdmFsdWVzKSB7XG4gICAgdGhpcy5tZXRob2QgPSBtZXRob2RcbiAgICB0aGlzLmF0dHJpYnV0ZSA9IGF0dHJpYnV0ZVxuXG4gICAgaWYgKHZhbHVlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZXMpKSB7XG4gICAgICAgIHRoaXMudmFsdWVzID0gdmFsdWVzXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnZhbHVlcyA9IFt2YWx1ZXNdXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGVxdWFsID0gKGF0dHJpYnV0ZSwgdmFsdWUpID0+XG4gICAgbmV3IFF1ZXJ5KFwiZXF1YWxcIiwgYXR0cmlidXRlLCB2YWx1ZSkudG9TdHJpbmcoKVxuXG4gIHN0YXRpYyBub3RFcXVhbCA9IChhdHRyaWJ1dGUsIHZhbHVlKSA9PlxuICAgIG5ldyBRdWVyeShcIm5vdEVxdWFsXCIsIGF0dHJpYnV0ZSwgdmFsdWUpLnRvU3RyaW5nKClcblxuICBzdGF0aWMgbGVzc1RoYW4gPSAoYXR0cmlidXRlLCB2YWx1ZSkgPT5cbiAgICBuZXcgUXVlcnkoXCJsZXNzVGhhblwiLCBhdHRyaWJ1dGUsIHZhbHVlKS50b1N0cmluZygpXG5cbiAgc3RhdGljIGxlc3NUaGFuRXF1YWwgPSAoYXR0cmlidXRlLCB2YWx1ZSkgPT5cbiAgICBuZXcgUXVlcnkoXCJsZXNzVGhhbkVxdWFsXCIsIGF0dHJpYnV0ZSwgdmFsdWUpLnRvU3RyaW5nKClcblxuICBzdGF0aWMgZ3JlYXRlclRoYW4gPSAoYXR0cmlidXRlLCB2YWx1ZSkgPT5cbiAgICBuZXcgUXVlcnkoXCJncmVhdGVyVGhhblwiLCBhdHRyaWJ1dGUsIHZhbHVlKS50b1N0cmluZygpXG5cbiAgc3RhdGljIGdyZWF0ZXJUaGFuRXF1YWwgPSAoYXR0cmlidXRlLCB2YWx1ZSkgPT5cbiAgICBuZXcgUXVlcnkoXCJncmVhdGVyVGhhbkVxdWFsXCIsIGF0dHJpYnV0ZSwgdmFsdWUpLnRvU3RyaW5nKClcblxuICBzdGF0aWMgaXNOdWxsID0gYXR0cmlidXRlID0+XG4gICAgbmV3IFF1ZXJ5KFwiaXNOdWxsXCIsIGF0dHJpYnV0ZSkudG9TdHJpbmcoKVxuXG4gIHN0YXRpYyBpc05vdE51bGwgPSBhdHRyaWJ1dGUgPT5cbiAgICBuZXcgUXVlcnkoXCJpc05vdE51bGxcIiwgYXR0cmlidXRlKS50b1N0cmluZygpXG5cbiAgc3RhdGljIGJldHdlZW4gPSAoYXR0cmlidXRlLCBzdGFydCwgZW5kKSA9PlxuICAgIG5ldyBRdWVyeShcImJldHdlZW5cIiwgYXR0cmlidXRlLCBbc3RhcnQsIGVuZF0pLnRvU3RyaW5nKClcblxuICBzdGF0aWMgc3RhcnRzV2l0aCA9IChhdHRyaWJ1dGUsIHZhbHVlKSA9PlxuICAgIG5ldyBRdWVyeShcInN0YXJ0c1dpdGhcIiwgYXR0cmlidXRlLCB2YWx1ZSkudG9TdHJpbmcoKVxuXG4gIHN0YXRpYyBlbmRzV2l0aCA9IChhdHRyaWJ1dGUsIHZhbHVlKSA9PlxuICAgIG5ldyBRdWVyeShcImVuZHNXaXRoXCIsIGF0dHJpYnV0ZSwgdmFsdWUpLnRvU3RyaW5nKClcblxuICBzdGF0aWMgc2VsZWN0ID0gYXR0cmlidXRlcyA9PlxuICAgIG5ldyBRdWVyeShcInNlbGVjdFwiLCB1bmRlZmluZWQsIGF0dHJpYnV0ZXMpLnRvU3RyaW5nKClcblxuICBzdGF0aWMgc2VhcmNoID0gKGF0dHJpYnV0ZSwgdmFsdWUpID0+XG4gICAgbmV3IFF1ZXJ5KFwic2VhcmNoXCIsIGF0dHJpYnV0ZSwgdmFsdWUpLnRvU3RyaW5nKClcblxuICBzdGF0aWMgb3JkZXJEZXNjID0gYXR0cmlidXRlID0+XG4gICAgbmV3IFF1ZXJ5KFwib3JkZXJEZXNjXCIsIGF0dHJpYnV0ZSkudG9TdHJpbmcoKVxuXG4gIHN0YXRpYyBvcmRlckFzYyA9IGF0dHJpYnV0ZSA9PlxuICAgIG5ldyBRdWVyeShcIm9yZGVyQXNjXCIsIGF0dHJpYnV0ZSkudG9TdHJpbmcoKVxuXG4gIHN0YXRpYyBjdXJzb3JBZnRlciA9IGRvY3VtZW50SWQgPT5cbiAgICBuZXcgUXVlcnkoXCJjdXJzb3JBZnRlclwiLCB1bmRlZmluZWQsIGRvY3VtZW50SWQpLnRvU3RyaW5nKClcblxuICBzdGF0aWMgY3Vyc29yQmVmb3JlID0gZG9jdW1lbnRJZCA9PlxuICAgIG5ldyBRdWVyeShcImN1cnNvckJlZm9yZVwiLCB1bmRlZmluZWQsIGRvY3VtZW50SWQpLnRvU3RyaW5nKClcblxuICBzdGF0aWMgbGltaXQgPSBsaW1pdCA9PlxuICAgIG5ldyBRdWVyeShcImxpbWl0XCIsIHVuZGVmaW5lZCwgbGltaXQpLnRvU3RyaW5nKClcblxuICBzdGF0aWMgb2Zmc2V0ID0gb2Zmc2V0ID0+XG4gICAgbmV3IFF1ZXJ5KFwib2Zmc2V0XCIsIHVuZGVmaW5lZCwgb2Zmc2V0KS50b1N0cmluZygpXG5cbiAgc3RhdGljIGNvbnRhaW5zID0gKGF0dHJpYnV0ZSwgdmFsdWUpID0+XG4gICAgbmV3IFF1ZXJ5KFwiY29udGFpbnNcIiwgYXR0cmlidXRlLCB2YWx1ZSkudG9TdHJpbmcoKVxuXG4gIHN0YXRpYyBvciA9IChxdWVyaWVzKSA9PlxuICAgIG5ldyBRdWVyeShcIm9yXCIsIHVuZGVmaW5lZCwgcXVlcmllcy5tYXAoKHF1ZXJ5KSA9PiBKU09OLnBhcnNlKHF1ZXJ5KSkpLnRvU3RyaW5nKClcblxuICBzdGF0aWMgYW5kID0gKHF1ZXJpZXMpID0+XG4gICAgbmV3IFF1ZXJ5KFwiYW5kXCIsIHVuZGVmaW5lZCwgcXVlcmllcy5tYXAoKHF1ZXJ5KSA9PiBKU09OLnBhcnNlKHF1ZXJ5KSkpLnRvU3RyaW5nKCk7XG59XG5cblF1ZXJ5LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHtcbiAgICBtZXRob2Q6IHRoaXMubWV0aG9kLFxuICAgIGF0dHJpYnV0ZTogdGhpcy5hdHRyaWJ1dGUsXG4gICAgdmFsdWVzOiB0aGlzLnZhbHVlc1xuICB9KVxufSBcblxubW9kdWxlLmV4cG9ydHMgPSBRdWVyeTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/query.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/role.js":
/*!************************************************!*\
  !*** ./node_modules/node-appwrite/lib/role.js ***!
  \************************************************/
/***/ ((module) => {

eval("/**\n * Helper class to generate role strings for `Permission`.\n */\nclass Role {\n\n    /**\n     * Grants access to anyone.\n     *\n     * This includes authenticated and unauthenticated users.\n     *\n     * @returns {string}\n     */\n    static any = () => {\n        return 'any'\n    }\n\n    /**\n     * Grants access to a specific user by user ID.\n     *\n     * You can optionally pass verified or unverified for\n     * `status` to target specific types of users.\n     *\n     * @param {string} id \n     * @param {string} status \n     * @returns {string}\n     */\n    static user = (id, status = '') => {\n        if (status === '') {\n            return `user:${id}`\n        }\n        return `user:${id}/${status}`\n    }\n\n    /**\n     * Grants access to any authenticated or anonymous user.\n     *\n     * You can optionally pass verified or unverified for\n     * `status` to target specific types of users.\n     *\n     * @param {string} status \n     * @returns {string}\n     */\n    static users = (status = '') => {\n        if (status === '') {\n            return 'users'\n        }\n        return `users/${status}`\n    }\n\n    /**\n     * Grants access to any guest user without a session.\n     *\n     * Authenticated users don't have access to this role.\n     *\n     * @returns {string}\n     */\n    static guests = () => {\n        return 'guests'\n    }\n\n    /**\n     * Grants access to a team by team ID.\n     *\n     * You can optionally pass a role for `role` to target\n     * team members with the specified role.\n     * \n     * @param {string} id \n     * @param {string} role \n     * @returns {string}\n     */\n    static team = (id, role = '') => {\n        if (role === '') {\n            return 'team:' + id\n        }\n        return 'team:' + id + '/' + role\n    }\n\n    /**\n     * Grants access to a specific member of a team.\n     *\n     * When the member is removed from the team, they will\n     * no longer have access.\n     * \n     * @param {string} id \n     * @returns {string}\n     */\n    static member = (id) => {\n        return 'member:' + id\n    }\n\n    /**\n     * Grants access to a user with the specified label.\n     *\n     * @param {string} name \n     * @returns  {string}\n     */\n    static label = (name) => {\n        return 'label:' + name;\n    }\n}\n\nmodule.exports = Role;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9yb2xlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLEdBQUc7QUFDOUI7QUFDQSx1QkFBdUIsR0FBRyxHQUFHLE9BQU87QUFDcEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLE9BQU87QUFDL0I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NhcmVwdWxzZS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9yb2xlLmpzP2ExNDYiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBIZWxwZXIgY2xhc3MgdG8gZ2VuZXJhdGUgcm9sZSBzdHJpbmdzIGZvciBgUGVybWlzc2lvbmAuXG4gKi9cbmNsYXNzIFJvbGUge1xuXG4gICAgLyoqXG4gICAgICogR3JhbnRzIGFjY2VzcyB0byBhbnlvbmUuXG4gICAgICpcbiAgICAgKiBUaGlzIGluY2x1ZGVzIGF1dGhlbnRpY2F0ZWQgYW5kIHVuYXV0aGVudGljYXRlZCB1c2Vycy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGFueSA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuICdhbnknXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR3JhbnRzIGFjY2VzcyB0byBhIHNwZWNpZmljIHVzZXIgYnkgdXNlciBJRC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gb3B0aW9uYWxseSBwYXNzIHZlcmlmaWVkIG9yIHVudmVyaWZpZWQgZm9yXG4gICAgICogYHN0YXR1c2AgdG8gdGFyZ2V0IHNwZWNpZmljIHR5cGVzIG9mIHVzZXJzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0dXMgXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgdXNlciA9IChpZCwgc3RhdHVzID0gJycpID0+IHtcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiBgdXNlcjoke2lkfWBcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYHVzZXI6JHtpZH0vJHtzdGF0dXN9YFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdyYW50cyBhY2Nlc3MgdG8gYW55IGF1dGhlbnRpY2F0ZWQgb3IgYW5vbnltb3VzIHVzZXIuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIG9wdGlvbmFsbHkgcGFzcyB2ZXJpZmllZCBvciB1bnZlcmlmaWVkIGZvclxuICAgICAqIGBzdGF0dXNgIHRvIHRhcmdldCBzcGVjaWZpYyB0eXBlcyBvZiB1c2Vycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0dXMgXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgdXNlcnMgPSAoc3RhdHVzID0gJycpID0+IHtcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gJycpIHtcbiAgICAgICAgICAgIHJldHVybiAndXNlcnMnXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGB1c2Vycy8ke3N0YXR1c31gXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR3JhbnRzIGFjY2VzcyB0byBhbnkgZ3Vlc3QgdXNlciB3aXRob3V0IGEgc2Vzc2lvbi5cbiAgICAgKlxuICAgICAqIEF1dGhlbnRpY2F0ZWQgdXNlcnMgZG9uJ3QgaGF2ZSBhY2Nlc3MgdG8gdGhpcyByb2xlLlxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZ3Vlc3RzID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gJ2d1ZXN0cydcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHcmFudHMgYWNjZXNzIHRvIGEgdGVhbSBieSB0ZWFtIElELlxuICAgICAqXG4gICAgICogWW91IGNhbiBvcHRpb25hbGx5IHBhc3MgYSByb2xlIGZvciBgcm9sZWAgdG8gdGFyZ2V0XG4gICAgICogdGVhbSBtZW1iZXJzIHdpdGggdGhlIHNwZWNpZmllZCByb2xlLlxuICAgICAqIFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcm9sZSBcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyB0ZWFtID0gKGlkLCByb2xlID0gJycpID0+IHtcbiAgICAgICAgaWYgKHJvbGUgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3RlYW06JyArIGlkXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICd0ZWFtOicgKyBpZCArICcvJyArIHJvbGVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHcmFudHMgYWNjZXNzIHRvIGEgc3BlY2lmaWMgbWVtYmVyIG9mIGEgdGVhbS5cbiAgICAgKlxuICAgICAqIFdoZW4gdGhlIG1lbWJlciBpcyByZW1vdmVkIGZyb20gdGhlIHRlYW0sIHRoZXkgd2lsbFxuICAgICAqIG5vIGxvbmdlciBoYXZlIGFjY2Vzcy5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgbWVtYmVyID0gKGlkKSA9PiB7XG4gICAgICAgIHJldHVybiAnbWVtYmVyOicgKyBpZFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdyYW50cyBhY2Nlc3MgdG8gYSB1c2VyIHdpdGggdGhlIHNwZWNpZmllZCBsYWJlbC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFxuICAgICAqIEByZXR1cm5zICB7c3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBsYWJlbCA9IChuYW1lKSA9PiB7XG4gICAgICAgIHJldHVybiAnbGFiZWw6JyArIG5hbWU7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJvbGU7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/role.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/role.js":
/*!************************************************!*\
  !*** ./node_modules/node-appwrite/lib/role.js ***!
  \************************************************/
/***/ ((module) => {

eval("/**\n * Helper class to generate role strings for `Permission`.\n */\nclass Role {\n\n    /**\n     * Grants access to anyone.\n     *\n     * This includes authenticated and unauthenticated users.\n     *\n     * @returns {string}\n     */\n    static any = () => {\n        return 'any'\n    }\n\n    /**\n     * Grants access to a specific user by user ID.\n     *\n     * You can optionally pass verified or unverified for\n     * `status` to target specific types of users.\n     *\n     * @param {string} id \n     * @param {string} status \n     * @returns {string}\n     */\n    static user = (id, status = '') => {\n        if (status === '') {\n            return `user:${id}`\n        }\n        return `user:${id}/${status}`\n    }\n\n    /**\n     * Grants access to any authenticated or anonymous user.\n     *\n     * You can optionally pass verified or unverified for\n     * `status` to target specific types of users.\n     *\n     * @param {string} status \n     * @returns {string}\n     */\n    static users = (status = '') => {\n        if (status === '') {\n            return 'users'\n        }\n        return `users/${status}`\n    }\n\n    /**\n     * Grants access to any guest user without a session.\n     *\n     * Authenticated users don't have access to this role.\n     *\n     * @returns {string}\n     */\n    static guests = () => {\n        return 'guests'\n    }\n\n    /**\n     * Grants access to a team by team ID.\n     *\n     * You can optionally pass a role for `role` to target\n     * team members with the specified role.\n     * \n     * @param {string} id \n     * @param {string} role \n     * @returns {string}\n     */\n    static team = (id, role = '') => {\n        if (role === '') {\n            return 'team:' + id\n        }\n        return 'team:' + id + '/' + role\n    }\n\n    /**\n     * Grants access to a specific member of a team.\n     *\n     * When the member is removed from the team, they will\n     * no longer have access.\n     * \n     * @param {string} id \n     * @returns {string}\n     */\n    static member = (id) => {\n        return 'member:' + id\n    }\n\n    /**\n     * Grants access to a user with the specified label.\n     *\n     * @param {string} name \n     * @returns  {string}\n     */\n    static label = (name) => {\n        return 'label:' + name;\n    }\n}\n\nmodule.exports = Role;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvcm9sZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixHQUFHO0FBQzlCO0FBQ0EsdUJBQXVCLEdBQUcsR0FBRyxPQUFPO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvcm9sZS5qcz80ODMyIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSGVscGVyIGNsYXNzIHRvIGdlbmVyYXRlIHJvbGUgc3RyaW5ncyBmb3IgYFBlcm1pc3Npb25gLlxuICovXG5jbGFzcyBSb2xlIHtcblxuICAgIC8qKlxuICAgICAqIEdyYW50cyBhY2Nlc3MgdG8gYW55b25lLlxuICAgICAqXG4gICAgICogVGhpcyBpbmNsdWRlcyBhdXRoZW50aWNhdGVkIGFuZCB1bmF1dGhlbnRpY2F0ZWQgdXNlcnMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHN0YXRpYyBhbnkgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAnYW55J1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdyYW50cyBhY2Nlc3MgdG8gYSBzcGVjaWZpYyB1c2VyIGJ5IHVzZXIgSUQuXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIG9wdGlvbmFsbHkgcGFzcyB2ZXJpZmllZCBvciB1bnZlcmlmaWVkIGZvclxuICAgICAqIGBzdGF0dXNgIHRvIHRhcmdldCBzcGVjaWZpYyB0eXBlcyBvZiB1c2Vycy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RhdHVzIFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIHVzZXIgPSAoaWQsIHN0YXR1cyA9ICcnKSA9PiB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gYHVzZXI6JHtpZH1gXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGB1c2VyOiR7aWR9LyR7c3RhdHVzfWBcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHcmFudHMgYWNjZXNzIHRvIGFueSBhdXRoZW50aWNhdGVkIG9yIGFub255bW91cyB1c2VyLlxuICAgICAqXG4gICAgICogWW91IGNhbiBvcHRpb25hbGx5IHBhc3MgdmVyaWZpZWQgb3IgdW52ZXJpZmllZCBmb3JcbiAgICAgKiBgc3RhdHVzYCB0byB0YXJnZXQgc3BlY2lmaWMgdHlwZXMgb2YgdXNlcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RhdHVzIFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIHVzZXJzID0gKHN0YXR1cyA9ICcnKSA9PiB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3VzZXJzJ1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgdXNlcnMvJHtzdGF0dXN9YFxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdyYW50cyBhY2Nlc3MgdG8gYW55IGd1ZXN0IHVzZXIgd2l0aG91dCBhIHNlc3Npb24uXG4gICAgICpcbiAgICAgKiBBdXRoZW50aWNhdGVkIHVzZXJzIGRvbid0IGhhdmUgYWNjZXNzIHRvIHRoaXMgcm9sZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGd1ZXN0cyA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuICdndWVzdHMnXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR3JhbnRzIGFjY2VzcyB0byBhIHRlYW0gYnkgdGVhbSBJRC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gb3B0aW9uYWxseSBwYXNzIGEgcm9sZSBmb3IgYHJvbGVgIHRvIHRhcmdldFxuICAgICAqIHRlYW0gbWVtYmVycyB3aXRoIHRoZSBzcGVjaWZpZWQgcm9sZS5cbiAgICAgKiBcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHJvbGUgXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgdGVhbSA9IChpZCwgcm9sZSA9ICcnKSA9PiB7XG4gICAgICAgIGlmIChyb2xlID09PSAnJykge1xuICAgICAgICAgICAgcmV0dXJuICd0ZWFtOicgKyBpZFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAndGVhbTonICsgaWQgKyAnLycgKyByb2xlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR3JhbnRzIGFjY2VzcyB0byBhIHNwZWNpZmljIG1lbWJlciBvZiBhIHRlYW0uXG4gICAgICpcbiAgICAgKiBXaGVuIHRoZSBtZW1iZXIgaXMgcmVtb3ZlZCBmcm9tIHRoZSB0ZWFtLCB0aGV5IHdpbGxcbiAgICAgKiBubyBsb25nZXIgaGF2ZSBhY2Nlc3MuXG4gICAgICogXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIG1lbWJlciA9IChpZCkgPT4ge1xuICAgICAgICByZXR1cm4gJ21lbWJlcjonICsgaWRcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHcmFudHMgYWNjZXNzIHRvIGEgdXNlciB3aXRoIHRoZSBzcGVjaWZpZWQgbGFiZWwuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBcbiAgICAgKiBAcmV0dXJucyAge3N0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgbGFiZWwgPSAobmFtZSkgPT4ge1xuICAgICAgICByZXR1cm4gJ2xhYmVsOicgKyBuYW1lO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSb2xlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/role.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/service.js":
/*!***************************************************!*\
  !*** ./node_modules/node-appwrite/lib/service.js ***!
  \***************************************************/
/***/ ((module) => {

eval("class Service {\n    /**\n     * @param client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n}\n\nmodule.exports = Service;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9zZXJ2aWNlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYXJlcHVsc2UvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvc2VydmljZS5qcz81ZDMyIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFNlcnZpY2Uge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBjbGllbnRcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICAgICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNlcnZpY2U7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/service.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/service.js":
/*!***************************************************!*\
  !*** ./node_modules/node-appwrite/lib/service.js ***!
  \***************************************************/
/***/ ((module) => {

eval("class Service {\n    /**\n     * @param client\n     */\n    constructor(client) {\n        this.client = client;\n    }\n}\n\nmodule.exports = Service;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvc2VydmljZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyZXB1bHNlLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL3NlcnZpY2UuanM/YTk1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBTZXJ2aWNlIHtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY2xpZW50XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgICAgIHRoaXMuY2xpZW50ID0gY2xpZW50O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTZXJ2aWNlOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/service.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/services/account.js":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/account.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(action-browser)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(action-browser)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(action-browser)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(action-browser)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(action-browser)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Account extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * Get account\n     *\n     * Get the currently logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async get() {\n        const apiPath = '/account';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create account\n     *\n     * Use this endpoint to allow a new user to register a new account in your\n     * project. After the user registration completes successfully, you can use\n     * the\n     * [/account/verfication](https://appwrite.io/docs/references/cloud/client-web/account#createVerification)\n     * route to start verifying the user email address. To allow the new user to\n     * login to their new account, you need to create a new [account\n     * session](https://appwrite.io/docs/references/cloud/client-web/account#createEmailSession).\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async create(userId, email, password, name) {\n        const apiPath = '/account';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update email\n     *\n     * Update currently logged in user account email address. After changing user\n     * address, the user confirmation status will get reset. A new confirmation\n     * email is not sent automatically however you can use the send confirmation\n     * email endpoint again to send the confirmation email. For security measures,\n     * user password is required to complete this request.\n     * This endpoint can also be used to convert an anonymous account to a normal\n     * one, by passing an email address and a new password.\n     * \n     *\n     * @param {string} email\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateEmail(email, password) {\n        const apiPath = '/account/email';\n        let payload = {};\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List Identities\n     *\n     * Get the list of identities for the currently logged in user.\n     *\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listIdentities(queries) {\n        const apiPath = '/account/identities';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete identity\n     *\n     * Delete an identity by its unique ID.\n     *\n     * @param {string} identityId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteIdentity(identityId) {\n        const apiPath = '/account/identities/{identityId}'.replace('{identityId}', identityId);\n        let payload = {};\n        if (typeof identityId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"identityId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create JWT\n     *\n     * Use this endpoint to create a JSON Web Token. You can use the resulting JWT\n     * to authenticate on behalf of the current user when working with the\n     * Appwrite server-side API and SDKs. The JWT secret is valid for 15 minutes\n     * from its creation and will be invalid if the user will logout in that time\n     * frame.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createJWT() {\n        const apiPath = '/account/jwt';\n        let payload = {};\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List logs\n     *\n     * Get the list of latest security activity logs for the currently logged in\n     * user. Each log returns user IP address, location and date and time of log.\n     *\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listLogs(queries) {\n        const apiPath = '/account/logs';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update MFA\n     *\n     * Enable or disable MFA on an account.\n     *\n     * @param {boolean} mfa\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMFA(mfa) {\n        const apiPath = '/account/mfa';\n        let payload = {};\n        if (typeof mfa === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"mfa\"');\n        }\n\n\n        if (typeof mfa !== 'undefined') {\n            payload['mfa'] = mfa;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Add Authenticator\n     *\n     * Add an authenticator app to be used as an MFA factor. Verify the\n     * authenticator using the [verify\n     * authenticator](/docs/references/cloud/client-web/account#verifyAuthenticator)\n     * method.\n     *\n     * @param {AuthenticatorType} type\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createMfaAuthenticator(type) {\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        let payload = {};\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Verify Authenticator\n     *\n     * Verify an authenticator app after adding it using the [add\n     * authenticator](/docs/references/cloud/client-web/account#addAuthenticator)\n     * method.\n     *\n     * @param {AuthenticatorType} type\n     * @param {string} otp\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMfaAuthenticator(type, otp) {\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        let payload = {};\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        if (typeof otp === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"otp\"');\n        }\n\n\n        if (typeof otp !== 'undefined') {\n            payload['otp'] = otp;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete Authenticator\n     *\n     * Delete an authenticator for a user by ID.\n     *\n     * @param {AuthenticatorType} type\n     * @param {string} otp\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteMfaAuthenticator(type, otp) {\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        let payload = {};\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        if (typeof otp === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"otp\"');\n        }\n\n\n        if (typeof otp !== 'undefined') {\n            payload['otp'] = otp;\n        }\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create 2FA Challenge\n     *\n     * Begin the process of MFA verification after sign-in. Finish the flow with\n     * [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge)\n     * method.\n     *\n     * @param {AuthenticationFactor} factor\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createMfaChallenge(factor) {\n        const apiPath = '/account/mfa/challenge';\n        let payload = {};\n        if (typeof factor === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"factor\"');\n        }\n\n\n        if (typeof factor !== 'undefined') {\n            payload['factor'] = factor;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create MFA Challenge (confirmation)\n     *\n     * Complete the MFA challenge by providing the one-time password. Finish the\n     * process of MFA verification by providing the one-time password. To begin\n     * the flow, use\n     * [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge)\n     * method.\n     *\n     * @param {string} challengeId\n     * @param {string} otp\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMfaChallenge(challengeId, otp) {\n        const apiPath = '/account/mfa/challenge';\n        let payload = {};\n        if (typeof challengeId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"challengeId\"');\n        }\n\n        if (typeof otp === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"otp\"');\n        }\n\n\n        if (typeof challengeId !== 'undefined') {\n            payload['challengeId'] = challengeId;\n        }\n\n        if (typeof otp !== 'undefined') {\n            payload['otp'] = otp;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List Factors\n     *\n     * List the factors available on the account to be used as a MFA challange.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listMfaFactors() {\n        const apiPath = '/account/mfa/factors';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get MFA Recovery Codes\n     *\n     * Get recovery codes that can be used as backup for MFA flow. Before getting\n     * codes, they must be generated using\n     * [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes)\n     * method. An OTP challenge is required to read recovery codes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getMfaRecoveryCodes() {\n        const apiPath = '/account/mfa/recovery-codes';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create MFA Recovery Codes\n     *\n     * Generate recovery codes as backup for MFA flow. It's recommended to\n     * generate and show then immediately after user successfully adds their\n     * authehticator. Recovery codes can be used as a MFA verification type in\n     * [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge)\n     * method.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createMfaRecoveryCodes() {\n        const apiPath = '/account/mfa/recovery-codes';\n        let payload = {};\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Regenerate MFA Recovery Codes\n     *\n     * Regenerate recovery codes that can be used as backup for MFA flow. Before\n     * regenerating codes, they must be first generated using\n     * [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes)\n     * method. An OTP challenge is required to regenreate recovery codes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMfaRecoveryCodes() {\n        const apiPath = '/account/mfa/recovery-codes';\n        let payload = {};\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update name\n     *\n     * Update currently logged in user account name.\n     *\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateName(name) {\n        const apiPath = '/account/name';\n        let payload = {};\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update password\n     *\n     * Update currently logged in user password. For validation, user is required\n     * to pass in the new password, and the old password. For users created with\n     * OAuth, Team Invites and Magic URL, oldPassword is optional.\n     *\n     * @param {string} password\n     * @param {string} oldPassword\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePassword(password, oldPassword) {\n        const apiPath = '/account/password';\n        let payload = {};\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof oldPassword !== 'undefined') {\n            payload['oldPassword'] = oldPassword;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update phone\n     *\n     * Update the currently logged in user's phone number. After updating the\n     * phone number, the phone verification status will be reset. A confirmation\n     * SMS is not sent automatically, however you can use the [POST\n     * /account/verification/phone](https://appwrite.io/docs/references/cloud/client-web/account#createPhoneVerification)\n     * endpoint to send a confirmation SMS.\n     *\n     * @param {string} phone\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePhone(phone, password) {\n        const apiPath = '/account/phone';\n        let payload = {};\n        if (typeof phone === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"phone\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get account preferences\n     *\n     * Get the preferences as a key-value object for the currently logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getPrefs() {\n        const apiPath = '/account/prefs';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update preferences\n     *\n     * Update currently logged in user account preferences. The object you pass is\n     * stored as is, and replaces any previous value. The maximum allowed prefs\n     * size is 64kB and throws error if exceeded.\n     *\n     * @param {object} prefs\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePrefs(prefs) {\n        const apiPath = '/account/prefs';\n        let payload = {};\n        if (typeof prefs === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n\n\n        if (typeof prefs !== 'undefined') {\n            payload['prefs'] = prefs;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create password recovery\n     *\n     * Sends the user an email with a temporary secret key for password reset.\n     * When the user clicks the confirmation link he is redirected back to your\n     * app password reset URL with the secret key and email address values\n     * attached to the URL query string. Use the query string params to submit a\n     * request to the [PUT\n     * /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#updateRecovery)\n     * endpoint to complete the process. The verification link sent to the user's\n     * email address is valid for 1 hour.\n     *\n     * @param {string} email\n     * @param {string} url\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createRecovery(email, url) {\n        const apiPath = '/account/recovery';\n        let payload = {};\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create password recovery (confirmation)\n     *\n     * Use this endpoint to complete the user account password reset. Both the\n     * **userId** and **secret** arguments will be passed as query parameters to\n     * the redirect URL you have provided when sending your request to the [POST\n     * /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#createRecovery)\n     * endpoint.\n     * \n     * Please note that in order to avoid a [Redirect\n     * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)\n     * the only valid redirect URLs are the ones from domains you have set when\n     * adding your platforms in the console interface.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateRecovery(userId, secret, password) {\n        const apiPath = '/account/recovery';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List sessions\n     *\n     * Get the list of active sessions across different devices for the currently\n     * logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listSessions() {\n        const apiPath = '/account/sessions';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete sessions\n     *\n     * Delete all sessions from the user account and remove any sessions cookies\n     * from the end client.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteSessions() {\n        const apiPath = '/account/sessions';\n        let payload = {};\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create anonymous session\n     *\n     * Use this endpoint to allow a new user to register an anonymous account in\n     * your project. This route will also create a new session for the user. To\n     * allow the new user to convert an anonymous account to a normal account, you\n     * need to update its [email and\n     * password](https://appwrite.io/docs/references/cloud/client-web/account#updateEmail)\n     * or create an [OAuth2\n     * session](https://appwrite.io/docs/references/cloud/client-web/account#CreateOAuth2Session).\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createAnonymousSession() {\n        const apiPath = '/account/sessions/anonymous';\n        let payload = {};\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email password session\n     *\n     * Allow the user to login into their account by providing a valid email and\n     * password combination. This route will create a new session for the user.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {string} email\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createEmailPasswordSession(email, password) {\n        const apiPath = '/account/sessions/email';\n        let payload = {};\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update magic URL session\n     *\n     * Use this endpoint to create a session from token. Provide the **userId**\n     * and **secret** parameters from the successful response of authentication\n     * flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMagicURLSession(userId, secret) {\n        const apiPath = '/account/sessions/magic-url';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update phone session\n     *\n     * Use this endpoint to create a session from token. Provide the **userId**\n     * and **secret** parameters from the successful response of authentication\n     * flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePhoneSession(userId, secret) {\n        const apiPath = '/account/sessions/phone';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create session\n     *\n     * Use this endpoint to create a session from token. Provide the **userId**\n     * and **secret** parameters from the successful response of authentication\n     * flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createSession(userId, secret) {\n        const apiPath = '/account/sessions/token';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get session\n     *\n     * Use this endpoint to get a logged in user's session using a Session ID.\n     * Inputting 'current' will return the current session being used.\n     *\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getSession(sessionId) {\n        const apiPath = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n        let payload = {};\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update session\n     *\n     * Use this endpoint to extend a session's length. Extending a session is\n     * useful when session expiry is short. If the session was created using an\n     * OAuth provider, this endpoint refreshes the access token from the provider.\n     *\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateSession(sessionId) {\n        const apiPath = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n        let payload = {};\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete session\n     *\n     * Logout the user. Use 'current' as the session ID to logout on this device,\n     * use a session ID to logout on another device. If you're looking to logout\n     * the user on all devices, use [Delete\n     * Sessions](https://appwrite.io/docs/references/cloud/client-web/account#deleteSessions)\n     * instead.\n     *\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteSession(sessionId) {\n        const apiPath = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n        let payload = {};\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update status\n     *\n     * Block the currently logged in user account. Behind the scene, the user\n     * record is not deleted but permanently blocked from any access. To\n     * completely delete a user, use the Users API instead.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateStatus() {\n        const apiPath = '/account/status';\n        let payload = {};\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email token (OTP)\n     *\n     * Sends the user an email with a secret key for creating a session. If the\n     * provided user ID has not be registered, a new user will be created. Use the\n     * returned user ID and secret and submit a request to the [POST\n     * /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession)\n     * endpoint to complete the login process. The secret sent to the user's email\n     * is valid for 15 minutes.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {boolean} phrase\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createEmailToken(userId, email, phrase) {\n        const apiPath = '/account/tokens/email';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof phrase !== 'undefined') {\n            payload['phrase'] = phrase;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create magic URL token\n     *\n     * Sends the user an email with a secret key for creating a session. If the\n     * provided user ID has not been registered, a new user will be created. When\n     * the user clicks the link in the email, the user is redirected back to the\n     * URL you provided with the secret key and userId values attached to the URL\n     * query string. Use the query string parameters to submit a request to the\n     * [POST\n     * /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession)\n     * endpoint to complete the login process. The link sent to the user's email\n     * address is valid for 1 hour. If you are on a mobile device you can leave\n     * the URL parameter empty, so that the login completion will be handled by\n     * your Appwrite instance by default.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appwrite.io/docs/authentication-security#limits).\n     * \n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} url\n     * @param {boolean} phrase\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createMagicURLToken(userId, email, url, phrase) {\n        const apiPath = '/account/tokens/magic-url';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        if (typeof phrase !== 'undefined') {\n            payload['phrase'] = phrase;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create OAuth2 token\n     *\n     * Allow the user to login to their account using the OAuth2 provider of their\n     * choice. Each OAuth2 provider should be enabled from the Appwrite console\n     * first. Use the success and failure arguments to provide a redirect URL's\n     * back to your app when login is completed. \n     * \n     * If authentication succeeds, `userId` and `secret` of a token will be\n     * appended to the success URL as query parameters. These can be used to\n     * create a new session using the [Create\n     * session](https://appwrite.io/docs/references/cloud/client-web/account#createSession)\n     * endpoint.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {OAuthProvider} provider\n     * @param {string} success\n     * @param {string} failure\n     * @param {string[]} scopes\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createOAuth2Token(provider, success, failure, scopes) {\n        const apiPath = '/account/tokens/oauth2/{provider}'.replace('{provider}', provider);\n        let payload = {};\n        if (typeof provider === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"provider\"');\n        }\n\n\n        if (typeof success !== 'undefined') {\n            payload['success'] = success;\n        }\n\n        if (typeof failure !== 'undefined') {\n            payload['failure'] = failure;\n        }\n\n        if (typeof scopes !== 'undefined') {\n            payload['scopes'] = scopes;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'location');\n    }\n\n    /**\n     * Create phone token\n     *\n     * Sends the user an SMS with a secret key for creating a session. If the\n     * provided user ID has not be registered, a new user will be created. Use the\n     * returned user ID and secret and submit a request to the [POST\n     * /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession)\n     * endpoint to complete the login process. The secret sent to the user's phone\n     * is valid for 15 minutes.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {string} userId\n     * @param {string} phone\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createPhoneToken(userId, phone) {\n        const apiPath = '/account/tokens/phone';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof phone === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"phone\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email verification\n     *\n     * Use this endpoint to send a verification message to your user email address\n     * to confirm they are the valid owners of that address. Both the **userId**\n     * and **secret** arguments will be passed as query parameters to the URL you\n     * have provided to be attached to the verification email. The provided URL\n     * should redirect the user back to your app and allow you to complete the\n     * verification process by verifying both the **userId** and **secret**\n     * parameters. Learn more about how to [complete the verification\n     * process](https://appwrite.io/docs/references/cloud/client-web/account#updateVerification).\n     * The verification link sent to the user's email address is valid for 7 days.\n     * \n     * Please note that in order to avoid a [Redirect\n     * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md),\n     * the only valid redirect URLs are the ones from domains you have set when\n     * adding your platforms in the console interface.\n     * \n     *\n     * @param {string} url\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createVerification(url) {\n        const apiPath = '/account/verification';\n        let payload = {};\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email verification (confirmation)\n     *\n     * Use this endpoint to complete the user email verification process. Use both\n     * the **userId** and **secret** parameters that were attached to your app URL\n     * to verify the user email ownership. If confirmed this route will return a\n     * 200 status code.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateVerification(userId, secret) {\n        const apiPath = '/account/verification';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create phone verification\n     *\n     * Use this endpoint to send a verification SMS to the currently logged in\n     * user. This endpoint is meant for use after updating a user's phone number\n     * using the\n     * [accountUpdatePhone](https://appwrite.io/docs/references/cloud/client-web/account#updatePhone)\n     * endpoint. Learn more about how to [complete the verification\n     * process](https://appwrite.io/docs/references/cloud/client-web/account#updatePhoneVerification).\n     * The verification code sent to the user's phone number is valid for 15\n     * minutes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createPhoneVerification() {\n        const apiPath = '/account/verification/phone';\n        let payload = {};\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create phone verification (confirmation)\n     *\n     * Use this endpoint to complete the user phone verification process. Use the\n     * **userId** and **secret** that were sent to your user's phone number to\n     * verify the user email ownership. If confirmed this route will return a 200\n     * status code.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePhoneVerification(userId, secret) {\n        const apiPath = '/account/verification/phone';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n}\n\nmodule.exports = Account;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/services/account.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/account.js":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/account.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(rsc)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Account extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * Get account\n     *\n     * Get the currently logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async get() {\n        const apiPath = '/account';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create account\n     *\n     * Use this endpoint to allow a new user to register a new account in your\n     * project. After the user registration completes successfully, you can use\n     * the\n     * [/account/verfication](https://appwrite.io/docs/references/cloud/client-web/account#createVerification)\n     * route to start verifying the user email address. To allow the new user to\n     * login to their new account, you need to create a new [account\n     * session](https://appwrite.io/docs/references/cloud/client-web/account#createEmailSession).\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async create(userId, email, password, name) {\n        const apiPath = '/account';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update email\n     *\n     * Update currently logged in user account email address. After changing user\n     * address, the user confirmation status will get reset. A new confirmation\n     * email is not sent automatically however you can use the send confirmation\n     * email endpoint again to send the confirmation email. For security measures,\n     * user password is required to complete this request.\n     * This endpoint can also be used to convert an anonymous account to a normal\n     * one, by passing an email address and a new password.\n     * \n     *\n     * @param {string} email\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateEmail(email, password) {\n        const apiPath = '/account/email';\n        let payload = {};\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List Identities\n     *\n     * Get the list of identities for the currently logged in user.\n     *\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listIdentities(queries) {\n        const apiPath = '/account/identities';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete identity\n     *\n     * Delete an identity by its unique ID.\n     *\n     * @param {string} identityId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteIdentity(identityId) {\n        const apiPath = '/account/identities/{identityId}'.replace('{identityId}', identityId);\n        let payload = {};\n        if (typeof identityId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"identityId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create JWT\n     *\n     * Use this endpoint to create a JSON Web Token. You can use the resulting JWT\n     * to authenticate on behalf of the current user when working with the\n     * Appwrite server-side API and SDKs. The JWT secret is valid for 15 minutes\n     * from its creation and will be invalid if the user will logout in that time\n     * frame.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createJWT() {\n        const apiPath = '/account/jwt';\n        let payload = {};\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List logs\n     *\n     * Get the list of latest security activity logs for the currently logged in\n     * user. Each log returns user IP address, location and date and time of log.\n     *\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listLogs(queries) {\n        const apiPath = '/account/logs';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update MFA\n     *\n     * Enable or disable MFA on an account.\n     *\n     * @param {boolean} mfa\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMFA(mfa) {\n        const apiPath = '/account/mfa';\n        let payload = {};\n        if (typeof mfa === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"mfa\"');\n        }\n\n\n        if (typeof mfa !== 'undefined') {\n            payload['mfa'] = mfa;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Add Authenticator\n     *\n     * Add an authenticator app to be used as an MFA factor. Verify the\n     * authenticator using the [verify\n     * authenticator](/docs/references/cloud/client-web/account#verifyAuthenticator)\n     * method.\n     *\n     * @param {AuthenticatorType} type\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createMfaAuthenticator(type) {\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        let payload = {};\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Verify Authenticator\n     *\n     * Verify an authenticator app after adding it using the [add\n     * authenticator](/docs/references/cloud/client-web/account#addAuthenticator)\n     * method.\n     *\n     * @param {AuthenticatorType} type\n     * @param {string} otp\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMfaAuthenticator(type, otp) {\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        let payload = {};\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        if (typeof otp === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"otp\"');\n        }\n\n\n        if (typeof otp !== 'undefined') {\n            payload['otp'] = otp;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete Authenticator\n     *\n     * Delete an authenticator for a user by ID.\n     *\n     * @param {AuthenticatorType} type\n     * @param {string} otp\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteMfaAuthenticator(type, otp) {\n        const apiPath = '/account/mfa/authenticators/{type}'.replace('{type}', type);\n        let payload = {};\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        if (typeof otp === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"otp\"');\n        }\n\n\n        if (typeof otp !== 'undefined') {\n            payload['otp'] = otp;\n        }\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create 2FA Challenge\n     *\n     * Begin the process of MFA verification after sign-in. Finish the flow with\n     * [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge)\n     * method.\n     *\n     * @param {AuthenticationFactor} factor\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createMfaChallenge(factor) {\n        const apiPath = '/account/mfa/challenge';\n        let payload = {};\n        if (typeof factor === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"factor\"');\n        }\n\n\n        if (typeof factor !== 'undefined') {\n            payload['factor'] = factor;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create MFA Challenge (confirmation)\n     *\n     * Complete the MFA challenge by providing the one-time password. Finish the\n     * process of MFA verification by providing the one-time password. To begin\n     * the flow, use\n     * [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge)\n     * method.\n     *\n     * @param {string} challengeId\n     * @param {string} otp\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMfaChallenge(challengeId, otp) {\n        const apiPath = '/account/mfa/challenge';\n        let payload = {};\n        if (typeof challengeId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"challengeId\"');\n        }\n\n        if (typeof otp === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"otp\"');\n        }\n\n\n        if (typeof challengeId !== 'undefined') {\n            payload['challengeId'] = challengeId;\n        }\n\n        if (typeof otp !== 'undefined') {\n            payload['otp'] = otp;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List Factors\n     *\n     * List the factors available on the account to be used as a MFA challange.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listMfaFactors() {\n        const apiPath = '/account/mfa/factors';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get MFA Recovery Codes\n     *\n     * Get recovery codes that can be used as backup for MFA flow. Before getting\n     * codes, they must be generated using\n     * [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes)\n     * method. An OTP challenge is required to read recovery codes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getMfaRecoveryCodes() {\n        const apiPath = '/account/mfa/recovery-codes';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create MFA Recovery Codes\n     *\n     * Generate recovery codes as backup for MFA flow. It's recommended to\n     * generate and show then immediately after user successfully adds their\n     * authehticator. Recovery codes can be used as a MFA verification type in\n     * [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge)\n     * method.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createMfaRecoveryCodes() {\n        const apiPath = '/account/mfa/recovery-codes';\n        let payload = {};\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Regenerate MFA Recovery Codes\n     *\n     * Regenerate recovery codes that can be used as backup for MFA flow. Before\n     * regenerating codes, they must be first generated using\n     * [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes)\n     * method. An OTP challenge is required to regenreate recovery codes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMfaRecoveryCodes() {\n        const apiPath = '/account/mfa/recovery-codes';\n        let payload = {};\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update name\n     *\n     * Update currently logged in user account name.\n     *\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateName(name) {\n        const apiPath = '/account/name';\n        let payload = {};\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update password\n     *\n     * Update currently logged in user password. For validation, user is required\n     * to pass in the new password, and the old password. For users created with\n     * OAuth, Team Invites and Magic URL, oldPassword is optional.\n     *\n     * @param {string} password\n     * @param {string} oldPassword\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePassword(password, oldPassword) {\n        const apiPath = '/account/password';\n        let payload = {};\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof oldPassword !== 'undefined') {\n            payload['oldPassword'] = oldPassword;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update phone\n     *\n     * Update the currently logged in user's phone number. After updating the\n     * phone number, the phone verification status will be reset. A confirmation\n     * SMS is not sent automatically, however you can use the [POST\n     * /account/verification/phone](https://appwrite.io/docs/references/cloud/client-web/account#createPhoneVerification)\n     * endpoint to send a confirmation SMS.\n     *\n     * @param {string} phone\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePhone(phone, password) {\n        const apiPath = '/account/phone';\n        let payload = {};\n        if (typeof phone === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"phone\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get account preferences\n     *\n     * Get the preferences as a key-value object for the currently logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getPrefs() {\n        const apiPath = '/account/prefs';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update preferences\n     *\n     * Update currently logged in user account preferences. The object you pass is\n     * stored as is, and replaces any previous value. The maximum allowed prefs\n     * size is 64kB and throws error if exceeded.\n     *\n     * @param {object} prefs\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePrefs(prefs) {\n        const apiPath = '/account/prefs';\n        let payload = {};\n        if (typeof prefs === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n\n\n        if (typeof prefs !== 'undefined') {\n            payload['prefs'] = prefs;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create password recovery\n     *\n     * Sends the user an email with a temporary secret key for password reset.\n     * When the user clicks the confirmation link he is redirected back to your\n     * app password reset URL with the secret key and email address values\n     * attached to the URL query string. Use the query string params to submit a\n     * request to the [PUT\n     * /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#updateRecovery)\n     * endpoint to complete the process. The verification link sent to the user's\n     * email address is valid for 1 hour.\n     *\n     * @param {string} email\n     * @param {string} url\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createRecovery(email, url) {\n        const apiPath = '/account/recovery';\n        let payload = {};\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create password recovery (confirmation)\n     *\n     * Use this endpoint to complete the user account password reset. Both the\n     * **userId** and **secret** arguments will be passed as query parameters to\n     * the redirect URL you have provided when sending your request to the [POST\n     * /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#createRecovery)\n     * endpoint.\n     * \n     * Please note that in order to avoid a [Redirect\n     * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)\n     * the only valid redirect URLs are the ones from domains you have set when\n     * adding your platforms in the console interface.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateRecovery(userId, secret, password) {\n        const apiPath = '/account/recovery';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List sessions\n     *\n     * Get the list of active sessions across different devices for the currently\n     * logged in user.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listSessions() {\n        const apiPath = '/account/sessions';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete sessions\n     *\n     * Delete all sessions from the user account and remove any sessions cookies\n     * from the end client.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteSessions() {\n        const apiPath = '/account/sessions';\n        let payload = {};\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create anonymous session\n     *\n     * Use this endpoint to allow a new user to register an anonymous account in\n     * your project. This route will also create a new session for the user. To\n     * allow the new user to convert an anonymous account to a normal account, you\n     * need to update its [email and\n     * password](https://appwrite.io/docs/references/cloud/client-web/account#updateEmail)\n     * or create an [OAuth2\n     * session](https://appwrite.io/docs/references/cloud/client-web/account#CreateOAuth2Session).\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createAnonymousSession() {\n        const apiPath = '/account/sessions/anonymous';\n        let payload = {};\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email password session\n     *\n     * Allow the user to login into their account by providing a valid email and\n     * password combination. This route will create a new session for the user.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {string} email\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createEmailPasswordSession(email, password) {\n        const apiPath = '/account/sessions/email';\n        let payload = {};\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update magic URL session\n     *\n     * Use this endpoint to create a session from token. Provide the **userId**\n     * and **secret** parameters from the successful response of authentication\n     * flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMagicURLSession(userId, secret) {\n        const apiPath = '/account/sessions/magic-url';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update phone session\n     *\n     * Use this endpoint to create a session from token. Provide the **userId**\n     * and **secret** parameters from the successful response of authentication\n     * flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePhoneSession(userId, secret) {\n        const apiPath = '/account/sessions/phone';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create session\n     *\n     * Use this endpoint to create a session from token. Provide the **userId**\n     * and **secret** parameters from the successful response of authentication\n     * flows initiated by token creation. For example, magic URL and phone login.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createSession(userId, secret) {\n        const apiPath = '/account/sessions/token';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get session\n     *\n     * Use this endpoint to get a logged in user's session using a Session ID.\n     * Inputting 'current' will return the current session being used.\n     *\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getSession(sessionId) {\n        const apiPath = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n        let payload = {};\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update session\n     *\n     * Use this endpoint to extend a session's length. Extending a session is\n     * useful when session expiry is short. If the session was created using an\n     * OAuth provider, this endpoint refreshes the access token from the provider.\n     *\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateSession(sessionId) {\n        const apiPath = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n        let payload = {};\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete session\n     *\n     * Logout the user. Use 'current' as the session ID to logout on this device,\n     * use a session ID to logout on another device. If you're looking to logout\n     * the user on all devices, use [Delete\n     * Sessions](https://appwrite.io/docs/references/cloud/client-web/account#deleteSessions)\n     * instead.\n     *\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteSession(sessionId) {\n        const apiPath = '/account/sessions/{sessionId}'.replace('{sessionId}', sessionId);\n        let payload = {};\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update status\n     *\n     * Block the currently logged in user account. Behind the scene, the user\n     * record is not deleted but permanently blocked from any access. To\n     * completely delete a user, use the Users API instead.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateStatus() {\n        const apiPath = '/account/status';\n        let payload = {};\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email token (OTP)\n     *\n     * Sends the user an email with a secret key for creating a session. If the\n     * provided user ID has not be registered, a new user will be created. Use the\n     * returned user ID and secret and submit a request to the [POST\n     * /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession)\n     * endpoint to complete the login process. The secret sent to the user's email\n     * is valid for 15 minutes.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {boolean} phrase\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createEmailToken(userId, email, phrase) {\n        const apiPath = '/account/tokens/email';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof phrase !== 'undefined') {\n            payload['phrase'] = phrase;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create magic URL token\n     *\n     * Sends the user an email with a secret key for creating a session. If the\n     * provided user ID has not been registered, a new user will be created. When\n     * the user clicks the link in the email, the user is redirected back to the\n     * URL you provided with the secret key and userId values attached to the URL\n     * query string. Use the query string parameters to submit a request to the\n     * [POST\n     * /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession)\n     * endpoint to complete the login process. The link sent to the user's email\n     * address is valid for 1 hour. If you are on a mobile device you can leave\n     * the URL parameter empty, so that the login completion will be handled by\n     * your Appwrite instance by default.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appwrite.io/docs/authentication-security#limits).\n     * \n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} url\n     * @param {boolean} phrase\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createMagicURLToken(userId, email, url, phrase) {\n        const apiPath = '/account/tokens/magic-url';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        if (typeof phrase !== 'undefined') {\n            payload['phrase'] = phrase;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create OAuth2 token\n     *\n     * Allow the user to login to their account using the OAuth2 provider of their\n     * choice. Each OAuth2 provider should be enabled from the Appwrite console\n     * first. Use the success and failure arguments to provide a redirect URL's\n     * back to your app when login is completed. \n     * \n     * If authentication succeeds, `userId` and `secret` of a token will be\n     * appended to the success URL as query parameters. These can be used to\n     * create a new session using the [Create\n     * session](https://appwrite.io/docs/references/cloud/client-web/account#createSession)\n     * endpoint.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {OAuthProvider} provider\n     * @param {string} success\n     * @param {string} failure\n     * @param {string[]} scopes\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createOAuth2Token(provider, success, failure, scopes) {\n        const apiPath = '/account/tokens/oauth2/{provider}'.replace('{provider}', provider);\n        let payload = {};\n        if (typeof provider === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"provider\"');\n        }\n\n\n        if (typeof success !== 'undefined') {\n            payload['success'] = success;\n        }\n\n        if (typeof failure !== 'undefined') {\n            payload['failure'] = failure;\n        }\n\n        if (typeof scopes !== 'undefined') {\n            payload['scopes'] = scopes;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'location');\n    }\n\n    /**\n     * Create phone token\n     *\n     * Sends the user an SMS with a secret key for creating a session. If the\n     * provided user ID has not be registered, a new user will be created. Use the\n     * returned user ID and secret and submit a request to the [POST\n     * /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession)\n     * endpoint to complete the login process. The secret sent to the user's phone\n     * is valid for 15 minutes.\n     * \n     * A user is limited to 10 active sessions at a time by default. [Learn more\n     * about session\n     * limits](https://appwrite.io/docs/authentication-security#limits).\n     *\n     * @param {string} userId\n     * @param {string} phone\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createPhoneToken(userId, phone) {\n        const apiPath = '/account/tokens/phone';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof phone === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"phone\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email verification\n     *\n     * Use this endpoint to send a verification message to your user email address\n     * to confirm they are the valid owners of that address. Both the **userId**\n     * and **secret** arguments will be passed as query parameters to the URL you\n     * have provided to be attached to the verification email. The provided URL\n     * should redirect the user back to your app and allow you to complete the\n     * verification process by verifying both the **userId** and **secret**\n     * parameters. Learn more about how to [complete the verification\n     * process](https://appwrite.io/docs/references/cloud/client-web/account#updateVerification).\n     * The verification link sent to the user's email address is valid for 7 days.\n     * \n     * Please note that in order to avoid a [Redirect\n     * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md),\n     * the only valid redirect URLs are the ones from domains you have set when\n     * adding your platforms in the console interface.\n     * \n     *\n     * @param {string} url\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createVerification(url) {\n        const apiPath = '/account/verification';\n        let payload = {};\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email verification (confirmation)\n     *\n     * Use this endpoint to complete the user email verification process. Use both\n     * the **userId** and **secret** parameters that were attached to your app URL\n     * to verify the user email ownership. If confirmed this route will return a\n     * 200 status code.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateVerification(userId, secret) {\n        const apiPath = '/account/verification';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create phone verification\n     *\n     * Use this endpoint to send a verification SMS to the currently logged in\n     * user. This endpoint is meant for use after updating a user's phone number\n     * using the\n     * [accountUpdatePhone](https://appwrite.io/docs/references/cloud/client-web/account#updatePhone)\n     * endpoint. Learn more about how to [complete the verification\n     * process](https://appwrite.io/docs/references/cloud/client-web/account#updatePhoneVerification).\n     * The verification code sent to the user's phone number is valid for 15\n     * minutes.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createPhoneVerification() {\n        const apiPath = '/account/verification/phone';\n        let payload = {};\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create phone verification (confirmation)\n     *\n     * Use this endpoint to complete the user phone verification process. Use the\n     * **userId** and **secret** that were sent to your user's phone number to\n     * verify the user email ownership. If confirmed this route will return a 200\n     * status code.\n     *\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePhoneVerification(userId, secret) {\n        const apiPath = '/account/verification/phone';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n}\n\nmodule.exports = Account;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/account.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/services/avatars.js":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/avatars.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(action-browser)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(action-browser)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(action-browser)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(action-browser)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(action-browser)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Avatars extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * Get browser icon\n     *\n     * You can use this endpoint to show different browser icons to your users.\n     * The code argument receives the browser code as it appears in your user [GET\n     * /account/sessions](https://appwrite.io/docs/references/cloud/client-web/account#getSessions)\n     * endpoint. Use width, height and quality arguments to change the output\n     * settings.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     *\n     * @param {Browser} code\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getBrowser(code, width, height, quality) {\n        const apiPath = '/avatars/browsers/{code}'.replace('{code}', code);\n        let payload = {};\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n\n    /**\n     * Get credit card icon\n     *\n     * The credit card endpoint will return you the icon of the credit card\n     * provider you need. Use width, height and quality arguments to change the\n     * output settings.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     * \n     *\n     * @param {CreditCard} code\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getCreditCard(code, width, height, quality) {\n        const apiPath = '/avatars/credit-cards/{code}'.replace('{code}', code);\n        let payload = {};\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n\n    /**\n     * Get favicon\n     *\n     * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote\n     * website URL.\n     * \n     *\n     * @param {string} url\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getFavicon(url) {\n        const apiPath = '/avatars/favicon';\n        let payload = {};\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n\n    /**\n     * Get country flag\n     *\n     * You can use this endpoint to show different country flags icons to your\n     * users. The code argument receives the 2 letter country code. Use width,\n     * height and quality arguments to change the output settings. Country codes\n     * follow the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) standard.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     * \n     *\n     * @param {Flag} code\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getFlag(code, width, height, quality) {\n        const apiPath = '/avatars/flags/{code}'.replace('{code}', code);\n        let payload = {};\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n\n    /**\n     * Get image from URL\n     *\n     * Use this endpoint to fetch a remote image URL and crop it to any image size\n     * you want. This endpoint is very useful if you need to crop and display\n     * remote images in your app or in case you want to make sure a 3rd party\n     * image is properly served using a TLS protocol.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 400x400px.\n     * \n     *\n     * @param {string} url\n     * @param {number} width\n     * @param {number} height\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getImage(url, width, height) {\n        const apiPath = '/avatars/image';\n        let payload = {};\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n\n    /**\n     * Get user initials\n     *\n     * Use this endpoint to show your user initials avatar icon on your website or\n     * app. By default, this route will try to print your logged-in user name or\n     * email initials. You can also overwrite the user name if you pass the 'name'\n     * parameter. If no name is given and no user is logged, an empty avatar will\n     * be returned.\n     * \n     * You can use the color and background params to change the avatar colors. By\n     * default, a random theme will be selected. The random theme will persist for\n     * the user's initials when reloading the same theme will always return for\n     * the same initials.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     * \n     *\n     * @param {string} name\n     * @param {number} width\n     * @param {number} height\n     * @param {string} background\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getInitials(name, width, height, background) {\n        const apiPath = '/avatars/initials';\n        let payload = {};\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof background !== 'undefined') {\n            payload['background'] = background;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n\n    /**\n     * Get QR code\n     *\n     * Converts a given plain text to a QR code image. You can use the query\n     * parameters to change the size and style of the resulting image.\n     * \n     *\n     * @param {string} text\n     * @param {number} size\n     * @param {number} margin\n     * @param {boolean} download\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQR(text, size, margin, download) {\n        const apiPath = '/avatars/qr';\n        let payload = {};\n        if (typeof text === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"text\"');\n        }\n\n\n        if (typeof text !== 'undefined') {\n            payload['text'] = text;\n        }\n\n        if (typeof size !== 'undefined') {\n            payload['size'] = size;\n        }\n\n        if (typeof margin !== 'undefined') {\n            payload['margin'] = margin;\n        }\n\n        if (typeof download !== 'undefined') {\n            payload['download'] = download;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n}\n\nmodule.exports = Avatars;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/services/avatars.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/avatars.js":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/avatars.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(rsc)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Avatars extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * Get browser icon\n     *\n     * You can use this endpoint to show different browser icons to your users.\n     * The code argument receives the browser code as it appears in your user [GET\n     * /account/sessions](https://appwrite.io/docs/references/cloud/client-web/account#getSessions)\n     * endpoint. Use width, height and quality arguments to change the output\n     * settings.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     *\n     * @param {Browser} code\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getBrowser(code, width, height, quality) {\n        const apiPath = '/avatars/browsers/{code}'.replace('{code}', code);\n        let payload = {};\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n\n    /**\n     * Get credit card icon\n     *\n     * The credit card endpoint will return you the icon of the credit card\n     * provider you need. Use width, height and quality arguments to change the\n     * output settings.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     * \n     *\n     * @param {CreditCard} code\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getCreditCard(code, width, height, quality) {\n        const apiPath = '/avatars/credit-cards/{code}'.replace('{code}', code);\n        let payload = {};\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n\n    /**\n     * Get favicon\n     *\n     * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote\n     * website URL.\n     * \n     *\n     * @param {string} url\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getFavicon(url) {\n        const apiPath = '/avatars/favicon';\n        let payload = {};\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n\n    /**\n     * Get country flag\n     *\n     * You can use this endpoint to show different country flags icons to your\n     * users. The code argument receives the 2 letter country code. Use width,\n     * height and quality arguments to change the output settings. Country codes\n     * follow the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) standard.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     * \n     *\n     * @param {Flag} code\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getFlag(code, width, height, quality) {\n        const apiPath = '/avatars/flags/{code}'.replace('{code}', code);\n        let payload = {};\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n\n    /**\n     * Get image from URL\n     *\n     * Use this endpoint to fetch a remote image URL and crop it to any image size\n     * you want. This endpoint is very useful if you need to crop and display\n     * remote images in your app or in case you want to make sure a 3rd party\n     * image is properly served using a TLS protocol.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 400x400px.\n     * \n     *\n     * @param {string} url\n     * @param {number} width\n     * @param {number} height\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getImage(url, width, height) {\n        const apiPath = '/avatars/image';\n        let payload = {};\n        if (typeof url === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"url\"');\n        }\n\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n\n    /**\n     * Get user initials\n     *\n     * Use this endpoint to show your user initials avatar icon on your website or\n     * app. By default, this route will try to print your logged-in user name or\n     * email initials. You can also overwrite the user name if you pass the 'name'\n     * parameter. If no name is given and no user is logged, an empty avatar will\n     * be returned.\n     * \n     * You can use the color and background params to change the avatar colors. By\n     * default, a random theme will be selected. The random theme will persist for\n     * the user's initials when reloading the same theme will always return for\n     * the same initials.\n     * \n     * When one dimension is specified and the other is 0, the image is scaled\n     * with preserved aspect ratio. If both dimensions are 0, the API provides an\n     * image at source quality. If dimensions are not specified, the default size\n     * of image returned is 100x100px.\n     * \n     *\n     * @param {string} name\n     * @param {number} width\n     * @param {number} height\n     * @param {string} background\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getInitials(name, width, height, background) {\n        const apiPath = '/avatars/initials';\n        let payload = {};\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof background !== 'undefined') {\n            payload['background'] = background;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n\n    /**\n     * Get QR code\n     *\n     * Converts a given plain text to a QR code image. You can use the query\n     * parameters to change the size and style of the resulting image.\n     * \n     *\n     * @param {string} text\n     * @param {number} size\n     * @param {number} margin\n     * @param {boolean} download\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQR(text, size, margin, download) {\n        const apiPath = '/avatars/qr';\n        let payload = {};\n        if (typeof text === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"text\"');\n        }\n\n\n        if (typeof text !== 'undefined') {\n            payload['text'] = text;\n        }\n\n        if (typeof size !== 'undefined') {\n            payload['size'] = size;\n        }\n\n        if (typeof margin !== 'undefined') {\n            payload['margin'] = margin;\n        }\n\n        if (typeof download !== 'undefined') {\n            payload['download'] = download;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n}\n\nmodule.exports = Avatars;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/avatars.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/services/databases.js":
/*!**************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/databases.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(action-browser)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(action-browser)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(action-browser)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(action-browser)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(action-browser)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Databases extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * List databases\n     *\n     * Get a list of all databases from the current Appwrite project. You can use\n     * the search parameter to filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async list(queries, search) {\n        const apiPath = '/databases';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create database\n     *\n     * Create a new Database.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async create(databaseId, name, enabled) {\n        const apiPath = '/databases';\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof databaseId !== 'undefined') {\n            payload['databaseId'] = databaseId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get database\n     *\n     * Get a database by its unique ID. This endpoint response returns a JSON\n     * object with the database metadata.\n     *\n     * @param {string} databaseId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async get(databaseId) {\n        const apiPath = '/databases/{databaseId}'.replace('{databaseId}', databaseId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update database\n     *\n     * Update a database by its unique ID.\n     *\n     * @param {string} databaseId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async update(databaseId, name, enabled) {\n        const apiPath = '/databases/{databaseId}'.replace('{databaseId}', databaseId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete database\n     *\n     * Delete a database by its unique ID. Only API keys with with databases.write\n     * scope can delete a database.\n     *\n     * @param {string} databaseId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async delete(databaseId) {\n        const apiPath = '/databases/{databaseId}'.replace('{databaseId}', databaseId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List collections\n     *\n     * Get a list of all collections that belong to the provided databaseId. You\n     * can use the search parameter to filter your results.\n     *\n     * @param {string} databaseId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listCollections(databaseId, queries, search) {\n        const apiPath = '/databases/{databaseId}/collections'.replace('{databaseId}', databaseId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create collection\n     *\n     * Create a new Collection. Before using this route, you should create a new\n     * database resource using either a [server\n     * integration](https://appwrite.io/docs/server/databases#databasesCreateCollection)\n     * API or directly from your database console.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @param {boolean} documentSecurity\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createCollection(databaseId, collectionId, name, permissions, documentSecurity, enabled) {\n        const apiPath = '/databases/{databaseId}/collections'.replace('{databaseId}', databaseId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof collectionId !== 'undefined') {\n            payload['collectionId'] = collectionId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        if (typeof documentSecurity !== 'undefined') {\n            payload['documentSecurity'] = documentSecurity;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get collection\n     *\n     * Get a collection by its unique ID. This endpoint response returns a JSON\n     * object with the collection metadata.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getCollection(databaseId, collectionId) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update collection\n     *\n     * Update a collection by its unique ID.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @param {boolean} documentSecurity\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateCollection(databaseId, collectionId, name, permissions, documentSecurity, enabled) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        if (typeof documentSecurity !== 'undefined') {\n            payload['documentSecurity'] = documentSecurity;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete collection\n     *\n     * Delete a collection by its unique ID. Only users with write permissions\n     * have access to delete this resource.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteCollection(databaseId, collectionId) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List attributes\n     *\n     * List attributes in the collection.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listAttributes(databaseId, collectionId, queries) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create boolean attribute\n     *\n     * Create a boolean attribute.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {boolean} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createBooleanAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/boolean'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update boolean attribute\n     *\n     * Update a boolean attribute. Changing the `default` value will not update\n     * already existing documents.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {boolean} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateBooleanAttribute(databaseId, collectionId, key, required, xdefault) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/boolean/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create datetime attribute\n     *\n     * Create a date time attribute according to the ISO 8601 standard.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createDatetimeAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/datetime'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update dateTime attribute\n     *\n     * Update a date time attribute. Changing the `default` value will not update\n     * already existing documents.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateDatetimeAttribute(databaseId, collectionId, key, required, xdefault) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/datetime/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email attribute\n     *\n     * Create an email attribute.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createEmailAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/email'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update email attribute\n     *\n     * Update an email attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateEmailAttribute(databaseId, collectionId, key, required, xdefault) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/email/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create enum attribute\n     *\n     * Create an enumeration attribute. The `elements` param acts as a white-list\n     * of accepted values for this attribute. \n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {string[]} elements\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createEnumAttribute(databaseId, collectionId, key, elements, required, xdefault, array) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/enum'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof elements === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"elements\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof elements !== 'undefined') {\n            payload['elements'] = elements;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update enum attribute\n     *\n     * Update an enum attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {string[]} elements\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateEnumAttribute(databaseId, collectionId, key, elements, required, xdefault) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/enum/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof elements === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"elements\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n\n        if (typeof elements !== 'undefined') {\n            payload['elements'] = elements;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create float attribute\n     *\n     * Create a float attribute. Optionally, minimum and maximum values can be\n     * provided.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {number} min\n     * @param {number} max\n     * @param {number} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createFloatAttribute(databaseId, collectionId, key, required, min, max, xdefault, array) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/float'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update float attribute\n     *\n     * Update a float attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {number} min\n     * @param {number} max\n     * @param {number} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateFloatAttribute(databaseId, collectionId, key, required, min, max, xdefault) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/float/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        if (typeof min === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"min\"');\n        }\n\n        if (typeof max === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"max\"');\n        }\n\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create integer attribute\n     *\n     * Create an integer attribute. Optionally, minimum and maximum values can be\n     * provided.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {number} min\n     * @param {number} max\n     * @param {number} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createIntegerAttribute(databaseId, collectionId, key, required, min, max, xdefault, array) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/integer'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update integer attribute\n     *\n     * Update an integer attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {number} min\n     * @param {number} max\n     * @param {number} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateIntegerAttribute(databaseId, collectionId, key, required, min, max, xdefault) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/integer/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        if (typeof min === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"min\"');\n        }\n\n        if (typeof max === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"max\"');\n        }\n\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create IP address attribute\n     *\n     * Create IP address attribute.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createIpAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/ip'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update IP address attribute\n     *\n     * Update an ip attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateIpAttribute(databaseId, collectionId, key, required, xdefault) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/ip/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create relationship attribute\n     *\n     * Create relationship attribute. [Learn more about relationship\n     * attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} relatedCollectionId\n     * @param {RelationshipType} type\n     * @param {boolean} twoWay\n     * @param {string} key\n     * @param {string} twoWayKey\n     * @param {RelationMutate} onDelete\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createRelationshipAttribute(databaseId, collectionId, relatedCollectionId, type, twoWay, key, twoWayKey, onDelete) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/relationship'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof relatedCollectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"relatedCollectionId\"');\n        }\n\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n\n        if (typeof relatedCollectionId !== 'undefined') {\n            payload['relatedCollectionId'] = relatedCollectionId;\n        }\n\n        if (typeof type !== 'undefined') {\n            payload['type'] = type;\n        }\n\n        if (typeof twoWay !== 'undefined') {\n            payload['twoWay'] = twoWay;\n        }\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof twoWayKey !== 'undefined') {\n            payload['twoWayKey'] = twoWayKey;\n        }\n\n        if (typeof onDelete !== 'undefined') {\n            payload['onDelete'] = onDelete;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create string attribute\n     *\n     * Create a string attribute.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {number} size\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @param {boolean} encrypt\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createStringAttribute(databaseId, collectionId, key, size, required, xdefault, array, encrypt) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/string'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof size === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"size\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof size !== 'undefined') {\n            payload['size'] = size;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n\n        if (typeof encrypt !== 'undefined') {\n            payload['encrypt'] = encrypt;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update string attribute\n     *\n     * Update a string attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateStringAttribute(databaseId, collectionId, key, required, xdefault) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/string/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create URL attribute\n     *\n     * Create a URL attribute.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createUrlAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/url'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update URL attribute\n     *\n     * Update an url attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateUrlAttribute(databaseId, collectionId, key, required, xdefault) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/url/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get attribute\n     *\n     * Get attribute by ID.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getAttribute(databaseId, collectionId, key) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete attribute\n     *\n     * Deletes an attribute.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteAttribute(databaseId, collectionId, key) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update relationship attribute\n     *\n     * Update relationship attribute. [Learn more about relationship\n     * attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {RelationMutate} onDelete\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateRelationshipAttribute(databaseId, collectionId, key, onDelete) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/{key}/relationship'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n\n        if (typeof onDelete !== 'undefined') {\n            payload['onDelete'] = onDelete;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List documents\n     *\n     * Get a list of all the user's documents in a given collection. You can use\n     * the query params to filter your results.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listDocuments(databaseId, collectionId, queries) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create document\n     *\n     * Create a new Document. Before using this route, you should create a new\n     * collection resource using either a [server\n     * integration](https://appwrite.io/docs/server/databases#databasesCreateCollection)\n     * API or directly from your database console.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @param {object} data\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createDocument(databaseId, collectionId, documentId, data, permissions) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n        if (typeof data === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"data\"');\n        }\n\n\n        if (typeof documentId !== 'undefined') {\n            payload['documentId'] = documentId;\n        }\n\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get document\n     *\n     * Get a document by its unique ID. This endpoint response returns a JSON\n     * object with the document data.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getDocument(databaseId, collectionId, documentId, queries) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update document\n     *\n     * Update a document by its unique ID. Using the patch method you can pass\n     * only specific fields that will get updated.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @param {object} data\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateDocument(databaseId, collectionId, documentId, data, permissions) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete document\n     *\n     * Delete a document by its unique ID.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteDocument(databaseId, collectionId, documentId) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List indexes\n     *\n     * List indexes in the collection.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listIndexes(databaseId, collectionId, queries) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/indexes'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create index\n     *\n     * Creates an index on the attributes listed. Your index should include all\n     * the attributes you will query in a single request.\n     * Attributes can be `key`, `fulltext`, and `unique`.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {IndexType} type\n     * @param {string[]} attributes\n     * @param {string[]} orders\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createIndex(databaseId, collectionId, key, type, attributes, orders) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/indexes'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        if (typeof attributes === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"attributes\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof type !== 'undefined') {\n            payload['type'] = type;\n        }\n\n        if (typeof attributes !== 'undefined') {\n            payload['attributes'] = attributes;\n        }\n\n        if (typeof orders !== 'undefined') {\n            payload['orders'] = orders;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get index\n     *\n     * Get index by ID.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getIndex(databaseId, collectionId, key) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/indexes/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete index\n     *\n     * Delete an index.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteIndex(databaseId, collectionId, key) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/indexes/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n}\n\nmodule.exports = Databases;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/services/databases.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/databases.js":
/*!**************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/databases.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(rsc)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Databases extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * List databases\n     *\n     * Get a list of all databases from the current Appwrite project. You can use\n     * the search parameter to filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async list(queries, search) {\n        const apiPath = '/databases';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create database\n     *\n     * Create a new Database.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async create(databaseId, name, enabled) {\n        const apiPath = '/databases';\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof databaseId !== 'undefined') {\n            payload['databaseId'] = databaseId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get database\n     *\n     * Get a database by its unique ID. This endpoint response returns a JSON\n     * object with the database metadata.\n     *\n     * @param {string} databaseId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async get(databaseId) {\n        const apiPath = '/databases/{databaseId}'.replace('{databaseId}', databaseId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update database\n     *\n     * Update a database by its unique ID.\n     *\n     * @param {string} databaseId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async update(databaseId, name, enabled) {\n        const apiPath = '/databases/{databaseId}'.replace('{databaseId}', databaseId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete database\n     *\n     * Delete a database by its unique ID. Only API keys with with databases.write\n     * scope can delete a database.\n     *\n     * @param {string} databaseId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async delete(databaseId) {\n        const apiPath = '/databases/{databaseId}'.replace('{databaseId}', databaseId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List collections\n     *\n     * Get a list of all collections that belong to the provided databaseId. You\n     * can use the search parameter to filter your results.\n     *\n     * @param {string} databaseId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listCollections(databaseId, queries, search) {\n        const apiPath = '/databases/{databaseId}/collections'.replace('{databaseId}', databaseId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create collection\n     *\n     * Create a new Collection. Before using this route, you should create a new\n     * database resource using either a [server\n     * integration](https://appwrite.io/docs/server/databases#databasesCreateCollection)\n     * API or directly from your database console.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @param {boolean} documentSecurity\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createCollection(databaseId, collectionId, name, permissions, documentSecurity, enabled) {\n        const apiPath = '/databases/{databaseId}/collections'.replace('{databaseId}', databaseId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof collectionId !== 'undefined') {\n            payload['collectionId'] = collectionId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        if (typeof documentSecurity !== 'undefined') {\n            payload['documentSecurity'] = documentSecurity;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get collection\n     *\n     * Get a collection by its unique ID. This endpoint response returns a JSON\n     * object with the collection metadata.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getCollection(databaseId, collectionId) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update collection\n     *\n     * Update a collection by its unique ID.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @param {boolean} documentSecurity\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateCollection(databaseId, collectionId, name, permissions, documentSecurity, enabled) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        if (typeof documentSecurity !== 'undefined') {\n            payload['documentSecurity'] = documentSecurity;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete collection\n     *\n     * Delete a collection by its unique ID. Only users with write permissions\n     * have access to delete this resource.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteCollection(databaseId, collectionId) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List attributes\n     *\n     * List attributes in the collection.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listAttributes(databaseId, collectionId, queries) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create boolean attribute\n     *\n     * Create a boolean attribute.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {boolean} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createBooleanAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/boolean'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update boolean attribute\n     *\n     * Update a boolean attribute. Changing the `default` value will not update\n     * already existing documents.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {boolean} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateBooleanAttribute(databaseId, collectionId, key, required, xdefault) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/boolean/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create datetime attribute\n     *\n     * Create a date time attribute according to the ISO 8601 standard.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createDatetimeAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/datetime'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update dateTime attribute\n     *\n     * Update a date time attribute. Changing the `default` value will not update\n     * already existing documents.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateDatetimeAttribute(databaseId, collectionId, key, required, xdefault) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/datetime/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email attribute\n     *\n     * Create an email attribute.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createEmailAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/email'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update email attribute\n     *\n     * Update an email attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateEmailAttribute(databaseId, collectionId, key, required, xdefault) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/email/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create enum attribute\n     *\n     * Create an enumeration attribute. The `elements` param acts as a white-list\n     * of accepted values for this attribute. \n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {string[]} elements\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createEnumAttribute(databaseId, collectionId, key, elements, required, xdefault, array) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/enum'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof elements === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"elements\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof elements !== 'undefined') {\n            payload['elements'] = elements;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update enum attribute\n     *\n     * Update an enum attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {string[]} elements\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateEnumAttribute(databaseId, collectionId, key, elements, required, xdefault) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/enum/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof elements === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"elements\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n\n        if (typeof elements !== 'undefined') {\n            payload['elements'] = elements;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create float attribute\n     *\n     * Create a float attribute. Optionally, minimum and maximum values can be\n     * provided.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {number} min\n     * @param {number} max\n     * @param {number} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createFloatAttribute(databaseId, collectionId, key, required, min, max, xdefault, array) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/float'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update float attribute\n     *\n     * Update a float attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {number} min\n     * @param {number} max\n     * @param {number} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateFloatAttribute(databaseId, collectionId, key, required, min, max, xdefault) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/float/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        if (typeof min === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"min\"');\n        }\n\n        if (typeof max === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"max\"');\n        }\n\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create integer attribute\n     *\n     * Create an integer attribute. Optionally, minimum and maximum values can be\n     * provided.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {number} min\n     * @param {number} max\n     * @param {number} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createIntegerAttribute(databaseId, collectionId, key, required, min, max, xdefault, array) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/integer'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update integer attribute\n     *\n     * Update an integer attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {number} min\n     * @param {number} max\n     * @param {number} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateIntegerAttribute(databaseId, collectionId, key, required, min, max, xdefault) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/integer/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        if (typeof min === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"min\"');\n        }\n\n        if (typeof max === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"max\"');\n        }\n\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof min !== 'undefined') {\n            payload['min'] = min;\n        }\n\n        if (typeof max !== 'undefined') {\n            payload['max'] = max;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create IP address attribute\n     *\n     * Create IP address attribute.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createIpAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/ip'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update IP address attribute\n     *\n     * Update an ip attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateIpAttribute(databaseId, collectionId, key, required, xdefault) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/ip/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create relationship attribute\n     *\n     * Create relationship attribute. [Learn more about relationship\n     * attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} relatedCollectionId\n     * @param {RelationshipType} type\n     * @param {boolean} twoWay\n     * @param {string} key\n     * @param {string} twoWayKey\n     * @param {RelationMutate} onDelete\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createRelationshipAttribute(databaseId, collectionId, relatedCollectionId, type, twoWay, key, twoWayKey, onDelete) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/relationship'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof relatedCollectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"relatedCollectionId\"');\n        }\n\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n\n        if (typeof relatedCollectionId !== 'undefined') {\n            payload['relatedCollectionId'] = relatedCollectionId;\n        }\n\n        if (typeof type !== 'undefined') {\n            payload['type'] = type;\n        }\n\n        if (typeof twoWay !== 'undefined') {\n            payload['twoWay'] = twoWay;\n        }\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof twoWayKey !== 'undefined') {\n            payload['twoWayKey'] = twoWayKey;\n        }\n\n        if (typeof onDelete !== 'undefined') {\n            payload['onDelete'] = onDelete;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create string attribute\n     *\n     * Create a string attribute.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {number} size\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @param {boolean} encrypt\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createStringAttribute(databaseId, collectionId, key, size, required, xdefault, array, encrypt) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/string'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof size === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"size\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof size !== 'undefined') {\n            payload['size'] = size;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n\n        if (typeof encrypt !== 'undefined') {\n            payload['encrypt'] = encrypt;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update string attribute\n     *\n     * Update a string attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateStringAttribute(databaseId, collectionId, key, required, xdefault) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/string/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create URL attribute\n     *\n     * Create a URL attribute.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @param {boolean} array\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createUrlAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/url'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        if (typeof array !== 'undefined') {\n            payload['array'] = array;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update URL attribute\n     *\n     * Update an url attribute. Changing the `default` value will not update\n     * already existing documents.\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {boolean} required\n     * @param {string} xdefault\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateUrlAttribute(databaseId, collectionId, key, required, xdefault) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/url/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof required === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"required\"');\n        }\n\n        if (typeof xdefault === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n\n\n        if (typeof required !== 'undefined') {\n            payload['required'] = required;\n        }\n\n        if (typeof xdefault !== 'undefined') {\n            payload['default'] = xdefault;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get attribute\n     *\n     * Get attribute by ID.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getAttribute(databaseId, collectionId, key) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete attribute\n     *\n     * Deletes an attribute.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteAttribute(databaseId, collectionId, key) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update relationship attribute\n     *\n     * Update relationship attribute. [Learn more about relationship\n     * attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).\n     * \n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {RelationMutate} onDelete\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateRelationshipAttribute(databaseId, collectionId, key, onDelete) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/attributes/{key}/relationship'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n\n        if (typeof onDelete !== 'undefined') {\n            payload['onDelete'] = onDelete;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List documents\n     *\n     * Get a list of all the user's documents in a given collection. You can use\n     * the query params to filter your results.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listDocuments(databaseId, collectionId, queries) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create document\n     *\n     * Create a new Document. Before using this route, you should create a new\n     * collection resource using either a [server\n     * integration](https://appwrite.io/docs/server/databases#databasesCreateCollection)\n     * API or directly from your database console.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @param {object} data\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createDocument(databaseId, collectionId, documentId, data, permissions) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n        if (typeof data === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"data\"');\n        }\n\n\n        if (typeof documentId !== 'undefined') {\n            payload['documentId'] = documentId;\n        }\n\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get document\n     *\n     * Get a document by its unique ID. This endpoint response returns a JSON\n     * object with the document data.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getDocument(databaseId, collectionId, documentId, queries) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update document\n     *\n     * Update a document by its unique ID. Using the patch method you can pass\n     * only specific fields that will get updated.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @param {object} data\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateDocument(databaseId, collectionId, documentId, data, permissions) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete document\n     *\n     * Delete a document by its unique ID.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} documentId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteDocument(databaseId, collectionId, documentId) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/documents/{documentId}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{documentId}', documentId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof documentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"documentId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List indexes\n     *\n     * List indexes in the collection.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listIndexes(databaseId, collectionId, queries) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/indexes'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create index\n     *\n     * Creates an index on the attributes listed. Your index should include all\n     * the attributes you will query in a single request.\n     * Attributes can be `key`, `fulltext`, and `unique`.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @param {IndexType} type\n     * @param {string[]} attributes\n     * @param {string[]} orders\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createIndex(databaseId, collectionId, key, type, attributes, orders) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/indexes'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n        if (typeof attributes === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"attributes\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof type !== 'undefined') {\n            payload['type'] = type;\n        }\n\n        if (typeof attributes !== 'undefined') {\n            payload['attributes'] = attributes;\n        }\n\n        if (typeof orders !== 'undefined') {\n            payload['orders'] = orders;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get index\n     *\n     * Get index by ID.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getIndex(databaseId, collectionId, key) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/indexes/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete index\n     *\n     * Delete an index.\n     *\n     * @param {string} databaseId\n     * @param {string} collectionId\n     * @param {string} key\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteIndex(databaseId, collectionId, key) {\n        const apiPath = '/databases/{databaseId}/collections/{collectionId}/indexes/{key}'.replace('{databaseId}', databaseId).replace('{collectionId}', collectionId).replace('{key}', key);\n        let payload = {};\n        if (typeof databaseId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n\n        if (typeof collectionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n}\n\nmodule.exports = Databases;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/databases.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/services/functions.js":
/*!**************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/functions.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(action-browser)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(action-browser)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(action-browser)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(action-browser)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(action-browser)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Functions extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * List functions\n     *\n     * Get a list of all the project's functions. You can use the query params to\n     * filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async list(queries, search) {\n        const apiPath = '/functions';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create function\n     *\n     * Create a new function. You can pass a list of\n     * [permissions](https://appwrite.io/docs/permissions) to allow different\n     * project users or team with access to execute the function using the client\n     * API.\n     *\n     * @param {string} functionId\n     * @param {string} name\n     * @param {Runtime} runtime\n     * @param {string[]} execute\n     * @param {string[]} events\n     * @param {string} schedule\n     * @param {number} timeout\n     * @param {boolean} enabled\n     * @param {boolean} logging\n     * @param {string} entrypoint\n     * @param {string} commands\n     * @param {string} installationId\n     * @param {string} providerRepositoryId\n     * @param {string} providerBranch\n     * @param {boolean} providerSilentMode\n     * @param {string} providerRootDirectory\n     * @param {string} templateRepository\n     * @param {string} templateOwner\n     * @param {string} templateRootDirectory\n     * @param {string} templateBranch\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async create(functionId, name, runtime, execute, events, schedule, timeout, enabled, logging, entrypoint, commands, installationId, providerRepositoryId, providerBranch, providerSilentMode, providerRootDirectory, templateRepository, templateOwner, templateRootDirectory, templateBranch) {\n        const apiPath = '/functions';\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        if (typeof runtime === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"runtime\"');\n        }\n\n\n        if (typeof functionId !== 'undefined') {\n            payload['functionId'] = functionId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof runtime !== 'undefined') {\n            payload['runtime'] = runtime;\n        }\n\n        if (typeof execute !== 'undefined') {\n            payload['execute'] = execute;\n        }\n\n        if (typeof events !== 'undefined') {\n            payload['events'] = events;\n        }\n\n        if (typeof schedule !== 'undefined') {\n            payload['schedule'] = schedule;\n        }\n\n        if (typeof timeout !== 'undefined') {\n            payload['timeout'] = timeout;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof logging !== 'undefined') {\n            payload['logging'] = logging;\n        }\n\n        if (typeof entrypoint !== 'undefined') {\n            payload['entrypoint'] = entrypoint;\n        }\n\n        if (typeof commands !== 'undefined') {\n            payload['commands'] = commands;\n        }\n\n        if (typeof installationId !== 'undefined') {\n            payload['installationId'] = installationId;\n        }\n\n        if (typeof providerRepositoryId !== 'undefined') {\n            payload['providerRepositoryId'] = providerRepositoryId;\n        }\n\n        if (typeof providerBranch !== 'undefined') {\n            payload['providerBranch'] = providerBranch;\n        }\n\n        if (typeof providerSilentMode !== 'undefined') {\n            payload['providerSilentMode'] = providerSilentMode;\n        }\n\n        if (typeof providerRootDirectory !== 'undefined') {\n            payload['providerRootDirectory'] = providerRootDirectory;\n        }\n\n        if (typeof templateRepository !== 'undefined') {\n            payload['templateRepository'] = templateRepository;\n        }\n\n        if (typeof templateOwner !== 'undefined') {\n            payload['templateOwner'] = templateOwner;\n        }\n\n        if (typeof templateRootDirectory !== 'undefined') {\n            payload['templateRootDirectory'] = templateRootDirectory;\n        }\n\n        if (typeof templateBranch !== 'undefined') {\n            payload['templateBranch'] = templateBranch;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List runtimes\n     *\n     * Get a list of all runtimes that are currently active on your instance.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listRuntimes() {\n        const apiPath = '/functions/runtimes';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get function\n     *\n     * Get a function by its unique ID.\n     *\n     * @param {string} functionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async get(functionId) {\n        const apiPath = '/functions/{functionId}'.replace('{functionId}', functionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update function\n     *\n     * Update function by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} name\n     * @param {Runtime} runtime\n     * @param {string[]} execute\n     * @param {string[]} events\n     * @param {string} schedule\n     * @param {number} timeout\n     * @param {boolean} enabled\n     * @param {boolean} logging\n     * @param {string} entrypoint\n     * @param {string} commands\n     * @param {string} installationId\n     * @param {string} providerRepositoryId\n     * @param {string} providerBranch\n     * @param {boolean} providerSilentMode\n     * @param {string} providerRootDirectory\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async update(functionId, name, runtime, execute, events, schedule, timeout, enabled, logging, entrypoint, commands, installationId, providerRepositoryId, providerBranch, providerSilentMode, providerRootDirectory) {\n        const apiPath = '/functions/{functionId}'.replace('{functionId}', functionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof runtime !== 'undefined') {\n            payload['runtime'] = runtime;\n        }\n\n        if (typeof execute !== 'undefined') {\n            payload['execute'] = execute;\n        }\n\n        if (typeof events !== 'undefined') {\n            payload['events'] = events;\n        }\n\n        if (typeof schedule !== 'undefined') {\n            payload['schedule'] = schedule;\n        }\n\n        if (typeof timeout !== 'undefined') {\n            payload['timeout'] = timeout;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof logging !== 'undefined') {\n            payload['logging'] = logging;\n        }\n\n        if (typeof entrypoint !== 'undefined') {\n            payload['entrypoint'] = entrypoint;\n        }\n\n        if (typeof commands !== 'undefined') {\n            payload['commands'] = commands;\n        }\n\n        if (typeof installationId !== 'undefined') {\n            payload['installationId'] = installationId;\n        }\n\n        if (typeof providerRepositoryId !== 'undefined') {\n            payload['providerRepositoryId'] = providerRepositoryId;\n        }\n\n        if (typeof providerBranch !== 'undefined') {\n            payload['providerBranch'] = providerBranch;\n        }\n\n        if (typeof providerSilentMode !== 'undefined') {\n            payload['providerSilentMode'] = providerSilentMode;\n        }\n\n        if (typeof providerRootDirectory !== 'undefined') {\n            payload['providerRootDirectory'] = providerRootDirectory;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete function\n     *\n     * Delete a function by its unique ID.\n     *\n     * @param {string} functionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async delete(functionId) {\n        const apiPath = '/functions/{functionId}'.replace('{functionId}', functionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List deployments\n     *\n     * Get a list of all the project's code deployments. You can use the query\n     * params to filter your results.\n     *\n     * @param {string} functionId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listDeployments(functionId, queries, search) {\n        const apiPath = '/functions/{functionId}/deployments'.replace('{functionId}', functionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create deployment\n     *\n     * Create a new function code deployment. Use this endpoint to upload a new\n     * version of your code function. To execute your newly uploaded code, you'll\n     * need to update the function's deployment to use your new deployment UID.\n     * \n     * This endpoint accepts a tar.gz file compressed with your code. Make sure to\n     * include any dependencies your code has within the compressed file. You can\n     * learn more about code packaging in the [Appwrite Cloud Functions\n     * tutorial](https://appwrite.io/docs/functions).\n     * \n     * Use the \"command\" param to set the entrypoint used to execute your code.\n     *\n     * @param {string} functionId\n     * @param {InputFile} code\n     * @param {boolean} activate\n     * @param {string} entrypoint\n     * @param {string} commands\n     * @param {CallableFunction} onProgress\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createDeployment(functionId, code, activate, entrypoint, commands, onProgress = () => {}) {\n        const apiPath = '/functions/{functionId}/deployments'.replace('{functionId}', functionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n\n        if (typeof activate === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"activate\"');\n        }\n\n\n        if (typeof entrypoint !== 'undefined') {\n            payload['entrypoint'] = entrypoint;\n        }\n\n        if (typeof commands !== 'undefined') {\n            payload['commands'] = commands;\n        }\n\n        if (typeof code !== 'undefined') {\n            payload['code'] = code;\n        }\n\n        if (typeof activate !== 'undefined') {\n            payload['activate'] = activate.toString();\n        }\n\n\n        const size = code.size;\n        \n        const apiHeaders = {\n            'content-type': 'multipart/form-data',\n        };\n\n        let id = undefined;\n        let response = undefined;\n\n        let chunksUploaded = 0;\n\n\n        let currentChunk = 1;\n        let currentPosition = 0;\n        let uploadableChunk = new Uint8Array(client.CHUNK_SIZE);\n    \n\n        const uploadChunk = async (lastUpload = false) => {\n            if(currentChunk <= chunksUploaded) {\n                return;\n            }\n\n            const start = ((currentChunk - 1) * client.CHUNK_SIZE);\n            let end = start + currentPosition - 1;\n\n            if(!lastUpload || currentChunk !== 1) {\n                apiHeaders['content-range'] = 'bytes ' + start + '-' + end + '/' + size;\n            }\n\n            let uploadableChunkTrimmed;\n            \n            if(currentPosition + 1 >= client.CHUNK_SIZE) {\n                uploadableChunkTrimmed = uploadableChunk;\n            } else {\n                uploadableChunkTrimmed = new Uint8Array(currentPosition);\n                for(let i = 0; i <= currentPosition; i++) {\n                    uploadableChunkTrimmed[i] = uploadableChunk[i];\n                }\n            }\n\n            if (id) {\n                apiHeaders['x-appwrite-id'] = id;\n            }\n\n            payload['code'] = { type: 'file', file: new File([uploadableChunkTrimmed], code.filename), filename: code.filename };\n\n            response = await this.client.call('post', apiPath, apiHeaders, payload);\n\n            if (!id) {\n                id = response['$id'];\n            }\n\n            if (onProgress !== null) {\n                onProgress({\n                    $id: response['$id'],\n                    progress: Math.min((currentChunk) * client.CHUNK_SIZE, size) / size * 100,\n                    sizeUploaded: end+1,\n                    chunksTotal: response['chunksTotal'],\n                    chunksUploaded: response['chunksUploaded']\n                });\n            }\n\n            uploadableChunk = new Uint8Array(client.CHUNK_SIZE);\n            currentChunk++;\n            currentPosition = 0;\n        }\n\n        for await (const chunk of code.stream) {\n            for(const b of chunk) {\n                uploadableChunk[currentPosition] = b;\n\n                currentPosition++;\n                if(currentPosition >= client.CHUNK_SIZE) {\n                    await uploadChunk();\n                    currentPosition = 0;\n                }\n            }\n        }\n\n        if (currentPosition > 0) { // Check if there's any remaining data for the last chunk\n            await uploadChunk(true);\n        }\n\n        return response;\n\n    }\n\n    /**\n     * Get deployment\n     *\n     * Get a code deployment by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getDeployment(functionId, deploymentId) {\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update function deployment\n     *\n     * Update the function code deployment ID using the unique function ID. Use\n     * this endpoint to switch the code deployment that should be executed by the\n     * execution endpoint.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateDeployment(functionId, deploymentId) {\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete deployment\n     *\n     * Delete a code deployment by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteDeployment(functionId, deploymentId) {\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create build\n     *\n     * Create a new build for an Appwrite Function deployment. This endpoint can\n     * be used to retry a failed build.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @param {string} buildId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createBuild(functionId, deploymentId, buildId) {\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}/builds/{buildId}'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId).replace('{buildId}', buildId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n        if (typeof buildId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"buildId\"');\n        }\n\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Download Deployment\n     *\n     * Get a Deployment's contents by its unique ID. This endpoint supports range\n     * requests for partial or streaming file download.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async downloadDeployment(functionId, deploymentId) {\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}/download'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n\n    /**\n     * List executions\n     *\n     * Get a list of all the current user function execution logs. You can use the\n     * query params to filter your results.\n     *\n     * @param {string} functionId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listExecutions(functionId, queries, search) {\n        const apiPath = '/functions/{functionId}/executions'.replace('{functionId}', functionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create execution\n     *\n     * Trigger a function execution. The returned object will return you the\n     * current execution status. You can ping the `Get Execution` endpoint to get\n     * updates on the current execution status. Once this endpoint is called, your\n     * function execution process will start asynchronously.\n     *\n     * @param {string} functionId\n     * @param {string} body\n     * @param {boolean} async\n     * @param {string} xpath\n     * @param {ExecutionMethod} method\n     * @param {object} headers\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createExecution(functionId, body, async, xpath, method, headers) {\n        const apiPath = '/functions/{functionId}/executions'.replace('{functionId}', functionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n\n        if (typeof body !== 'undefined') {\n            payload['body'] = body;\n        }\n\n        if (typeof async !== 'undefined') {\n            payload['async'] = async;\n        }\n\n        if (typeof xpath !== 'undefined') {\n            payload['path'] = xpath;\n        }\n\n        if (typeof method !== 'undefined') {\n            payload['method'] = method;\n        }\n\n        if (typeof headers !== 'undefined') {\n            payload['headers'] = headers;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get execution\n     *\n     * Get a function execution log by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} executionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getExecution(functionId, executionId) {\n        const apiPath = '/functions/{functionId}/executions/{executionId}'.replace('{functionId}', functionId).replace('{executionId}', executionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof executionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"executionId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List variables\n     *\n     * Get a list of all variables of a specific function.\n     *\n     * @param {string} functionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listVariables(functionId) {\n        const apiPath = '/functions/{functionId}/variables'.replace('{functionId}', functionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create variable\n     *\n     * Create a new function environment variable. These variables can be accessed\n     * in the function at runtime as environment variables.\n     *\n     * @param {string} functionId\n     * @param {string} key\n     * @param {string} value\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createVariable(functionId, key, value) {\n        const apiPath = '/functions/{functionId}/variables'.replace('{functionId}', functionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof value === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"value\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof value !== 'undefined') {\n            payload['value'] = value;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get variable\n     *\n     * Get a variable by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} variableId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getVariable(functionId, variableId) {\n        const apiPath = '/functions/{functionId}/variables/{variableId}'.replace('{functionId}', functionId).replace('{variableId}', variableId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof variableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"variableId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update variable\n     *\n     * Update variable by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} variableId\n     * @param {string} key\n     * @param {string} value\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateVariable(functionId, variableId, key, value) {\n        const apiPath = '/functions/{functionId}/variables/{variableId}'.replace('{functionId}', functionId).replace('{variableId}', variableId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof variableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"variableId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof value !== 'undefined') {\n            payload['value'] = value;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete variable\n     *\n     * Delete a variable by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} variableId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteVariable(functionId, variableId) {\n        const apiPath = '/functions/{functionId}/variables/{variableId}'.replace('{functionId}', functionId).replace('{variableId}', variableId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof variableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"variableId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n}\n\nmodule.exports = Functions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/services/functions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/functions.js":
/*!**************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/functions.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(rsc)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Functions extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * List functions\n     *\n     * Get a list of all the project's functions. You can use the query params to\n     * filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async list(queries, search) {\n        const apiPath = '/functions';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create function\n     *\n     * Create a new function. You can pass a list of\n     * [permissions](https://appwrite.io/docs/permissions) to allow different\n     * project users or team with access to execute the function using the client\n     * API.\n     *\n     * @param {string} functionId\n     * @param {string} name\n     * @param {Runtime} runtime\n     * @param {string[]} execute\n     * @param {string[]} events\n     * @param {string} schedule\n     * @param {number} timeout\n     * @param {boolean} enabled\n     * @param {boolean} logging\n     * @param {string} entrypoint\n     * @param {string} commands\n     * @param {string} installationId\n     * @param {string} providerRepositoryId\n     * @param {string} providerBranch\n     * @param {boolean} providerSilentMode\n     * @param {string} providerRootDirectory\n     * @param {string} templateRepository\n     * @param {string} templateOwner\n     * @param {string} templateRootDirectory\n     * @param {string} templateBranch\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async create(functionId, name, runtime, execute, events, schedule, timeout, enabled, logging, entrypoint, commands, installationId, providerRepositoryId, providerBranch, providerSilentMode, providerRootDirectory, templateRepository, templateOwner, templateRootDirectory, templateBranch) {\n        const apiPath = '/functions';\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        if (typeof runtime === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"runtime\"');\n        }\n\n\n        if (typeof functionId !== 'undefined') {\n            payload['functionId'] = functionId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof runtime !== 'undefined') {\n            payload['runtime'] = runtime;\n        }\n\n        if (typeof execute !== 'undefined') {\n            payload['execute'] = execute;\n        }\n\n        if (typeof events !== 'undefined') {\n            payload['events'] = events;\n        }\n\n        if (typeof schedule !== 'undefined') {\n            payload['schedule'] = schedule;\n        }\n\n        if (typeof timeout !== 'undefined') {\n            payload['timeout'] = timeout;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof logging !== 'undefined') {\n            payload['logging'] = logging;\n        }\n\n        if (typeof entrypoint !== 'undefined') {\n            payload['entrypoint'] = entrypoint;\n        }\n\n        if (typeof commands !== 'undefined') {\n            payload['commands'] = commands;\n        }\n\n        if (typeof installationId !== 'undefined') {\n            payload['installationId'] = installationId;\n        }\n\n        if (typeof providerRepositoryId !== 'undefined') {\n            payload['providerRepositoryId'] = providerRepositoryId;\n        }\n\n        if (typeof providerBranch !== 'undefined') {\n            payload['providerBranch'] = providerBranch;\n        }\n\n        if (typeof providerSilentMode !== 'undefined') {\n            payload['providerSilentMode'] = providerSilentMode;\n        }\n\n        if (typeof providerRootDirectory !== 'undefined') {\n            payload['providerRootDirectory'] = providerRootDirectory;\n        }\n\n        if (typeof templateRepository !== 'undefined') {\n            payload['templateRepository'] = templateRepository;\n        }\n\n        if (typeof templateOwner !== 'undefined') {\n            payload['templateOwner'] = templateOwner;\n        }\n\n        if (typeof templateRootDirectory !== 'undefined') {\n            payload['templateRootDirectory'] = templateRootDirectory;\n        }\n\n        if (typeof templateBranch !== 'undefined') {\n            payload['templateBranch'] = templateBranch;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List runtimes\n     *\n     * Get a list of all runtimes that are currently active on your instance.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listRuntimes() {\n        const apiPath = '/functions/runtimes';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get function\n     *\n     * Get a function by its unique ID.\n     *\n     * @param {string} functionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async get(functionId) {\n        const apiPath = '/functions/{functionId}'.replace('{functionId}', functionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update function\n     *\n     * Update function by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} name\n     * @param {Runtime} runtime\n     * @param {string[]} execute\n     * @param {string[]} events\n     * @param {string} schedule\n     * @param {number} timeout\n     * @param {boolean} enabled\n     * @param {boolean} logging\n     * @param {string} entrypoint\n     * @param {string} commands\n     * @param {string} installationId\n     * @param {string} providerRepositoryId\n     * @param {string} providerBranch\n     * @param {boolean} providerSilentMode\n     * @param {string} providerRootDirectory\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async update(functionId, name, runtime, execute, events, schedule, timeout, enabled, logging, entrypoint, commands, installationId, providerRepositoryId, providerBranch, providerSilentMode, providerRootDirectory) {\n        const apiPath = '/functions/{functionId}'.replace('{functionId}', functionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof runtime !== 'undefined') {\n            payload['runtime'] = runtime;\n        }\n\n        if (typeof execute !== 'undefined') {\n            payload['execute'] = execute;\n        }\n\n        if (typeof events !== 'undefined') {\n            payload['events'] = events;\n        }\n\n        if (typeof schedule !== 'undefined') {\n            payload['schedule'] = schedule;\n        }\n\n        if (typeof timeout !== 'undefined') {\n            payload['timeout'] = timeout;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof logging !== 'undefined') {\n            payload['logging'] = logging;\n        }\n\n        if (typeof entrypoint !== 'undefined') {\n            payload['entrypoint'] = entrypoint;\n        }\n\n        if (typeof commands !== 'undefined') {\n            payload['commands'] = commands;\n        }\n\n        if (typeof installationId !== 'undefined') {\n            payload['installationId'] = installationId;\n        }\n\n        if (typeof providerRepositoryId !== 'undefined') {\n            payload['providerRepositoryId'] = providerRepositoryId;\n        }\n\n        if (typeof providerBranch !== 'undefined') {\n            payload['providerBranch'] = providerBranch;\n        }\n\n        if (typeof providerSilentMode !== 'undefined') {\n            payload['providerSilentMode'] = providerSilentMode;\n        }\n\n        if (typeof providerRootDirectory !== 'undefined') {\n            payload['providerRootDirectory'] = providerRootDirectory;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete function\n     *\n     * Delete a function by its unique ID.\n     *\n     * @param {string} functionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async delete(functionId) {\n        const apiPath = '/functions/{functionId}'.replace('{functionId}', functionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List deployments\n     *\n     * Get a list of all the project's code deployments. You can use the query\n     * params to filter your results.\n     *\n     * @param {string} functionId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listDeployments(functionId, queries, search) {\n        const apiPath = '/functions/{functionId}/deployments'.replace('{functionId}', functionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create deployment\n     *\n     * Create a new function code deployment. Use this endpoint to upload a new\n     * version of your code function. To execute your newly uploaded code, you'll\n     * need to update the function's deployment to use your new deployment UID.\n     * \n     * This endpoint accepts a tar.gz file compressed with your code. Make sure to\n     * include any dependencies your code has within the compressed file. You can\n     * learn more about code packaging in the [Appwrite Cloud Functions\n     * tutorial](https://appwrite.io/docs/functions).\n     * \n     * Use the \"command\" param to set the entrypoint used to execute your code.\n     *\n     * @param {string} functionId\n     * @param {InputFile} code\n     * @param {boolean} activate\n     * @param {string} entrypoint\n     * @param {string} commands\n     * @param {CallableFunction} onProgress\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createDeployment(functionId, code, activate, entrypoint, commands, onProgress = () => {}) {\n        const apiPath = '/functions/{functionId}/deployments'.replace('{functionId}', functionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof code === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"code\"');\n        }\n\n        if (typeof activate === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"activate\"');\n        }\n\n\n        if (typeof entrypoint !== 'undefined') {\n            payload['entrypoint'] = entrypoint;\n        }\n\n        if (typeof commands !== 'undefined') {\n            payload['commands'] = commands;\n        }\n\n        if (typeof code !== 'undefined') {\n            payload['code'] = code;\n        }\n\n        if (typeof activate !== 'undefined') {\n            payload['activate'] = activate.toString();\n        }\n\n\n        const size = code.size;\n        \n        const apiHeaders = {\n            'content-type': 'multipart/form-data',\n        };\n\n        let id = undefined;\n        let response = undefined;\n\n        let chunksUploaded = 0;\n\n\n        let currentChunk = 1;\n        let currentPosition = 0;\n        let uploadableChunk = new Uint8Array(client.CHUNK_SIZE);\n    \n\n        const uploadChunk = async (lastUpload = false) => {\n            if(currentChunk <= chunksUploaded) {\n                return;\n            }\n\n            const start = ((currentChunk - 1) * client.CHUNK_SIZE);\n            let end = start + currentPosition - 1;\n\n            if(!lastUpload || currentChunk !== 1) {\n                apiHeaders['content-range'] = 'bytes ' + start + '-' + end + '/' + size;\n            }\n\n            let uploadableChunkTrimmed;\n            \n            if(currentPosition + 1 >= client.CHUNK_SIZE) {\n                uploadableChunkTrimmed = uploadableChunk;\n            } else {\n                uploadableChunkTrimmed = new Uint8Array(currentPosition);\n                for(let i = 0; i <= currentPosition; i++) {\n                    uploadableChunkTrimmed[i] = uploadableChunk[i];\n                }\n            }\n\n            if (id) {\n                apiHeaders['x-appwrite-id'] = id;\n            }\n\n            payload['code'] = { type: 'file', file: new File([uploadableChunkTrimmed], code.filename), filename: code.filename };\n\n            response = await this.client.call('post', apiPath, apiHeaders, payload);\n\n            if (!id) {\n                id = response['$id'];\n            }\n\n            if (onProgress !== null) {\n                onProgress({\n                    $id: response['$id'],\n                    progress: Math.min((currentChunk) * client.CHUNK_SIZE, size) / size * 100,\n                    sizeUploaded: end+1,\n                    chunksTotal: response['chunksTotal'],\n                    chunksUploaded: response['chunksUploaded']\n                });\n            }\n\n            uploadableChunk = new Uint8Array(client.CHUNK_SIZE);\n            currentChunk++;\n            currentPosition = 0;\n        }\n\n        for await (const chunk of code.stream) {\n            for(const b of chunk) {\n                uploadableChunk[currentPosition] = b;\n\n                currentPosition++;\n                if(currentPosition >= client.CHUNK_SIZE) {\n                    await uploadChunk();\n                    currentPosition = 0;\n                }\n            }\n        }\n\n        if (currentPosition > 0) { // Check if there's any remaining data for the last chunk\n            await uploadChunk(true);\n        }\n\n        return response;\n\n    }\n\n    /**\n     * Get deployment\n     *\n     * Get a code deployment by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getDeployment(functionId, deploymentId) {\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update function deployment\n     *\n     * Update the function code deployment ID using the unique function ID. Use\n     * this endpoint to switch the code deployment that should be executed by the\n     * execution endpoint.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateDeployment(functionId, deploymentId) {\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete deployment\n     *\n     * Delete a code deployment by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteDeployment(functionId, deploymentId) {\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create build\n     *\n     * Create a new build for an Appwrite Function deployment. This endpoint can\n     * be used to retry a failed build.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @param {string} buildId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createBuild(functionId, deploymentId, buildId) {\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}/builds/{buildId}'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId).replace('{buildId}', buildId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n        if (typeof buildId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"buildId\"');\n        }\n\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Download Deployment\n     *\n     * Get a Deployment's contents by its unique ID. This endpoint supports range\n     * requests for partial or streaming file download.\n     *\n     * @param {string} functionId\n     * @param {string} deploymentId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async downloadDeployment(functionId, deploymentId) {\n        const apiPath = '/functions/{functionId}/deployments/{deploymentId}/download'.replace('{functionId}', functionId).replace('{deploymentId}', deploymentId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof deploymentId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n\n    /**\n     * List executions\n     *\n     * Get a list of all the current user function execution logs. You can use the\n     * query params to filter your results.\n     *\n     * @param {string} functionId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listExecutions(functionId, queries, search) {\n        const apiPath = '/functions/{functionId}/executions'.replace('{functionId}', functionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create execution\n     *\n     * Trigger a function execution. The returned object will return you the\n     * current execution status. You can ping the `Get Execution` endpoint to get\n     * updates on the current execution status. Once this endpoint is called, your\n     * function execution process will start asynchronously.\n     *\n     * @param {string} functionId\n     * @param {string} body\n     * @param {boolean} async\n     * @param {string} xpath\n     * @param {ExecutionMethod} method\n     * @param {object} headers\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createExecution(functionId, body, async, xpath, method, headers) {\n        const apiPath = '/functions/{functionId}/executions'.replace('{functionId}', functionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n\n        if (typeof body !== 'undefined') {\n            payload['body'] = body;\n        }\n\n        if (typeof async !== 'undefined') {\n            payload['async'] = async;\n        }\n\n        if (typeof xpath !== 'undefined') {\n            payload['path'] = xpath;\n        }\n\n        if (typeof method !== 'undefined') {\n            payload['method'] = method;\n        }\n\n        if (typeof headers !== 'undefined') {\n            payload['headers'] = headers;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get execution\n     *\n     * Get a function execution log by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} executionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getExecution(functionId, executionId) {\n        const apiPath = '/functions/{functionId}/executions/{executionId}'.replace('{functionId}', functionId).replace('{executionId}', executionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof executionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"executionId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List variables\n     *\n     * Get a list of all variables of a specific function.\n     *\n     * @param {string} functionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listVariables(functionId) {\n        const apiPath = '/functions/{functionId}/variables'.replace('{functionId}', functionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create variable\n     *\n     * Create a new function environment variable. These variables can be accessed\n     * in the function at runtime as environment variables.\n     *\n     * @param {string} functionId\n     * @param {string} key\n     * @param {string} value\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createVariable(functionId, key, value) {\n        const apiPath = '/functions/{functionId}/variables'.replace('{functionId}', functionId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n        if (typeof value === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"value\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof value !== 'undefined') {\n            payload['value'] = value;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get variable\n     *\n     * Get a variable by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} variableId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getVariable(functionId, variableId) {\n        const apiPath = '/functions/{functionId}/variables/{variableId}'.replace('{functionId}', functionId).replace('{variableId}', variableId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof variableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"variableId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update variable\n     *\n     * Update variable by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} variableId\n     * @param {string} key\n     * @param {string} value\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateVariable(functionId, variableId, key, value) {\n        const apiPath = '/functions/{functionId}/variables/{variableId}'.replace('{functionId}', functionId).replace('{variableId}', variableId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof variableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"variableId\"');\n        }\n\n        if (typeof key === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"key\"');\n        }\n\n\n        if (typeof key !== 'undefined') {\n            payload['key'] = key;\n        }\n\n        if (typeof value !== 'undefined') {\n            payload['value'] = value;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete variable\n     *\n     * Delete a variable by its unique ID.\n     *\n     * @param {string} functionId\n     * @param {string} variableId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteVariable(functionId, variableId) {\n        const apiPath = '/functions/{functionId}/variables/{variableId}'.replace('{functionId}', functionId).replace('{variableId}', variableId);\n        let payload = {};\n        if (typeof functionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"functionId\"');\n        }\n\n        if (typeof variableId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"variableId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n}\n\nmodule.exports = Functions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/functions.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/services/graphql.js":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/graphql.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(action-browser)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(action-browser)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(action-browser)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(action-browser)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(action-browser)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Graphql extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * GraphQL endpoint\n     *\n     * Execute a GraphQL mutation.\n     *\n     * @param {object} query\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async query(query) {\n        const apiPath = '/graphql';\n        let payload = {};\n        if (typeof query === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"query\"');\n        }\n\n\n        if (typeof query !== 'undefined') {\n            payload['query'] = query;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'x-sdk-graphql': 'true',\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * GraphQL endpoint\n     *\n     * Execute a GraphQL mutation.\n     *\n     * @param {object} query\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async mutation(query) {\n        const apiPath = '/graphql/mutation';\n        let payload = {};\n        if (typeof query === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"query\"');\n        }\n\n\n        if (typeof query !== 'undefined') {\n            payload['query'] = query;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'x-sdk-graphql': 'true',\n            'content-type': 'application/json',\n        }, payload);\n    }\n}\n\nmodule.exports = Graphql;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9zZXJ2aWNlcy9ncmFwaHFsLmpzIiwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBTyxDQUFDLG1GQUFlO0FBQ3ZDLDBCQUEwQixtQkFBTyxDQUFDLHVGQUFpQjtBQUNuRCxrQkFBa0IsbUJBQU8sQ0FBQyx1RkFBaUI7QUFDM0MsZUFBZSxtQkFBTyxDQUFDLGlGQUFjO0FBQ3JDLGVBQWUsbUJBQU8sQ0FBQyxzQkFBUTtBQUMvQixRQUFRLFlBQVksRUFBRSxtQkFBTyxDQUFDLGtCQUFNO0FBQ3BDLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCLFFBQVEsT0FBTyxFQUFFLG1CQUFPLENBQUMsc0JBQVE7QUFDakMsY0FBYyxtQkFBTyxDQUFDLCtFQUFhOztBQUVuQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixnQkFBZ0I7QUFDaEIsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZ0JBQWdCO0FBQ2hCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2FyZXB1bHNlLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvbGliL3NlcnZpY2VzL2dyYXBocWwuanM/NzlmOCJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBTZXJ2aWNlID0gcmVxdWlyZSgnLi4vc2VydmljZS5qcycpO1xuY29uc3QgQXBwd3JpdGVFeGNlcHRpb24gPSByZXF1aXJlKCcuLi9leGNlcHRpb24uanMnKTtcbmNvbnN0IElucHV0RmlsZSA9IHJlcXVpcmUoJy4uL2lucHV0RmlsZS5qcycpO1xuY29uc3QgY2xpZW50ID0gcmVxdWlyZSgnLi4vY2xpZW50LmpzJyk7XG5jb25zdCBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbmNvbnN0IHsgcHJvbWlzaWZ5IH0gPSByZXF1aXJlKCd1dGlsJyk7XG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCB7IEZpbGUgfSA9IHJlcXVpcmUoJ3VuZGljaScpO1xuY29uc3QgUXVlcnkgPSByZXF1aXJlKCcuLi9xdWVyeS5qcycpO1xuXG5jbGFzcyBHcmFwaHFsIGV4dGVuZHMgU2VydmljZSB7XG5cbiAgICAgY29uc3RydWN0b3IoY2xpZW50KVxuICAgICB7XG4gICAgICAgIHN1cGVyKGNsaWVudCk7XG4gICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogR3JhcGhRTCBlbmRwb2ludFxuICAgICAqXG4gICAgICogRXhlY3V0ZSBhIEdyYXBoUUwgbXV0YXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gcXVlcnlcbiAgICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICAgKi9cbiAgICBhc3luYyBxdWVyeShxdWVyeSkge1xuICAgICAgICBjb25zdCBhcGlQYXRoID0gJy9ncmFwaHFsJztcbiAgICAgICAgbGV0IHBheWxvYWQgPSB7fTtcbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBBcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwicXVlcnlcIicpO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAodHlwZW9mIHF1ZXJ5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcGF5bG9hZFsncXVlcnknXSA9IHF1ZXJ5O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoJ3Bvc3QnLCBhcGlQYXRoLCB7XG4gICAgICAgICAgICAneC1zZGstZ3JhcGhxbCc6ICd0cnVlJyxcbiAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sIHBheWxvYWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdyYXBoUUwgZW5kcG9pbnRcbiAgICAgKlxuICAgICAqIEV4ZWN1dGUgYSBHcmFwaFFMIG11dGF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHF1ZXJ5XG4gICAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAgICovXG4gICAgYXN5bmMgbXV0YXRpb24ocXVlcnkpIHtcbiAgICAgICAgY29uc3QgYXBpUGF0aCA9ICcvZ3JhcGhxbC9tdXRhdGlvbic7XG4gICAgICAgIGxldCBwYXlsb2FkID0ge307XG4gICAgICAgIGlmICh0eXBlb2YgcXVlcnkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcInF1ZXJ5XCInKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHBheWxvYWRbJ3F1ZXJ5J10gPSBxdWVyeTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKCdwb3N0JywgYXBpUGF0aCwge1xuICAgICAgICAgICAgJ3gtc2RrLWdyYXBocWwnOiAndHJ1ZScsXG4gICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LCBwYXlsb2FkKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gR3JhcGhxbDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/services/graphql.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/graphql.js":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/graphql.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(rsc)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Graphql extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * GraphQL endpoint\n     *\n     * Execute a GraphQL mutation.\n     *\n     * @param {object} query\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async query(query) {\n        const apiPath = '/graphql';\n        let payload = {};\n        if (typeof query === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"query\"');\n        }\n\n\n        if (typeof query !== 'undefined') {\n            payload['query'] = query;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'x-sdk-graphql': 'true',\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * GraphQL endpoint\n     *\n     * Execute a GraphQL mutation.\n     *\n     * @param {object} query\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async mutation(query) {\n        const apiPath = '/graphql/mutation';\n        let payload = {};\n        if (typeof query === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"query\"');\n        }\n\n\n        if (typeof query !== 'undefined') {\n            payload['query'] = query;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'x-sdk-graphql': 'true',\n            'content-type': 'application/json',\n        }, payload);\n    }\n}\n\nmodule.exports = Graphql;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9saWIvc2VydmljZXMvZ3JhcGhxbC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxnQkFBZ0IsbUJBQU8sQ0FBQyx3RUFBZTtBQUN2QywwQkFBMEIsbUJBQU8sQ0FBQyw0RUFBaUI7QUFDbkQsa0JBQWtCLG1CQUFPLENBQUMsNEVBQWlCO0FBQzNDLGVBQWUsbUJBQU8sQ0FBQyxzRUFBYztBQUNyQyxlQUFlLG1CQUFPLENBQUMsc0JBQVE7QUFDL0IsUUFBUSxZQUFZLEVBQUUsbUJBQU8sQ0FBQyxrQkFBTTtBQUNwQyxXQUFXLG1CQUFPLENBQUMsY0FBSTtBQUN2QixRQUFRLE9BQU8sRUFBRSxtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDLGNBQWMsbUJBQU8sQ0FBQyxvRUFBYTs7QUFFbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkIsZ0JBQWdCO0FBQ2hCLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGdCQUFnQjtBQUNoQixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL2NhcmVwdWxzZS8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2xpYi9zZXJ2aWNlcy9ncmFwaHFsLmpzPzY5NDciXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgU2VydmljZSA9IHJlcXVpcmUoJy4uL3NlcnZpY2UuanMnKTtcbmNvbnN0IEFwcHdyaXRlRXhjZXB0aW9uID0gcmVxdWlyZSgnLi4vZXhjZXB0aW9uLmpzJyk7XG5jb25zdCBJbnB1dEZpbGUgPSByZXF1aXJlKCcuLi9pbnB1dEZpbGUuanMnKTtcbmNvbnN0IGNsaWVudCA9IHJlcXVpcmUoJy4uL2NsaWVudC5qcycpO1xuY29uc3QgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJyk7XG5jb25zdCB7IHByb21pc2lmeSB9ID0gcmVxdWlyZSgndXRpbCcpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgeyBGaWxlIH0gPSByZXF1aXJlKCd1bmRpY2knKTtcbmNvbnN0IFF1ZXJ5ID0gcmVxdWlyZSgnLi4vcXVlcnkuanMnKTtcblxuY2xhc3MgR3JhcGhxbCBleHRlbmRzIFNlcnZpY2Uge1xuXG4gICAgIGNvbnN0cnVjdG9yKGNsaWVudClcbiAgICAge1xuICAgICAgICBzdXBlcihjbGllbnQpO1xuICAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEdyYXBoUUwgZW5kcG9pbnRcbiAgICAgKlxuICAgICAqIEV4ZWN1dGUgYSBHcmFwaFFMIG11dGF0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHF1ZXJ5XG4gICAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAgICovXG4gICAgYXN5bmMgcXVlcnkocXVlcnkpIHtcbiAgICAgICAgY29uc3QgYXBpUGF0aCA9ICcvZ3JhcGhxbCc7XG4gICAgICAgIGxldCBwYXlsb2FkID0ge307XG4gICAgICAgIGlmICh0eXBlb2YgcXVlcnkgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcInF1ZXJ5XCInKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgaWYgKHR5cGVvZiBxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHBheWxvYWRbJ3F1ZXJ5J10gPSBxdWVyeTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKCdwb3N0JywgYXBpUGF0aCwge1xuICAgICAgICAgICAgJ3gtc2RrLWdyYXBocWwnOiAndHJ1ZScsXG4gICAgICAgICAgICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICB9LCBwYXlsb2FkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHcmFwaFFMIGVuZHBvaW50XG4gICAgICpcbiAgICAgKiBFeGVjdXRlIGEgR3JhcGhRTCBtdXRhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBxdWVyeVxuICAgICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgICAqL1xuICAgIGFzeW5jIG11dGF0aW9uKHF1ZXJ5KSB7XG4gICAgICAgIGNvbnN0IGFwaVBhdGggPSAnL2dyYXBocWwvbXV0YXRpb24nO1xuICAgICAgICBsZXQgcGF5bG9hZCA9IHt9O1xuICAgICAgICBpZiAodHlwZW9mIHF1ZXJ5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJxdWVyeVwiJyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGlmICh0eXBlb2YgcXVlcnkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBwYXlsb2FkWydxdWVyeSddID0gcXVlcnk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbCgncG9zdCcsIGFwaVBhdGgsIHtcbiAgICAgICAgICAgICd4LXNkay1ncmFwaHFsJzogJ3RydWUnLFxuICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgfSwgcGF5bG9hZCk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEdyYXBocWw7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/graphql.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/services/health.js":
/*!***********************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/health.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(action-browser)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(action-browser)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(action-browser)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(action-browser)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(action-browser)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Health extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * Get HTTP\n     *\n     * Check the Appwrite HTTP server is up and responsive.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async get() {\n        const apiPath = '/health';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get antivirus\n     *\n     * Check the Appwrite Antivirus server is up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getAntivirus() {\n        const apiPath = '/health/anti-virus';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get cache\n     *\n     * Check the Appwrite in-memory cache servers are up and connection is\n     * successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getCache() {\n        const apiPath = '/health/cache';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get the SSL certificate for a domain\n     *\n     * Get the SSL certificate for a domain\n     *\n     * @param {string} domain\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getCertificate(domain) {\n        const apiPath = '/health/certificate';\n        let payload = {};\n\n        if (typeof domain !== 'undefined') {\n            payload['domain'] = domain;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get DB\n     *\n     * Check the Appwrite database servers are up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getDB() {\n        const apiPath = '/health/db';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get pubsub\n     *\n     * Check the Appwrite pub-sub servers are up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getPubSub() {\n        const apiPath = '/health/pubsub';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get queue\n     *\n     * Check the Appwrite queue messaging servers are up and connection is\n     * successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueue() {\n        const apiPath = '/health/queue';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get builds queue\n     *\n     * Get the number of builds that are waiting to be processed in the Appwrite\n     * internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueBuilds(threshold) {\n        const apiPath = '/health/queue/builds';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get certificates queue\n     *\n     * Get the number of certificates that are waiting to be issued against\n     * [Letsencrypt](https://letsencrypt.org/) in the Appwrite internal queue\n     * server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueCertificates(threshold) {\n        const apiPath = '/health/queue/certificates';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get databases queue\n     *\n     * Get the number of database changes that are waiting to be processed in the\n     * Appwrite internal queue server.\n     *\n     * @param {string} name\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueDatabases(name, threshold) {\n        const apiPath = '/health/queue/databases';\n        let payload = {};\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get deletes queue\n     *\n     * Get the number of background destructive changes that are waiting to be\n     * processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueDeletes(threshold) {\n        const apiPath = '/health/queue/deletes';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get number of failed queue jobs\n     *\n     * Returns the amount of failed jobs in a given queue.\n     * \n     *\n     * @param {Name} name\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getFailedJobs(name, threshold) {\n        const apiPath = '/health/queue/failed/{name}'.replace('{name}', name);\n        let payload = {};\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get functions queue\n     *\n     * Get the number of function executions that are waiting to be processed in\n     * the Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueFunctions(threshold) {\n        const apiPath = '/health/queue/functions';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get logs queue\n     *\n     * Get the number of logs that are waiting to be processed in the Appwrite\n     * internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueLogs(threshold) {\n        const apiPath = '/health/queue/logs';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get mails queue\n     *\n     * Get the number of mails that are waiting to be processed in the Appwrite\n     * internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueMails(threshold) {\n        const apiPath = '/health/queue/mails';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get messaging queue\n     *\n     * Get the number of messages that are waiting to be processed in the Appwrite\n     * internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueMessaging(threshold) {\n        const apiPath = '/health/queue/messaging';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get migrations queue\n     *\n     * Get the number of migrations that are waiting to be processed in the\n     * Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueMigrations(threshold) {\n        const apiPath = '/health/queue/migrations';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get usage queue\n     *\n     * Get the number of metrics that are waiting to be processed in the Appwrite\n     * internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueUsage(threshold) {\n        const apiPath = '/health/queue/usage';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get usage dump queue\n     *\n     * Get the number of projects containing metrics that are waiting to be\n     * processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueUsageDump(threshold) {\n        const apiPath = '/health/queue/usage-dump';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get webhooks queue\n     *\n     * Get the number of webhooks that are waiting to be processed in the Appwrite\n     * internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueWebhooks(threshold) {\n        const apiPath = '/health/queue/webhooks';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get storage\n     *\n     * Check the Appwrite storage device is up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getStorage() {\n        const apiPath = '/health/storage';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get local storage\n     *\n     * Check the Appwrite local storage device is up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getStorageLocal() {\n        const apiPath = '/health/storage/local';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get time\n     *\n     * Check the Appwrite server time is synced with Google remote NTP server. We\n     * use this technology to smoothly handle leap seconds with no disruptive\n     * events. The [Network Time\n     * Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) (NTP) is\n     * used by hundreds of millions of computers and devices to synchronize their\n     * clocks over the Internet. If your computer sets its own clock, it likely\n     * uses NTP.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getTime() {\n        const apiPath = '/health/time';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n}\n\nmodule.exports = Health;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/services/health.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/health.js":
/*!***********************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/health.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(rsc)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Health extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * Get HTTP\n     *\n     * Check the Appwrite HTTP server is up and responsive.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async get() {\n        const apiPath = '/health';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get antivirus\n     *\n     * Check the Appwrite Antivirus server is up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getAntivirus() {\n        const apiPath = '/health/anti-virus';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get cache\n     *\n     * Check the Appwrite in-memory cache servers are up and connection is\n     * successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getCache() {\n        const apiPath = '/health/cache';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get the SSL certificate for a domain\n     *\n     * Get the SSL certificate for a domain\n     *\n     * @param {string} domain\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getCertificate(domain) {\n        const apiPath = '/health/certificate';\n        let payload = {};\n\n        if (typeof domain !== 'undefined') {\n            payload['domain'] = domain;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get DB\n     *\n     * Check the Appwrite database servers are up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getDB() {\n        const apiPath = '/health/db';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get pubsub\n     *\n     * Check the Appwrite pub-sub servers are up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getPubSub() {\n        const apiPath = '/health/pubsub';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get queue\n     *\n     * Check the Appwrite queue messaging servers are up and connection is\n     * successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueue() {\n        const apiPath = '/health/queue';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get builds queue\n     *\n     * Get the number of builds that are waiting to be processed in the Appwrite\n     * internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueBuilds(threshold) {\n        const apiPath = '/health/queue/builds';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get certificates queue\n     *\n     * Get the number of certificates that are waiting to be issued against\n     * [Letsencrypt](https://letsencrypt.org/) in the Appwrite internal queue\n     * server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueCertificates(threshold) {\n        const apiPath = '/health/queue/certificates';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get databases queue\n     *\n     * Get the number of database changes that are waiting to be processed in the\n     * Appwrite internal queue server.\n     *\n     * @param {string} name\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueDatabases(name, threshold) {\n        const apiPath = '/health/queue/databases';\n        let payload = {};\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get deletes queue\n     *\n     * Get the number of background destructive changes that are waiting to be\n     * processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueDeletes(threshold) {\n        const apiPath = '/health/queue/deletes';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get number of failed queue jobs\n     *\n     * Returns the amount of failed jobs in a given queue.\n     * \n     *\n     * @param {Name} name\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getFailedJobs(name, threshold) {\n        const apiPath = '/health/queue/failed/{name}'.replace('{name}', name);\n        let payload = {};\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get functions queue\n     *\n     * Get the number of function executions that are waiting to be processed in\n     * the Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueFunctions(threshold) {\n        const apiPath = '/health/queue/functions';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get logs queue\n     *\n     * Get the number of logs that are waiting to be processed in the Appwrite\n     * internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueLogs(threshold) {\n        const apiPath = '/health/queue/logs';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get mails queue\n     *\n     * Get the number of mails that are waiting to be processed in the Appwrite\n     * internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueMails(threshold) {\n        const apiPath = '/health/queue/mails';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get messaging queue\n     *\n     * Get the number of messages that are waiting to be processed in the Appwrite\n     * internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueMessaging(threshold) {\n        const apiPath = '/health/queue/messaging';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get migrations queue\n     *\n     * Get the number of migrations that are waiting to be processed in the\n     * Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueMigrations(threshold) {\n        const apiPath = '/health/queue/migrations';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get usage queue\n     *\n     * Get the number of metrics that are waiting to be processed in the Appwrite\n     * internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueUsage(threshold) {\n        const apiPath = '/health/queue/usage';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get usage dump queue\n     *\n     * Get the number of projects containing metrics that are waiting to be\n     * processed in the Appwrite internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueUsageDump(threshold) {\n        const apiPath = '/health/queue/usage-dump';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get webhooks queue\n     *\n     * Get the number of webhooks that are waiting to be processed in the Appwrite\n     * internal queue server.\n     *\n     * @param {number} threshold\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getQueueWebhooks(threshold) {\n        const apiPath = '/health/queue/webhooks';\n        let payload = {};\n\n        if (typeof threshold !== 'undefined') {\n            payload['threshold'] = threshold;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get storage\n     *\n     * Check the Appwrite storage device is up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getStorage() {\n        const apiPath = '/health/storage';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get local storage\n     *\n     * Check the Appwrite local storage device is up and connection is successful.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getStorageLocal() {\n        const apiPath = '/health/storage/local';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get time\n     *\n     * Check the Appwrite server time is synced with Google remote NTP server. We\n     * use this technology to smoothly handle leap seconds with no disruptive\n     * events. The [Network Time\n     * Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) (NTP) is\n     * used by hundreds of millions of computers and devices to synchronize their\n     * clocks over the Internet. If your computer sets its own clock, it likely\n     * uses NTP.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getTime() {\n        const apiPath = '/health/time';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n}\n\nmodule.exports = Health;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/health.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/services/locale.js":
/*!***********************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/locale.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(action-browser)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(action-browser)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(action-browser)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(action-browser)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(action-browser)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Locale extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * Get user locale\n     *\n     * Get the current user location based on IP. Returns an object with user\n     * country code, country name, continent name, continent code, ip address and\n     * suggested currency. You can use the locale header to get the data in a\n     * supported language.\n     * \n     * ([IP Geolocation by DB-IP](https://db-ip.com))\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async get() {\n        const apiPath = '/locale';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List Locale Codes\n     *\n     * List of all locale codes in [ISO\n     * 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listCodes() {\n        const apiPath = '/locale/codes';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List continents\n     *\n     * List of all continents. You can use the locale header to get the data in a\n     * supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listContinents() {\n        const apiPath = '/locale/continents';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List countries\n     *\n     * List of all countries. You can use the locale header to get the data in a\n     * supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listCountries() {\n        const apiPath = '/locale/countries';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List EU countries\n     *\n     * List of all countries that are currently members of the EU. You can use the\n     * locale header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listCountriesEU() {\n        const apiPath = '/locale/countries/eu';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List countries phone codes\n     *\n     * List of all countries phone codes. You can use the locale header to get the\n     * data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listCountriesPhones() {\n        const apiPath = '/locale/countries/phones';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List currencies\n     *\n     * List of all currencies, including currency symbol, name, plural, and\n     * decimal digits for all major and minor currencies. You can use the locale\n     * header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listCurrencies() {\n        const apiPath = '/locale/currencies';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List languages\n     *\n     * List of all languages classified by ISO 639-1 including 2-letter code, name\n     * in English, and name in the respective language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listLanguages() {\n        const apiPath = '/locale/languages';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n}\n\nmodule.exports = Locale;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/services/locale.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/locale.js":
/*!***********************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/locale.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(rsc)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Locale extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * Get user locale\n     *\n     * Get the current user location based on IP. Returns an object with user\n     * country code, country name, continent name, continent code, ip address and\n     * suggested currency. You can use the locale header to get the data in a\n     * supported language.\n     * \n     * ([IP Geolocation by DB-IP](https://db-ip.com))\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async get() {\n        const apiPath = '/locale';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List Locale Codes\n     *\n     * List of all locale codes in [ISO\n     * 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listCodes() {\n        const apiPath = '/locale/codes';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List continents\n     *\n     * List of all continents. You can use the locale header to get the data in a\n     * supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listContinents() {\n        const apiPath = '/locale/continents';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List countries\n     *\n     * List of all countries. You can use the locale header to get the data in a\n     * supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listCountries() {\n        const apiPath = '/locale/countries';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List EU countries\n     *\n     * List of all countries that are currently members of the EU. You can use the\n     * locale header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listCountriesEU() {\n        const apiPath = '/locale/countries/eu';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List countries phone codes\n     *\n     * List of all countries phone codes. You can use the locale header to get the\n     * data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listCountriesPhones() {\n        const apiPath = '/locale/countries/phones';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List currencies\n     *\n     * List of all currencies, including currency symbol, name, plural, and\n     * decimal digits for all major and minor currencies. You can use the locale\n     * header to get the data in a supported language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listCurrencies() {\n        const apiPath = '/locale/currencies';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List languages\n     *\n     * List of all languages classified by ISO 639-1 including 2-letter code, name\n     * in English, and name in the respective language.\n     *\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listLanguages() {\n        const apiPath = '/locale/languages';\n        let payload = {};\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n}\n\nmodule.exports = Locale;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/locale.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/services/messaging.js":
/*!**************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/messaging.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(action-browser)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(action-browser)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(action-browser)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(action-browser)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(action-browser)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Messaging extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * List messages\n     *\n     * Get a list of all messages from the current Appwrite project.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listMessages(queries, search) {\n        const apiPath = '/messaging/messages';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email\n     *\n     * Create a new email message.\n     *\n     * @param {string} messageId\n     * @param {string} subject\n     * @param {string} content\n     * @param {string[]} topics\n     * @param {string[]} users\n     * @param {string[]} targets\n     * @param {string[]} cc\n     * @param {string[]} bcc\n     * @param {string[]} attachments\n     * @param {boolean} draft\n     * @param {boolean} html\n     * @param {string} scheduledAt\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createEmail(messageId, subject, content, topics, users, targets, cc, bcc, attachments, draft, html, scheduledAt) {\n        const apiPath = '/messaging/messages/email';\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n        if (typeof subject === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subject\"');\n        }\n\n        if (typeof content === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"content\"');\n        }\n\n\n        if (typeof messageId !== 'undefined') {\n            payload['messageId'] = messageId;\n        }\n\n        if (typeof subject !== 'undefined') {\n            payload['subject'] = subject;\n        }\n\n        if (typeof content !== 'undefined') {\n            payload['content'] = content;\n        }\n\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n\n        if (typeof cc !== 'undefined') {\n            payload['cc'] = cc;\n        }\n\n        if (typeof bcc !== 'undefined') {\n            payload['bcc'] = bcc;\n        }\n\n        if (typeof attachments !== 'undefined') {\n            payload['attachments'] = attachments;\n        }\n\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n\n        if (typeof html !== 'undefined') {\n            payload['html'] = html;\n        }\n\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update email\n     *\n     * Update an email message by its unique ID.\n     * \n     *\n     * @param {string} messageId\n     * @param {string[]} topics\n     * @param {string[]} users\n     * @param {string[]} targets\n     * @param {string} subject\n     * @param {string} content\n     * @param {boolean} draft\n     * @param {boolean} html\n     * @param {string[]} cc\n     * @param {string[]} bcc\n     * @param {string} scheduledAt\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateEmail(messageId, topics, users, targets, subject, content, draft, html, cc, bcc, scheduledAt) {\n        const apiPath = '/messaging/messages/email/{messageId}'.replace('{messageId}', messageId);\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n\n        if (typeof subject !== 'undefined') {\n            payload['subject'] = subject;\n        }\n\n        if (typeof content !== 'undefined') {\n            payload['content'] = content;\n        }\n\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n\n        if (typeof html !== 'undefined') {\n            payload['html'] = html;\n        }\n\n        if (typeof cc !== 'undefined') {\n            payload['cc'] = cc;\n        }\n\n        if (typeof bcc !== 'undefined') {\n            payload['bcc'] = bcc;\n        }\n\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create push notification\n     *\n     * Create a new push notification.\n     *\n     * @param {string} messageId\n     * @param {string} title\n     * @param {string} body\n     * @param {string[]} topics\n     * @param {string[]} users\n     * @param {string[]} targets\n     * @param {object} data\n     * @param {string} action\n     * @param {string} image\n     * @param {string} icon\n     * @param {string} sound\n     * @param {string} color\n     * @param {string} tag\n     * @param {string} badge\n     * @param {boolean} draft\n     * @param {string} scheduledAt\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createPush(messageId, title, body, topics, users, targets, data, action, image, icon, sound, color, tag, badge, draft, scheduledAt) {\n        const apiPath = '/messaging/messages/push';\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n        if (typeof title === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"title\"');\n        }\n\n        if (typeof body === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"body\"');\n        }\n\n\n        if (typeof messageId !== 'undefined') {\n            payload['messageId'] = messageId;\n        }\n\n        if (typeof title !== 'undefined') {\n            payload['title'] = title;\n        }\n\n        if (typeof body !== 'undefined') {\n            payload['body'] = body;\n        }\n\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n\n        if (typeof action !== 'undefined') {\n            payload['action'] = action;\n        }\n\n        if (typeof image !== 'undefined') {\n            payload['image'] = image;\n        }\n\n        if (typeof icon !== 'undefined') {\n            payload['icon'] = icon;\n        }\n\n        if (typeof sound !== 'undefined') {\n            payload['sound'] = sound;\n        }\n\n        if (typeof color !== 'undefined') {\n            payload['color'] = color;\n        }\n\n        if (typeof tag !== 'undefined') {\n            payload['tag'] = tag;\n        }\n\n        if (typeof badge !== 'undefined') {\n            payload['badge'] = badge;\n        }\n\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update push notification\n     *\n     * Update a push notification by its unique ID.\n     * \n     *\n     * @param {string} messageId\n     * @param {string[]} topics\n     * @param {string[]} users\n     * @param {string[]} targets\n     * @param {string} title\n     * @param {string} body\n     * @param {object} data\n     * @param {string} action\n     * @param {string} image\n     * @param {string} icon\n     * @param {string} sound\n     * @param {string} color\n     * @param {string} tag\n     * @param {number} badge\n     * @param {boolean} draft\n     * @param {string} scheduledAt\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePush(messageId, topics, users, targets, title, body, data, action, image, icon, sound, color, tag, badge, draft, scheduledAt) {\n        const apiPath = '/messaging/messages/push/{messageId}'.replace('{messageId}', messageId);\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n\n        if (typeof title !== 'undefined') {\n            payload['title'] = title;\n        }\n\n        if (typeof body !== 'undefined') {\n            payload['body'] = body;\n        }\n\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n\n        if (typeof action !== 'undefined') {\n            payload['action'] = action;\n        }\n\n        if (typeof image !== 'undefined') {\n            payload['image'] = image;\n        }\n\n        if (typeof icon !== 'undefined') {\n            payload['icon'] = icon;\n        }\n\n        if (typeof sound !== 'undefined') {\n            payload['sound'] = sound;\n        }\n\n        if (typeof color !== 'undefined') {\n            payload['color'] = color;\n        }\n\n        if (typeof tag !== 'undefined') {\n            payload['tag'] = tag;\n        }\n\n        if (typeof badge !== 'undefined') {\n            payload['badge'] = badge;\n        }\n\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create SMS\n     *\n     * Create a new SMS message.\n     *\n     * @param {string} messageId\n     * @param {string} content\n     * @param {string[]} topics\n     * @param {string[]} users\n     * @param {string[]} targets\n     * @param {boolean} draft\n     * @param {string} scheduledAt\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createSms(messageId, content, topics, users, targets, draft, scheduledAt) {\n        const apiPath = '/messaging/messages/sms';\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n        if (typeof content === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"content\"');\n        }\n\n\n        if (typeof messageId !== 'undefined') {\n            payload['messageId'] = messageId;\n        }\n\n        if (typeof content !== 'undefined') {\n            payload['content'] = content;\n        }\n\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update SMS\n     *\n     * Update an email message by its unique ID.\n     * \n     *\n     * @param {string} messageId\n     * @param {string[]} topics\n     * @param {string[]} users\n     * @param {string[]} targets\n     * @param {string} content\n     * @param {boolean} draft\n     * @param {string} scheduledAt\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateSms(messageId, topics, users, targets, content, draft, scheduledAt) {\n        const apiPath = '/messaging/messages/sms/{messageId}'.replace('{messageId}', messageId);\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n\n        if (typeof content !== 'undefined') {\n            payload['content'] = content;\n        }\n\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get message\n     *\n     * Get a message by its unique ID.\n     * \n     *\n     * @param {string} messageId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getMessage(messageId) {\n        const apiPath = '/messaging/messages/{messageId}'.replace('{messageId}', messageId);\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete message\n     *\n     * Delete a message. If the message is not a draft or scheduled, but has been\n     * sent, this will not recall the message.\n     *\n     * @param {string} messageId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async delete(messageId) {\n        const apiPath = '/messaging/messages/{messageId}'.replace('{messageId}', messageId);\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List message logs\n     *\n     * Get the message activity logs listed by its unique ID.\n     *\n     * @param {string} messageId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listMessageLogs(messageId, queries) {\n        const apiPath = '/messaging/messages/{messageId}/logs'.replace('{messageId}', messageId);\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List message targets\n     *\n     * Get a list of the targets associated with a message.\n     *\n     * @param {string} messageId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listTargets(messageId, queries) {\n        const apiPath = '/messaging/messages/{messageId}/targets'.replace('{messageId}', messageId);\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List providers\n     *\n     * Get a list of all providers from the current Appwrite project.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listProviders(queries, search) {\n        const apiPath = '/messaging/providers';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create APNS provider\n     *\n     * Create a new Apple Push Notification service provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} authKey\n     * @param {string} authKeyId\n     * @param {string} teamId\n     * @param {string} bundleId\n     * @param {boolean} sandbox\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createApnsProvider(providerId, name, authKey, authKeyId, teamId, bundleId, sandbox, enabled) {\n        const apiPath = '/messaging/providers/apns';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof authKey !== 'undefined') {\n            payload['authKey'] = authKey;\n        }\n\n        if (typeof authKeyId !== 'undefined') {\n            payload['authKeyId'] = authKeyId;\n        }\n\n        if (typeof teamId !== 'undefined') {\n            payload['teamId'] = teamId;\n        }\n\n        if (typeof bundleId !== 'undefined') {\n            payload['bundleId'] = bundleId;\n        }\n\n        if (typeof sandbox !== 'undefined') {\n            payload['sandbox'] = sandbox;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update APNS provider\n     *\n     * Update a Apple Push Notification service provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} authKey\n     * @param {string} authKeyId\n     * @param {string} teamId\n     * @param {string} bundleId\n     * @param {boolean} sandbox\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateApnsProvider(providerId, name, enabled, authKey, authKeyId, teamId, bundleId, sandbox) {\n        const apiPath = '/messaging/providers/apns/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof authKey !== 'undefined') {\n            payload['authKey'] = authKey;\n        }\n\n        if (typeof authKeyId !== 'undefined') {\n            payload['authKeyId'] = authKeyId;\n        }\n\n        if (typeof teamId !== 'undefined') {\n            payload['teamId'] = teamId;\n        }\n\n        if (typeof bundleId !== 'undefined') {\n            payload['bundleId'] = bundleId;\n        }\n\n        if (typeof sandbox !== 'undefined') {\n            payload['sandbox'] = sandbox;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create FCM provider\n     *\n     * Create a new Firebase Cloud Messaging provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {object} serviceAccountJSON\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createFcmProvider(providerId, name, serviceAccountJSON, enabled) {\n        const apiPath = '/messaging/providers/fcm';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof serviceAccountJSON !== 'undefined') {\n            payload['serviceAccountJSON'] = serviceAccountJSON;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update FCM provider\n     *\n     * Update a Firebase Cloud Messaging provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {object} serviceAccountJSON\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateFcmProvider(providerId, name, enabled, serviceAccountJSON) {\n        const apiPath = '/messaging/providers/fcm/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof serviceAccountJSON !== 'undefined') {\n            payload['serviceAccountJSON'] = serviceAccountJSON;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create Mailgun provider\n     *\n     * Create a new Mailgun provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} apiKey\n     * @param {string} domain\n     * @param {boolean} isEuRegion\n     * @param {string} fromName\n     * @param {string} fromEmail\n     * @param {string} replyToName\n     * @param {string} replyToEmail\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createMailgunProvider(providerId, name, apiKey, domain, isEuRegion, fromName, fromEmail, replyToName, replyToEmail, enabled) {\n        const apiPath = '/messaging/providers/mailgun';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof domain !== 'undefined') {\n            payload['domain'] = domain;\n        }\n\n        if (typeof isEuRegion !== 'undefined') {\n            payload['isEuRegion'] = isEuRegion;\n        }\n\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update Mailgun provider\n     *\n     * Update a Mailgun provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} apiKey\n     * @param {string} domain\n     * @param {boolean} isEuRegion\n     * @param {boolean} enabled\n     * @param {string} fromName\n     * @param {string} fromEmail\n     * @param {string} replyToName\n     * @param {string} replyToEmail\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMailgunProvider(providerId, name, apiKey, domain, isEuRegion, enabled, fromName, fromEmail, replyToName, replyToEmail) {\n        const apiPath = '/messaging/providers/mailgun/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof domain !== 'undefined') {\n            payload['domain'] = domain;\n        }\n\n        if (typeof isEuRegion !== 'undefined') {\n            payload['isEuRegion'] = isEuRegion;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create Msg91 provider\n     *\n     * Create a new MSG91 provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} templateId\n     * @param {string} senderId\n     * @param {string} authKey\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createMsg91Provider(providerId, name, templateId, senderId, authKey, enabled) {\n        const apiPath = '/messaging/providers/msg91';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof templateId !== 'undefined') {\n            payload['templateId'] = templateId;\n        }\n\n        if (typeof senderId !== 'undefined') {\n            payload['senderId'] = senderId;\n        }\n\n        if (typeof authKey !== 'undefined') {\n            payload['authKey'] = authKey;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update Msg91 provider\n     *\n     * Update a MSG91 provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} templateId\n     * @param {string} senderId\n     * @param {string} authKey\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMsg91Provider(providerId, name, enabled, templateId, senderId, authKey) {\n        const apiPath = '/messaging/providers/msg91/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof templateId !== 'undefined') {\n            payload['templateId'] = templateId;\n        }\n\n        if (typeof senderId !== 'undefined') {\n            payload['senderId'] = senderId;\n        }\n\n        if (typeof authKey !== 'undefined') {\n            payload['authKey'] = authKey;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create Sendgrid provider\n     *\n     * Create a new Sendgrid provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} apiKey\n     * @param {string} fromName\n     * @param {string} fromEmail\n     * @param {string} replyToName\n     * @param {string} replyToEmail\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createSendgridProvider(providerId, name, apiKey, fromName, fromEmail, replyToName, replyToEmail, enabled) {\n        const apiPath = '/messaging/providers/sendgrid';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update Sendgrid provider\n     *\n     * Update a Sendgrid provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} apiKey\n     * @param {string} fromName\n     * @param {string} fromEmail\n     * @param {string} replyToName\n     * @param {string} replyToEmail\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateSendgridProvider(providerId, name, enabled, apiKey, fromName, fromEmail, replyToName, replyToEmail) {\n        const apiPath = '/messaging/providers/sendgrid/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create SMTP provider\n     *\n     * Create a new SMTP provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} host\n     * @param {number} port\n     * @param {string} username\n     * @param {string} password\n     * @param {SmtpEncryption} encryption\n     * @param {boolean} autoTLS\n     * @param {string} mailer\n     * @param {string} fromName\n     * @param {string} fromEmail\n     * @param {string} replyToName\n     * @param {string} replyToEmail\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createSmtpProvider(providerId, name, host, port, username, password, encryption, autoTLS, mailer, fromName, fromEmail, replyToName, replyToEmail, enabled) {\n        const apiPath = '/messaging/providers/smtp';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        if (typeof host === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"host\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof host !== 'undefined') {\n            payload['host'] = host;\n        }\n\n        if (typeof port !== 'undefined') {\n            payload['port'] = port;\n        }\n\n        if (typeof username !== 'undefined') {\n            payload['username'] = username;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof encryption !== 'undefined') {\n            payload['encryption'] = encryption;\n        }\n\n        if (typeof autoTLS !== 'undefined') {\n            payload['autoTLS'] = autoTLS;\n        }\n\n        if (typeof mailer !== 'undefined') {\n            payload['mailer'] = mailer;\n        }\n\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update SMTP provider\n     *\n     * Update a SMTP provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} host\n     * @param {number} port\n     * @param {string} username\n     * @param {string} password\n     * @param {SmtpEncryption} encryption\n     * @param {boolean} autoTLS\n     * @param {string} mailer\n     * @param {string} fromName\n     * @param {string} fromEmail\n     * @param {string} replyToName\n     * @param {string} replyToEmail\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateSmtpProvider(providerId, name, host, port, username, password, encryption, autoTLS, mailer, fromName, fromEmail, replyToName, replyToEmail, enabled) {\n        const apiPath = '/messaging/providers/smtp/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof host !== 'undefined') {\n            payload['host'] = host;\n        }\n\n        if (typeof port !== 'undefined') {\n            payload['port'] = port;\n        }\n\n        if (typeof username !== 'undefined') {\n            payload['username'] = username;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof encryption !== 'undefined') {\n            payload['encryption'] = encryption;\n        }\n\n        if (typeof autoTLS !== 'undefined') {\n            payload['autoTLS'] = autoTLS;\n        }\n\n        if (typeof mailer !== 'undefined') {\n            payload['mailer'] = mailer;\n        }\n\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create Telesign provider\n     *\n     * Create a new Telesign provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} from\n     * @param {string} customerId\n     * @param {string} apiKey\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createTelesignProvider(providerId, name, from, customerId, apiKey, enabled) {\n        const apiPath = '/messaging/providers/telesign';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n\n        if (typeof customerId !== 'undefined') {\n            payload['customerId'] = customerId;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update Telesign provider\n     *\n     * Update a Telesign provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} customerId\n     * @param {string} apiKey\n     * @param {string} from\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateTelesignProvider(providerId, name, enabled, customerId, apiKey, from) {\n        const apiPath = '/messaging/providers/telesign/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof customerId !== 'undefined') {\n            payload['customerId'] = customerId;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create Textmagic provider\n     *\n     * Create a new Textmagic provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} from\n     * @param {string} username\n     * @param {string} apiKey\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createTextmagicProvider(providerId, name, from, username, apiKey, enabled) {\n        const apiPath = '/messaging/providers/textmagic';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n\n        if (typeof username !== 'undefined') {\n            payload['username'] = username;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update Textmagic provider\n     *\n     * Update a Textmagic provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} username\n     * @param {string} apiKey\n     * @param {string} from\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateTextmagicProvider(providerId, name, enabled, username, apiKey, from) {\n        const apiPath = '/messaging/providers/textmagic/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof username !== 'undefined') {\n            payload['username'] = username;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create Twilio provider\n     *\n     * Create a new Twilio provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} from\n     * @param {string} accountSid\n     * @param {string} authToken\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createTwilioProvider(providerId, name, from, accountSid, authToken, enabled) {\n        const apiPath = '/messaging/providers/twilio';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n\n        if (typeof accountSid !== 'undefined') {\n            payload['accountSid'] = accountSid;\n        }\n\n        if (typeof authToken !== 'undefined') {\n            payload['authToken'] = authToken;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update Twilio provider\n     *\n     * Update a Twilio provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} accountSid\n     * @param {string} authToken\n     * @param {string} from\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateTwilioProvider(providerId, name, enabled, accountSid, authToken, from) {\n        const apiPath = '/messaging/providers/twilio/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof accountSid !== 'undefined') {\n            payload['accountSid'] = accountSid;\n        }\n\n        if (typeof authToken !== 'undefined') {\n            payload['authToken'] = authToken;\n        }\n\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create Vonage provider\n     *\n     * Create a new Vonage provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} from\n     * @param {string} apiKey\n     * @param {string} apiSecret\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createVonageProvider(providerId, name, from, apiKey, apiSecret, enabled) {\n        const apiPath = '/messaging/providers/vonage';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof apiSecret !== 'undefined') {\n            payload['apiSecret'] = apiSecret;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update Vonage provider\n     *\n     * Update a Vonage provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} apiKey\n     * @param {string} apiSecret\n     * @param {string} from\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateVonageProvider(providerId, name, enabled, apiKey, apiSecret, from) {\n        const apiPath = '/messaging/providers/vonage/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof apiSecret !== 'undefined') {\n            payload['apiSecret'] = apiSecret;\n        }\n\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get provider\n     *\n     * Get a provider by its unique ID.\n     * \n     *\n     * @param {string} providerId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getProvider(providerId) {\n        const apiPath = '/messaging/providers/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete provider\n     *\n     * Delete a provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteProvider(providerId) {\n        const apiPath = '/messaging/providers/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List provider logs\n     *\n     * Get the provider activity logs listed by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listProviderLogs(providerId, queries) {\n        const apiPath = '/messaging/providers/{providerId}/logs'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List subscriber logs\n     *\n     * Get the subscriber activity logs listed by its unique ID.\n     *\n     * @param {string} subscriberId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listSubscriberLogs(subscriberId, queries) {\n        const apiPath = '/messaging/subscribers/{subscriberId}/logs'.replace('{subscriberId}', subscriberId);\n        let payload = {};\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List topics\n     *\n     * Get a list of all topics from the current Appwrite project.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listTopics(queries, search) {\n        const apiPath = '/messaging/topics';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create topic\n     *\n     * Create a new topic.\n     *\n     * @param {string} topicId\n     * @param {string} name\n     * @param {string[]} subscribe\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createTopic(topicId, name, subscribe) {\n        const apiPath = '/messaging/topics';\n        let payload = {};\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof topicId !== 'undefined') {\n            payload['topicId'] = topicId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof subscribe !== 'undefined') {\n            payload['subscribe'] = subscribe;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get topic\n     *\n     * Get a topic by its unique ID.\n     * \n     *\n     * @param {string} topicId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getTopic(topicId) {\n        const apiPath = '/messaging/topics/{topicId}'.replace('{topicId}', topicId);\n        let payload = {};\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update topic\n     *\n     * Update a topic by its unique ID.\n     * \n     *\n     * @param {string} topicId\n     * @param {string} name\n     * @param {string[]} subscribe\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateTopic(topicId, name, subscribe) {\n        const apiPath = '/messaging/topics/{topicId}'.replace('{topicId}', topicId);\n        let payload = {};\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof subscribe !== 'undefined') {\n            payload['subscribe'] = subscribe;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete topic\n     *\n     * Delete a topic by its unique ID.\n     *\n     * @param {string} topicId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteTopic(topicId) {\n        const apiPath = '/messaging/topics/{topicId}'.replace('{topicId}', topicId);\n        let payload = {};\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List topic logs\n     *\n     * Get the topic activity logs listed by its unique ID.\n     *\n     * @param {string} topicId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listTopicLogs(topicId, queries) {\n        const apiPath = '/messaging/topics/{topicId}/logs'.replace('{topicId}', topicId);\n        let payload = {};\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List subscribers\n     *\n     * Get a list of all subscribers from the current Appwrite project.\n     *\n     * @param {string} topicId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listSubscribers(topicId, queries, search) {\n        const apiPath = '/messaging/topics/{topicId}/subscribers'.replace('{topicId}', topicId);\n        let payload = {};\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create subscriber\n     *\n     * Create a new subscriber.\n     *\n     * @param {string} topicId\n     * @param {string} subscriberId\n     * @param {string} targetId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createSubscriber(topicId, subscriberId, targetId) {\n        const apiPath = '/messaging/topics/{topicId}/subscribers'.replace('{topicId}', topicId);\n        let payload = {};\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n\n        if (typeof subscriberId !== 'undefined') {\n            payload['subscriberId'] = subscriberId;\n        }\n\n        if (typeof targetId !== 'undefined') {\n            payload['targetId'] = targetId;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get subscriber\n     *\n     * Get a subscriber by its unique ID.\n     * \n     *\n     * @param {string} topicId\n     * @param {string} subscriberId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getSubscriber(topicId, subscriberId) {\n        const apiPath = '/messaging/topics/{topicId}/subscribers/{subscriberId}'.replace('{topicId}', topicId).replace('{subscriberId}', subscriberId);\n        let payload = {};\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete subscriber\n     *\n     * Delete a subscriber by its unique ID.\n     *\n     * @param {string} topicId\n     * @param {string} subscriberId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteSubscriber(topicId, subscriberId) {\n        const apiPath = '/messaging/topics/{topicId}/subscribers/{subscriberId}'.replace('{topicId}', topicId).replace('{subscriberId}', subscriberId);\n        let payload = {};\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n}\n\nmodule.exports = Messaging;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/services/messaging.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/messaging.js":
/*!**************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/messaging.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(rsc)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Messaging extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * List messages\n     *\n     * Get a list of all messages from the current Appwrite project.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listMessages(queries, search) {\n        const apiPath = '/messaging/messages';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create email\n     *\n     * Create a new email message.\n     *\n     * @param {string} messageId\n     * @param {string} subject\n     * @param {string} content\n     * @param {string[]} topics\n     * @param {string[]} users\n     * @param {string[]} targets\n     * @param {string[]} cc\n     * @param {string[]} bcc\n     * @param {string[]} attachments\n     * @param {boolean} draft\n     * @param {boolean} html\n     * @param {string} scheduledAt\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createEmail(messageId, subject, content, topics, users, targets, cc, bcc, attachments, draft, html, scheduledAt) {\n        const apiPath = '/messaging/messages/email';\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n        if (typeof subject === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subject\"');\n        }\n\n        if (typeof content === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"content\"');\n        }\n\n\n        if (typeof messageId !== 'undefined') {\n            payload['messageId'] = messageId;\n        }\n\n        if (typeof subject !== 'undefined') {\n            payload['subject'] = subject;\n        }\n\n        if (typeof content !== 'undefined') {\n            payload['content'] = content;\n        }\n\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n\n        if (typeof cc !== 'undefined') {\n            payload['cc'] = cc;\n        }\n\n        if (typeof bcc !== 'undefined') {\n            payload['bcc'] = bcc;\n        }\n\n        if (typeof attachments !== 'undefined') {\n            payload['attachments'] = attachments;\n        }\n\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n\n        if (typeof html !== 'undefined') {\n            payload['html'] = html;\n        }\n\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update email\n     *\n     * Update an email message by its unique ID.\n     * \n     *\n     * @param {string} messageId\n     * @param {string[]} topics\n     * @param {string[]} users\n     * @param {string[]} targets\n     * @param {string} subject\n     * @param {string} content\n     * @param {boolean} draft\n     * @param {boolean} html\n     * @param {string[]} cc\n     * @param {string[]} bcc\n     * @param {string} scheduledAt\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateEmail(messageId, topics, users, targets, subject, content, draft, html, cc, bcc, scheduledAt) {\n        const apiPath = '/messaging/messages/email/{messageId}'.replace('{messageId}', messageId);\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n\n        if (typeof subject !== 'undefined') {\n            payload['subject'] = subject;\n        }\n\n        if (typeof content !== 'undefined') {\n            payload['content'] = content;\n        }\n\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n\n        if (typeof html !== 'undefined') {\n            payload['html'] = html;\n        }\n\n        if (typeof cc !== 'undefined') {\n            payload['cc'] = cc;\n        }\n\n        if (typeof bcc !== 'undefined') {\n            payload['bcc'] = bcc;\n        }\n\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create push notification\n     *\n     * Create a new push notification.\n     *\n     * @param {string} messageId\n     * @param {string} title\n     * @param {string} body\n     * @param {string[]} topics\n     * @param {string[]} users\n     * @param {string[]} targets\n     * @param {object} data\n     * @param {string} action\n     * @param {string} image\n     * @param {string} icon\n     * @param {string} sound\n     * @param {string} color\n     * @param {string} tag\n     * @param {string} badge\n     * @param {boolean} draft\n     * @param {string} scheduledAt\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createPush(messageId, title, body, topics, users, targets, data, action, image, icon, sound, color, tag, badge, draft, scheduledAt) {\n        const apiPath = '/messaging/messages/push';\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n        if (typeof title === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"title\"');\n        }\n\n        if (typeof body === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"body\"');\n        }\n\n\n        if (typeof messageId !== 'undefined') {\n            payload['messageId'] = messageId;\n        }\n\n        if (typeof title !== 'undefined') {\n            payload['title'] = title;\n        }\n\n        if (typeof body !== 'undefined') {\n            payload['body'] = body;\n        }\n\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n\n        if (typeof action !== 'undefined') {\n            payload['action'] = action;\n        }\n\n        if (typeof image !== 'undefined') {\n            payload['image'] = image;\n        }\n\n        if (typeof icon !== 'undefined') {\n            payload['icon'] = icon;\n        }\n\n        if (typeof sound !== 'undefined') {\n            payload['sound'] = sound;\n        }\n\n        if (typeof color !== 'undefined') {\n            payload['color'] = color;\n        }\n\n        if (typeof tag !== 'undefined') {\n            payload['tag'] = tag;\n        }\n\n        if (typeof badge !== 'undefined') {\n            payload['badge'] = badge;\n        }\n\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update push notification\n     *\n     * Update a push notification by its unique ID.\n     * \n     *\n     * @param {string} messageId\n     * @param {string[]} topics\n     * @param {string[]} users\n     * @param {string[]} targets\n     * @param {string} title\n     * @param {string} body\n     * @param {object} data\n     * @param {string} action\n     * @param {string} image\n     * @param {string} icon\n     * @param {string} sound\n     * @param {string} color\n     * @param {string} tag\n     * @param {number} badge\n     * @param {boolean} draft\n     * @param {string} scheduledAt\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePush(messageId, topics, users, targets, title, body, data, action, image, icon, sound, color, tag, badge, draft, scheduledAt) {\n        const apiPath = '/messaging/messages/push/{messageId}'.replace('{messageId}', messageId);\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n\n        if (typeof title !== 'undefined') {\n            payload['title'] = title;\n        }\n\n        if (typeof body !== 'undefined') {\n            payload['body'] = body;\n        }\n\n        if (typeof data !== 'undefined') {\n            payload['data'] = data;\n        }\n\n        if (typeof action !== 'undefined') {\n            payload['action'] = action;\n        }\n\n        if (typeof image !== 'undefined') {\n            payload['image'] = image;\n        }\n\n        if (typeof icon !== 'undefined') {\n            payload['icon'] = icon;\n        }\n\n        if (typeof sound !== 'undefined') {\n            payload['sound'] = sound;\n        }\n\n        if (typeof color !== 'undefined') {\n            payload['color'] = color;\n        }\n\n        if (typeof tag !== 'undefined') {\n            payload['tag'] = tag;\n        }\n\n        if (typeof badge !== 'undefined') {\n            payload['badge'] = badge;\n        }\n\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create SMS\n     *\n     * Create a new SMS message.\n     *\n     * @param {string} messageId\n     * @param {string} content\n     * @param {string[]} topics\n     * @param {string[]} users\n     * @param {string[]} targets\n     * @param {boolean} draft\n     * @param {string} scheduledAt\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createSms(messageId, content, topics, users, targets, draft, scheduledAt) {\n        const apiPath = '/messaging/messages/sms';\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n        if (typeof content === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"content\"');\n        }\n\n\n        if (typeof messageId !== 'undefined') {\n            payload['messageId'] = messageId;\n        }\n\n        if (typeof content !== 'undefined') {\n            payload['content'] = content;\n        }\n\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update SMS\n     *\n     * Update an email message by its unique ID.\n     * \n     *\n     * @param {string} messageId\n     * @param {string[]} topics\n     * @param {string[]} users\n     * @param {string[]} targets\n     * @param {string} content\n     * @param {boolean} draft\n     * @param {string} scheduledAt\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateSms(messageId, topics, users, targets, content, draft, scheduledAt) {\n        const apiPath = '/messaging/messages/sms/{messageId}'.replace('{messageId}', messageId);\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n\n        if (typeof topics !== 'undefined') {\n            payload['topics'] = topics;\n        }\n\n        if (typeof users !== 'undefined') {\n            payload['users'] = users;\n        }\n\n        if (typeof targets !== 'undefined') {\n            payload['targets'] = targets;\n        }\n\n        if (typeof content !== 'undefined') {\n            payload['content'] = content;\n        }\n\n        if (typeof draft !== 'undefined') {\n            payload['draft'] = draft;\n        }\n\n        if (typeof scheduledAt !== 'undefined') {\n            payload['scheduledAt'] = scheduledAt;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get message\n     *\n     * Get a message by its unique ID.\n     * \n     *\n     * @param {string} messageId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getMessage(messageId) {\n        const apiPath = '/messaging/messages/{messageId}'.replace('{messageId}', messageId);\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete message\n     *\n     * Delete a message. If the message is not a draft or scheduled, but has been\n     * sent, this will not recall the message.\n     *\n     * @param {string} messageId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async delete(messageId) {\n        const apiPath = '/messaging/messages/{messageId}'.replace('{messageId}', messageId);\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List message logs\n     *\n     * Get the message activity logs listed by its unique ID.\n     *\n     * @param {string} messageId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listMessageLogs(messageId, queries) {\n        const apiPath = '/messaging/messages/{messageId}/logs'.replace('{messageId}', messageId);\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List message targets\n     *\n     * Get a list of the targets associated with a message.\n     *\n     * @param {string} messageId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listTargets(messageId, queries) {\n        const apiPath = '/messaging/messages/{messageId}/targets'.replace('{messageId}', messageId);\n        let payload = {};\n        if (typeof messageId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"messageId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List providers\n     *\n     * Get a list of all providers from the current Appwrite project.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listProviders(queries, search) {\n        const apiPath = '/messaging/providers';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create APNS provider\n     *\n     * Create a new Apple Push Notification service provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} authKey\n     * @param {string} authKeyId\n     * @param {string} teamId\n     * @param {string} bundleId\n     * @param {boolean} sandbox\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createApnsProvider(providerId, name, authKey, authKeyId, teamId, bundleId, sandbox, enabled) {\n        const apiPath = '/messaging/providers/apns';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof authKey !== 'undefined') {\n            payload['authKey'] = authKey;\n        }\n\n        if (typeof authKeyId !== 'undefined') {\n            payload['authKeyId'] = authKeyId;\n        }\n\n        if (typeof teamId !== 'undefined') {\n            payload['teamId'] = teamId;\n        }\n\n        if (typeof bundleId !== 'undefined') {\n            payload['bundleId'] = bundleId;\n        }\n\n        if (typeof sandbox !== 'undefined') {\n            payload['sandbox'] = sandbox;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update APNS provider\n     *\n     * Update a Apple Push Notification service provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} authKey\n     * @param {string} authKeyId\n     * @param {string} teamId\n     * @param {string} bundleId\n     * @param {boolean} sandbox\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateApnsProvider(providerId, name, enabled, authKey, authKeyId, teamId, bundleId, sandbox) {\n        const apiPath = '/messaging/providers/apns/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof authKey !== 'undefined') {\n            payload['authKey'] = authKey;\n        }\n\n        if (typeof authKeyId !== 'undefined') {\n            payload['authKeyId'] = authKeyId;\n        }\n\n        if (typeof teamId !== 'undefined') {\n            payload['teamId'] = teamId;\n        }\n\n        if (typeof bundleId !== 'undefined') {\n            payload['bundleId'] = bundleId;\n        }\n\n        if (typeof sandbox !== 'undefined') {\n            payload['sandbox'] = sandbox;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create FCM provider\n     *\n     * Create a new Firebase Cloud Messaging provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {object} serviceAccountJSON\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createFcmProvider(providerId, name, serviceAccountJSON, enabled) {\n        const apiPath = '/messaging/providers/fcm';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof serviceAccountJSON !== 'undefined') {\n            payload['serviceAccountJSON'] = serviceAccountJSON;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update FCM provider\n     *\n     * Update a Firebase Cloud Messaging provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {object} serviceAccountJSON\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateFcmProvider(providerId, name, enabled, serviceAccountJSON) {\n        const apiPath = '/messaging/providers/fcm/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof serviceAccountJSON !== 'undefined') {\n            payload['serviceAccountJSON'] = serviceAccountJSON;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create Mailgun provider\n     *\n     * Create a new Mailgun provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} apiKey\n     * @param {string} domain\n     * @param {boolean} isEuRegion\n     * @param {string} fromName\n     * @param {string} fromEmail\n     * @param {string} replyToName\n     * @param {string} replyToEmail\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createMailgunProvider(providerId, name, apiKey, domain, isEuRegion, fromName, fromEmail, replyToName, replyToEmail, enabled) {\n        const apiPath = '/messaging/providers/mailgun';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof domain !== 'undefined') {\n            payload['domain'] = domain;\n        }\n\n        if (typeof isEuRegion !== 'undefined') {\n            payload['isEuRegion'] = isEuRegion;\n        }\n\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update Mailgun provider\n     *\n     * Update a Mailgun provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} apiKey\n     * @param {string} domain\n     * @param {boolean} isEuRegion\n     * @param {boolean} enabled\n     * @param {string} fromName\n     * @param {string} fromEmail\n     * @param {string} replyToName\n     * @param {string} replyToEmail\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMailgunProvider(providerId, name, apiKey, domain, isEuRegion, enabled, fromName, fromEmail, replyToName, replyToEmail) {\n        const apiPath = '/messaging/providers/mailgun/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof domain !== 'undefined') {\n            payload['domain'] = domain;\n        }\n\n        if (typeof isEuRegion !== 'undefined') {\n            payload['isEuRegion'] = isEuRegion;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create Msg91 provider\n     *\n     * Create a new MSG91 provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} templateId\n     * @param {string} senderId\n     * @param {string} authKey\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createMsg91Provider(providerId, name, templateId, senderId, authKey, enabled) {\n        const apiPath = '/messaging/providers/msg91';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof templateId !== 'undefined') {\n            payload['templateId'] = templateId;\n        }\n\n        if (typeof senderId !== 'undefined') {\n            payload['senderId'] = senderId;\n        }\n\n        if (typeof authKey !== 'undefined') {\n            payload['authKey'] = authKey;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update Msg91 provider\n     *\n     * Update a MSG91 provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} templateId\n     * @param {string} senderId\n     * @param {string} authKey\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMsg91Provider(providerId, name, enabled, templateId, senderId, authKey) {\n        const apiPath = '/messaging/providers/msg91/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof templateId !== 'undefined') {\n            payload['templateId'] = templateId;\n        }\n\n        if (typeof senderId !== 'undefined') {\n            payload['senderId'] = senderId;\n        }\n\n        if (typeof authKey !== 'undefined') {\n            payload['authKey'] = authKey;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create Sendgrid provider\n     *\n     * Create a new Sendgrid provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} apiKey\n     * @param {string} fromName\n     * @param {string} fromEmail\n     * @param {string} replyToName\n     * @param {string} replyToEmail\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createSendgridProvider(providerId, name, apiKey, fromName, fromEmail, replyToName, replyToEmail, enabled) {\n        const apiPath = '/messaging/providers/sendgrid';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update Sendgrid provider\n     *\n     * Update a Sendgrid provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} apiKey\n     * @param {string} fromName\n     * @param {string} fromEmail\n     * @param {string} replyToName\n     * @param {string} replyToEmail\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateSendgridProvider(providerId, name, enabled, apiKey, fromName, fromEmail, replyToName, replyToEmail) {\n        const apiPath = '/messaging/providers/sendgrid/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create SMTP provider\n     *\n     * Create a new SMTP provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} host\n     * @param {number} port\n     * @param {string} username\n     * @param {string} password\n     * @param {SmtpEncryption} encryption\n     * @param {boolean} autoTLS\n     * @param {string} mailer\n     * @param {string} fromName\n     * @param {string} fromEmail\n     * @param {string} replyToName\n     * @param {string} replyToEmail\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createSmtpProvider(providerId, name, host, port, username, password, encryption, autoTLS, mailer, fromName, fromEmail, replyToName, replyToEmail, enabled) {\n        const apiPath = '/messaging/providers/smtp';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n        if (typeof host === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"host\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof host !== 'undefined') {\n            payload['host'] = host;\n        }\n\n        if (typeof port !== 'undefined') {\n            payload['port'] = port;\n        }\n\n        if (typeof username !== 'undefined') {\n            payload['username'] = username;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof encryption !== 'undefined') {\n            payload['encryption'] = encryption;\n        }\n\n        if (typeof autoTLS !== 'undefined') {\n            payload['autoTLS'] = autoTLS;\n        }\n\n        if (typeof mailer !== 'undefined') {\n            payload['mailer'] = mailer;\n        }\n\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update SMTP provider\n     *\n     * Update a SMTP provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} host\n     * @param {number} port\n     * @param {string} username\n     * @param {string} password\n     * @param {SmtpEncryption} encryption\n     * @param {boolean} autoTLS\n     * @param {string} mailer\n     * @param {string} fromName\n     * @param {string} fromEmail\n     * @param {string} replyToName\n     * @param {string} replyToEmail\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateSmtpProvider(providerId, name, host, port, username, password, encryption, autoTLS, mailer, fromName, fromEmail, replyToName, replyToEmail, enabled) {\n        const apiPath = '/messaging/providers/smtp/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof host !== 'undefined') {\n            payload['host'] = host;\n        }\n\n        if (typeof port !== 'undefined') {\n            payload['port'] = port;\n        }\n\n        if (typeof username !== 'undefined') {\n            payload['username'] = username;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof encryption !== 'undefined') {\n            payload['encryption'] = encryption;\n        }\n\n        if (typeof autoTLS !== 'undefined') {\n            payload['autoTLS'] = autoTLS;\n        }\n\n        if (typeof mailer !== 'undefined') {\n            payload['mailer'] = mailer;\n        }\n\n        if (typeof fromName !== 'undefined') {\n            payload['fromName'] = fromName;\n        }\n\n        if (typeof fromEmail !== 'undefined') {\n            payload['fromEmail'] = fromEmail;\n        }\n\n        if (typeof replyToName !== 'undefined') {\n            payload['replyToName'] = replyToName;\n        }\n\n        if (typeof replyToEmail !== 'undefined') {\n            payload['replyToEmail'] = replyToEmail;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create Telesign provider\n     *\n     * Create a new Telesign provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} from\n     * @param {string} customerId\n     * @param {string} apiKey\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createTelesignProvider(providerId, name, from, customerId, apiKey, enabled) {\n        const apiPath = '/messaging/providers/telesign';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n\n        if (typeof customerId !== 'undefined') {\n            payload['customerId'] = customerId;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update Telesign provider\n     *\n     * Update a Telesign provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} customerId\n     * @param {string} apiKey\n     * @param {string} from\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateTelesignProvider(providerId, name, enabled, customerId, apiKey, from) {\n        const apiPath = '/messaging/providers/telesign/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof customerId !== 'undefined') {\n            payload['customerId'] = customerId;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create Textmagic provider\n     *\n     * Create a new Textmagic provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} from\n     * @param {string} username\n     * @param {string} apiKey\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createTextmagicProvider(providerId, name, from, username, apiKey, enabled) {\n        const apiPath = '/messaging/providers/textmagic';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n\n        if (typeof username !== 'undefined') {\n            payload['username'] = username;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update Textmagic provider\n     *\n     * Update a Textmagic provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} username\n     * @param {string} apiKey\n     * @param {string} from\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateTextmagicProvider(providerId, name, enabled, username, apiKey, from) {\n        const apiPath = '/messaging/providers/textmagic/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof username !== 'undefined') {\n            payload['username'] = username;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create Twilio provider\n     *\n     * Create a new Twilio provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} from\n     * @param {string} accountSid\n     * @param {string} authToken\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createTwilioProvider(providerId, name, from, accountSid, authToken, enabled) {\n        const apiPath = '/messaging/providers/twilio';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n\n        if (typeof accountSid !== 'undefined') {\n            payload['accountSid'] = accountSid;\n        }\n\n        if (typeof authToken !== 'undefined') {\n            payload['authToken'] = authToken;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update Twilio provider\n     *\n     * Update a Twilio provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} accountSid\n     * @param {string} authToken\n     * @param {string} from\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateTwilioProvider(providerId, name, enabled, accountSid, authToken, from) {\n        const apiPath = '/messaging/providers/twilio/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof accountSid !== 'undefined') {\n            payload['accountSid'] = accountSid;\n        }\n\n        if (typeof authToken !== 'undefined') {\n            payload['authToken'] = authToken;\n        }\n\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create Vonage provider\n     *\n     * Create a new Vonage provider.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {string} from\n     * @param {string} apiKey\n     * @param {string} apiSecret\n     * @param {boolean} enabled\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createVonageProvider(providerId, name, from, apiKey, apiSecret, enabled) {\n        const apiPath = '/messaging/providers/vonage';\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof apiSecret !== 'undefined') {\n            payload['apiSecret'] = apiSecret;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update Vonage provider\n     *\n     * Update a Vonage provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string} name\n     * @param {boolean} enabled\n     * @param {string} apiKey\n     * @param {string} apiSecret\n     * @param {string} from\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateVonageProvider(providerId, name, enabled, apiKey, apiSecret, from) {\n        const apiPath = '/messaging/providers/vonage/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof apiKey !== 'undefined') {\n            payload['apiKey'] = apiKey;\n        }\n\n        if (typeof apiSecret !== 'undefined') {\n            payload['apiSecret'] = apiSecret;\n        }\n\n        if (typeof from !== 'undefined') {\n            payload['from'] = from;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get provider\n     *\n     * Get a provider by its unique ID.\n     * \n     *\n     * @param {string} providerId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getProvider(providerId) {\n        const apiPath = '/messaging/providers/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete provider\n     *\n     * Delete a provider by its unique ID.\n     *\n     * @param {string} providerId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteProvider(providerId) {\n        const apiPath = '/messaging/providers/{providerId}'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List provider logs\n     *\n     * Get the provider activity logs listed by its unique ID.\n     *\n     * @param {string} providerId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listProviderLogs(providerId, queries) {\n        const apiPath = '/messaging/providers/{providerId}/logs'.replace('{providerId}', providerId);\n        let payload = {};\n        if (typeof providerId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List subscriber logs\n     *\n     * Get the subscriber activity logs listed by its unique ID.\n     *\n     * @param {string} subscriberId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listSubscriberLogs(subscriberId, queries) {\n        const apiPath = '/messaging/subscribers/{subscriberId}/logs'.replace('{subscriberId}', subscriberId);\n        let payload = {};\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List topics\n     *\n     * Get a list of all topics from the current Appwrite project.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listTopics(queries, search) {\n        const apiPath = '/messaging/topics';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create topic\n     *\n     * Create a new topic.\n     *\n     * @param {string} topicId\n     * @param {string} name\n     * @param {string[]} subscribe\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createTopic(topicId, name, subscribe) {\n        const apiPath = '/messaging/topics';\n        let payload = {};\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof topicId !== 'undefined') {\n            payload['topicId'] = topicId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof subscribe !== 'undefined') {\n            payload['subscribe'] = subscribe;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get topic\n     *\n     * Get a topic by its unique ID.\n     * \n     *\n     * @param {string} topicId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getTopic(topicId) {\n        const apiPath = '/messaging/topics/{topicId}'.replace('{topicId}', topicId);\n        let payload = {};\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update topic\n     *\n     * Update a topic by its unique ID.\n     * \n     *\n     * @param {string} topicId\n     * @param {string} name\n     * @param {string[]} subscribe\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateTopic(topicId, name, subscribe) {\n        const apiPath = '/messaging/topics/{topicId}'.replace('{topicId}', topicId);\n        let payload = {};\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof subscribe !== 'undefined') {\n            payload['subscribe'] = subscribe;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete topic\n     *\n     * Delete a topic by its unique ID.\n     *\n     * @param {string} topicId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteTopic(topicId) {\n        const apiPath = '/messaging/topics/{topicId}'.replace('{topicId}', topicId);\n        let payload = {};\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List topic logs\n     *\n     * Get the topic activity logs listed by its unique ID.\n     *\n     * @param {string} topicId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listTopicLogs(topicId, queries) {\n        const apiPath = '/messaging/topics/{topicId}/logs'.replace('{topicId}', topicId);\n        let payload = {};\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List subscribers\n     *\n     * Get a list of all subscribers from the current Appwrite project.\n     *\n     * @param {string} topicId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listSubscribers(topicId, queries, search) {\n        const apiPath = '/messaging/topics/{topicId}/subscribers'.replace('{topicId}', topicId);\n        let payload = {};\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create subscriber\n     *\n     * Create a new subscriber.\n     *\n     * @param {string} topicId\n     * @param {string} subscriberId\n     * @param {string} targetId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createSubscriber(topicId, subscriberId, targetId) {\n        const apiPath = '/messaging/topics/{topicId}/subscribers'.replace('{topicId}', topicId);\n        let payload = {};\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n\n        if (typeof subscriberId !== 'undefined') {\n            payload['subscriberId'] = subscriberId;\n        }\n\n        if (typeof targetId !== 'undefined') {\n            payload['targetId'] = targetId;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get subscriber\n     *\n     * Get a subscriber by its unique ID.\n     * \n     *\n     * @param {string} topicId\n     * @param {string} subscriberId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getSubscriber(topicId, subscriberId) {\n        const apiPath = '/messaging/topics/{topicId}/subscribers/{subscriberId}'.replace('{topicId}', topicId).replace('{subscriberId}', subscriberId);\n        let payload = {};\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete subscriber\n     *\n     * Delete a subscriber by its unique ID.\n     *\n     * @param {string} topicId\n     * @param {string} subscriberId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteSubscriber(topicId, subscriberId) {\n        const apiPath = '/messaging/topics/{topicId}/subscribers/{subscriberId}'.replace('{topicId}', topicId).replace('{subscriberId}', subscriberId);\n        let payload = {};\n        if (typeof topicId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"topicId\"');\n        }\n\n        if (typeof subscriberId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n}\n\nmodule.exports = Messaging;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/messaging.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/services/storage.js":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/storage.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(action-browser)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(action-browser)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(action-browser)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(action-browser)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(action-browser)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Storage extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * List buckets\n     *\n     * Get a list of all the storage buckets. You can use the query params to\n     * filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listBuckets(queries, search) {\n        const apiPath = '/storage/buckets';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create bucket\n     *\n     * Create a new storage bucket.\n     *\n     * @param {string} bucketId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @param {boolean} fileSecurity\n     * @param {boolean} enabled\n     * @param {number} maximumFileSize\n     * @param {string[]} allowedFileExtensions\n     * @param {Compression} compression\n     * @param {boolean} encryption\n     * @param {boolean} antivirus\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createBucket(bucketId, name, permissions, fileSecurity, enabled, maximumFileSize, allowedFileExtensions, compression, encryption, antivirus) {\n        const apiPath = '/storage/buckets';\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof bucketId !== 'undefined') {\n            payload['bucketId'] = bucketId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        if (typeof fileSecurity !== 'undefined') {\n            payload['fileSecurity'] = fileSecurity;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof maximumFileSize !== 'undefined') {\n            payload['maximumFileSize'] = maximumFileSize;\n        }\n\n        if (typeof allowedFileExtensions !== 'undefined') {\n            payload['allowedFileExtensions'] = allowedFileExtensions;\n        }\n\n        if (typeof compression !== 'undefined') {\n            payload['compression'] = compression;\n        }\n\n        if (typeof encryption !== 'undefined') {\n            payload['encryption'] = encryption;\n        }\n\n        if (typeof antivirus !== 'undefined') {\n            payload['antivirus'] = antivirus;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get bucket\n     *\n     * Get a storage bucket by its unique ID. This endpoint response returns a\n     * JSON object with the storage bucket metadata.\n     *\n     * @param {string} bucketId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getBucket(bucketId) {\n        const apiPath = '/storage/buckets/{bucketId}'.replace('{bucketId}', bucketId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update bucket\n     *\n     * Update a storage bucket by its unique ID.\n     *\n     * @param {string} bucketId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @param {boolean} fileSecurity\n     * @param {boolean} enabled\n     * @param {number} maximumFileSize\n     * @param {string[]} allowedFileExtensions\n     * @param {Compression} compression\n     * @param {boolean} encryption\n     * @param {boolean} antivirus\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateBucket(bucketId, name, permissions, fileSecurity, enabled, maximumFileSize, allowedFileExtensions, compression, encryption, antivirus) {\n        const apiPath = '/storage/buckets/{bucketId}'.replace('{bucketId}', bucketId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        if (typeof fileSecurity !== 'undefined') {\n            payload['fileSecurity'] = fileSecurity;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof maximumFileSize !== 'undefined') {\n            payload['maximumFileSize'] = maximumFileSize;\n        }\n\n        if (typeof allowedFileExtensions !== 'undefined') {\n            payload['allowedFileExtensions'] = allowedFileExtensions;\n        }\n\n        if (typeof compression !== 'undefined') {\n            payload['compression'] = compression;\n        }\n\n        if (typeof encryption !== 'undefined') {\n            payload['encryption'] = encryption;\n        }\n\n        if (typeof antivirus !== 'undefined') {\n            payload['antivirus'] = antivirus;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete bucket\n     *\n     * Delete a storage bucket by its unique ID.\n     *\n     * @param {string} bucketId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteBucket(bucketId) {\n        const apiPath = '/storage/buckets/{bucketId}'.replace('{bucketId}', bucketId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List files\n     *\n     * Get a list of all the user files. You can use the query params to filter\n     * your results.\n     *\n     * @param {string} bucketId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listFiles(bucketId, queries, search) {\n        const apiPath = '/storage/buckets/{bucketId}/files'.replace('{bucketId}', bucketId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create file\n     *\n     * Create a new file. Before using this route, you should create a new bucket\n     * resource using either a [server\n     * integration](https://appwrite.io/docs/server/storage#storageCreateBucket)\n     * API or directly from your Appwrite console.\n     * \n     * Larger files should be uploaded using multiple requests with the\n     * [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range)\n     * header to send a partial request with a maximum supported chunk of `5MB`.\n     * The `content-range` header values should always be in bytes.\n     * \n     * When the first request is sent, the server will return the **File** object,\n     * and the subsequent part request must include the file's **id** in\n     * `x-appwrite-id` header to allow the server to know that the partial upload\n     * is for the existing file and not for a new one.\n     * \n     * If you're creating a new file using one of the Appwrite SDKs, all the\n     * chunking logic will be managed by the SDK internally.\n     * \n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @param {InputFile} file\n     * @param {string[]} permissions\n     * @param {CallableFunction} onProgress\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createFile(bucketId, fileId, file, permissions, onProgress = () => {}) {\n        const apiPath = '/storage/buckets/{bucketId}/files'.replace('{bucketId}', bucketId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        if (typeof file === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"file\"');\n        }\n\n\n        if (typeof fileId !== 'undefined') {\n            payload['fileId'] = fileId;\n        }\n\n        if (typeof file !== 'undefined') {\n            payload['file'] = file;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n\n        const size = file.size;\n        \n        const apiHeaders = {\n            'content-type': 'multipart/form-data',\n        };\n\n        let id = undefined;\n        let response = undefined;\n\n        let chunksUploaded = 0;\n\n        if(fileId != 'unique()') {\n            try {\n                response = await this.client.call('get', apiPath + '/' + fileId, apiHeaders);\n                chunksUploaded = response.chunksUploaded;\n            } catch(e) {\n            }\n        }\n\n        let currentChunk = 1;\n        let currentPosition = 0;\n        let uploadableChunk = new Uint8Array(client.CHUNK_SIZE);\n    \n\n        const uploadChunk = async (lastUpload = false) => {\n            if(currentChunk <= chunksUploaded) {\n                return;\n            }\n\n            const start = ((currentChunk - 1) * client.CHUNK_SIZE);\n            let end = start + currentPosition - 1;\n\n            if(!lastUpload || currentChunk !== 1) {\n                apiHeaders['content-range'] = 'bytes ' + start + '-' + end + '/' + size;\n            }\n\n            let uploadableChunkTrimmed;\n            \n            if(currentPosition + 1 >= client.CHUNK_SIZE) {\n                uploadableChunkTrimmed = uploadableChunk;\n            } else {\n                uploadableChunkTrimmed = new Uint8Array(currentPosition);\n                for(let i = 0; i <= currentPosition; i++) {\n                    uploadableChunkTrimmed[i] = uploadableChunk[i];\n                }\n            }\n\n            if (id) {\n                apiHeaders['x-appwrite-id'] = id;\n            }\n\n            payload['file'] = { type: 'file', file: new File([uploadableChunkTrimmed], file.filename), filename: file.filename };\n\n            response = await this.client.call('post', apiPath, apiHeaders, payload);\n\n            if (!id) {\n                id = response['$id'];\n            }\n\n            if (onProgress !== null) {\n                onProgress({\n                    $id: response['$id'],\n                    progress: Math.min((currentChunk) * client.CHUNK_SIZE, size) / size * 100,\n                    sizeUploaded: end+1,\n                    chunksTotal: response['chunksTotal'],\n                    chunksUploaded: response['chunksUploaded']\n                });\n            }\n\n            uploadableChunk = new Uint8Array(client.CHUNK_SIZE);\n            currentChunk++;\n            currentPosition = 0;\n        }\n\n        for await (const chunk of file.stream) {\n            for(const b of chunk) {\n                uploadableChunk[currentPosition] = b;\n\n                currentPosition++;\n                if(currentPosition >= client.CHUNK_SIZE) {\n                    await uploadChunk();\n                    currentPosition = 0;\n                }\n            }\n        }\n\n        if (currentPosition > 0) { // Check if there's any remaining data for the last chunk\n            await uploadChunk(true);\n        }\n\n        return response;\n\n    }\n\n    /**\n     * Get file\n     *\n     * Get a file by its unique ID. This endpoint response returns a JSON object\n     * with the file metadata.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getFile(bucketId, fileId) {\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update file\n     *\n     * Update a file by its unique ID. Only users with write permissions have\n     * access to update this resource.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateFile(bucketId, fileId, name, permissions) {\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete File\n     *\n     * Delete a file by its unique ID. Only users with write permissions have\n     * access to delete this resource.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteFile(bucketId, fileId) {\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get file for download\n     *\n     * Get a file content by its unique ID. The endpoint response return with a\n     * 'Content-Disposition: attachment' header that tells the browser to start\n     * downloading the file to user downloads directory.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getFileDownload(bucketId, fileId) {\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}/download'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n\n    /**\n     * Get file preview\n     *\n     * Get a file preview image. Currently, this method supports preview for image\n     * files (jpg, png, and gif), other supported formats, like pdf, docs, slides,\n     * and spreadsheets, will return the file icon image. You can also pass query\n     * string arguments for cutting and resizing your preview image. Preview is\n     * supported only for image files smaller than 10MB.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @param {number} width\n     * @param {number} height\n     * @param {ImageGravity} gravity\n     * @param {number} quality\n     * @param {number} borderWidth\n     * @param {string} borderColor\n     * @param {number} borderRadius\n     * @param {number} opacity\n     * @param {number} rotation\n     * @param {string} background\n     * @param {ImageFormat} output\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getFilePreview(bucketId, fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output) {\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}/preview'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof gravity !== 'undefined') {\n            payload['gravity'] = gravity;\n        }\n\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n\n        if (typeof borderWidth !== 'undefined') {\n            payload['borderWidth'] = borderWidth;\n        }\n\n        if (typeof borderColor !== 'undefined') {\n            payload['borderColor'] = borderColor;\n        }\n\n        if (typeof borderRadius !== 'undefined') {\n            payload['borderRadius'] = borderRadius;\n        }\n\n        if (typeof opacity !== 'undefined') {\n            payload['opacity'] = opacity;\n        }\n\n        if (typeof rotation !== 'undefined') {\n            payload['rotation'] = rotation;\n        }\n\n        if (typeof background !== 'undefined') {\n            payload['background'] = background;\n        }\n\n        if (typeof output !== 'undefined') {\n            payload['output'] = output;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n\n    /**\n     * Get file for view\n     *\n     * Get a file content by its unique ID. This endpoint is similar to the\n     * download method but returns with no  'Content-Disposition: attachment'\n     * header.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getFileView(bucketId, fileId) {\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}/view'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n}\n\nmodule.exports = Storage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/services/storage.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/storage.js":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/storage.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(rsc)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Storage extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * List buckets\n     *\n     * Get a list of all the storage buckets. You can use the query params to\n     * filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listBuckets(queries, search) {\n        const apiPath = '/storage/buckets';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create bucket\n     *\n     * Create a new storage bucket.\n     *\n     * @param {string} bucketId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @param {boolean} fileSecurity\n     * @param {boolean} enabled\n     * @param {number} maximumFileSize\n     * @param {string[]} allowedFileExtensions\n     * @param {Compression} compression\n     * @param {boolean} encryption\n     * @param {boolean} antivirus\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createBucket(bucketId, name, permissions, fileSecurity, enabled, maximumFileSize, allowedFileExtensions, compression, encryption, antivirus) {\n        const apiPath = '/storage/buckets';\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof bucketId !== 'undefined') {\n            payload['bucketId'] = bucketId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        if (typeof fileSecurity !== 'undefined') {\n            payload['fileSecurity'] = fileSecurity;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof maximumFileSize !== 'undefined') {\n            payload['maximumFileSize'] = maximumFileSize;\n        }\n\n        if (typeof allowedFileExtensions !== 'undefined') {\n            payload['allowedFileExtensions'] = allowedFileExtensions;\n        }\n\n        if (typeof compression !== 'undefined') {\n            payload['compression'] = compression;\n        }\n\n        if (typeof encryption !== 'undefined') {\n            payload['encryption'] = encryption;\n        }\n\n        if (typeof antivirus !== 'undefined') {\n            payload['antivirus'] = antivirus;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get bucket\n     *\n     * Get a storage bucket by its unique ID. This endpoint response returns a\n     * JSON object with the storage bucket metadata.\n     *\n     * @param {string} bucketId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getBucket(bucketId) {\n        const apiPath = '/storage/buckets/{bucketId}'.replace('{bucketId}', bucketId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update bucket\n     *\n     * Update a storage bucket by its unique ID.\n     *\n     * @param {string} bucketId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @param {boolean} fileSecurity\n     * @param {boolean} enabled\n     * @param {number} maximumFileSize\n     * @param {string[]} allowedFileExtensions\n     * @param {Compression} compression\n     * @param {boolean} encryption\n     * @param {boolean} antivirus\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateBucket(bucketId, name, permissions, fileSecurity, enabled, maximumFileSize, allowedFileExtensions, compression, encryption, antivirus) {\n        const apiPath = '/storage/buckets/{bucketId}'.replace('{bucketId}', bucketId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        if (typeof fileSecurity !== 'undefined') {\n            payload['fileSecurity'] = fileSecurity;\n        }\n\n        if (typeof enabled !== 'undefined') {\n            payload['enabled'] = enabled;\n        }\n\n        if (typeof maximumFileSize !== 'undefined') {\n            payload['maximumFileSize'] = maximumFileSize;\n        }\n\n        if (typeof allowedFileExtensions !== 'undefined') {\n            payload['allowedFileExtensions'] = allowedFileExtensions;\n        }\n\n        if (typeof compression !== 'undefined') {\n            payload['compression'] = compression;\n        }\n\n        if (typeof encryption !== 'undefined') {\n            payload['encryption'] = encryption;\n        }\n\n        if (typeof antivirus !== 'undefined') {\n            payload['antivirus'] = antivirus;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete bucket\n     *\n     * Delete a storage bucket by its unique ID.\n     *\n     * @param {string} bucketId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteBucket(bucketId) {\n        const apiPath = '/storage/buckets/{bucketId}'.replace('{bucketId}', bucketId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List files\n     *\n     * Get a list of all the user files. You can use the query params to filter\n     * your results.\n     *\n     * @param {string} bucketId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listFiles(bucketId, queries, search) {\n        const apiPath = '/storage/buckets/{bucketId}/files'.replace('{bucketId}', bucketId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create file\n     *\n     * Create a new file. Before using this route, you should create a new bucket\n     * resource using either a [server\n     * integration](https://appwrite.io/docs/server/storage#storageCreateBucket)\n     * API or directly from your Appwrite console.\n     * \n     * Larger files should be uploaded using multiple requests with the\n     * [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range)\n     * header to send a partial request with a maximum supported chunk of `5MB`.\n     * The `content-range` header values should always be in bytes.\n     * \n     * When the first request is sent, the server will return the **File** object,\n     * and the subsequent part request must include the file's **id** in\n     * `x-appwrite-id` header to allow the server to know that the partial upload\n     * is for the existing file and not for a new one.\n     * \n     * If you're creating a new file using one of the Appwrite SDKs, all the\n     * chunking logic will be managed by the SDK internally.\n     * \n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @param {InputFile} file\n     * @param {string[]} permissions\n     * @param {CallableFunction} onProgress\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createFile(bucketId, fileId, file, permissions, onProgress = () => {}) {\n        const apiPath = '/storage/buckets/{bucketId}/files'.replace('{bucketId}', bucketId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n        if (typeof file === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"file\"');\n        }\n\n\n        if (typeof fileId !== 'undefined') {\n            payload['fileId'] = fileId;\n        }\n\n        if (typeof file !== 'undefined') {\n            payload['file'] = file;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n\n        const size = file.size;\n        \n        const apiHeaders = {\n            'content-type': 'multipart/form-data',\n        };\n\n        let id = undefined;\n        let response = undefined;\n\n        let chunksUploaded = 0;\n\n        if(fileId != 'unique()') {\n            try {\n                response = await this.client.call('get', apiPath + '/' + fileId, apiHeaders);\n                chunksUploaded = response.chunksUploaded;\n            } catch(e) {\n            }\n        }\n\n        let currentChunk = 1;\n        let currentPosition = 0;\n        let uploadableChunk = new Uint8Array(client.CHUNK_SIZE);\n    \n\n        const uploadChunk = async (lastUpload = false) => {\n            if(currentChunk <= chunksUploaded) {\n                return;\n            }\n\n            const start = ((currentChunk - 1) * client.CHUNK_SIZE);\n            let end = start + currentPosition - 1;\n\n            if(!lastUpload || currentChunk !== 1) {\n                apiHeaders['content-range'] = 'bytes ' + start + '-' + end + '/' + size;\n            }\n\n            let uploadableChunkTrimmed;\n            \n            if(currentPosition + 1 >= client.CHUNK_SIZE) {\n                uploadableChunkTrimmed = uploadableChunk;\n            } else {\n                uploadableChunkTrimmed = new Uint8Array(currentPosition);\n                for(let i = 0; i <= currentPosition; i++) {\n                    uploadableChunkTrimmed[i] = uploadableChunk[i];\n                }\n            }\n\n            if (id) {\n                apiHeaders['x-appwrite-id'] = id;\n            }\n\n            payload['file'] = { type: 'file', file: new File([uploadableChunkTrimmed], file.filename), filename: file.filename };\n\n            response = await this.client.call('post', apiPath, apiHeaders, payload);\n\n            if (!id) {\n                id = response['$id'];\n            }\n\n            if (onProgress !== null) {\n                onProgress({\n                    $id: response['$id'],\n                    progress: Math.min((currentChunk) * client.CHUNK_SIZE, size) / size * 100,\n                    sizeUploaded: end+1,\n                    chunksTotal: response['chunksTotal'],\n                    chunksUploaded: response['chunksUploaded']\n                });\n            }\n\n            uploadableChunk = new Uint8Array(client.CHUNK_SIZE);\n            currentChunk++;\n            currentPosition = 0;\n        }\n\n        for await (const chunk of file.stream) {\n            for(const b of chunk) {\n                uploadableChunk[currentPosition] = b;\n\n                currentPosition++;\n                if(currentPosition >= client.CHUNK_SIZE) {\n                    await uploadChunk();\n                    currentPosition = 0;\n                }\n            }\n        }\n\n        if (currentPosition > 0) { // Check if there's any remaining data for the last chunk\n            await uploadChunk(true);\n        }\n\n        return response;\n\n    }\n\n    /**\n     * Get file\n     *\n     * Get a file by its unique ID. This endpoint response returns a JSON object\n     * with the file metadata.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getFile(bucketId, fileId) {\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update file\n     *\n     * Update a file by its unique ID. Only users with write permissions have\n     * access to update this resource.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @param {string} name\n     * @param {string[]} permissions\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateFile(bucketId, fileId, name, permissions) {\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof permissions !== 'undefined') {\n            payload['permissions'] = permissions;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete File\n     *\n     * Delete a file by its unique ID. Only users with write permissions have\n     * access to delete this resource.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteFile(bucketId, fileId) {\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get file for download\n     *\n     * Get a file content by its unique ID. The endpoint response return with a\n     * 'Content-Disposition: attachment' header that tells the browser to start\n     * downloading the file to user downloads directory.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getFileDownload(bucketId, fileId) {\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}/download'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n\n    /**\n     * Get file preview\n     *\n     * Get a file preview image. Currently, this method supports preview for image\n     * files (jpg, png, and gif), other supported formats, like pdf, docs, slides,\n     * and spreadsheets, will return the file icon image. You can also pass query\n     * string arguments for cutting and resizing your preview image. Preview is\n     * supported only for image files smaller than 10MB.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @param {number} width\n     * @param {number} height\n     * @param {ImageGravity} gravity\n     * @param {number} quality\n     * @param {number} borderWidth\n     * @param {string} borderColor\n     * @param {number} borderRadius\n     * @param {number} opacity\n     * @param {number} rotation\n     * @param {string} background\n     * @param {ImageFormat} output\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getFilePreview(bucketId, fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output) {\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}/preview'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n\n        if (typeof width !== 'undefined') {\n            payload['width'] = width;\n        }\n\n        if (typeof height !== 'undefined') {\n            payload['height'] = height;\n        }\n\n        if (typeof gravity !== 'undefined') {\n            payload['gravity'] = gravity;\n        }\n\n        if (typeof quality !== 'undefined') {\n            payload['quality'] = quality;\n        }\n\n        if (typeof borderWidth !== 'undefined') {\n            payload['borderWidth'] = borderWidth;\n        }\n\n        if (typeof borderColor !== 'undefined') {\n            payload['borderColor'] = borderColor;\n        }\n\n        if (typeof borderRadius !== 'undefined') {\n            payload['borderRadius'] = borderRadius;\n        }\n\n        if (typeof opacity !== 'undefined') {\n            payload['opacity'] = opacity;\n        }\n\n        if (typeof rotation !== 'undefined') {\n            payload['rotation'] = rotation;\n        }\n\n        if (typeof background !== 'undefined') {\n            payload['background'] = background;\n        }\n\n        if (typeof output !== 'undefined') {\n            payload['output'] = output;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n\n    /**\n     * Get file for view\n     *\n     * Get a file content by its unique ID. This endpoint is similar to the\n     * download method but returns with no  'Content-Disposition: attachment'\n     * header.\n     *\n     * @param {string} bucketId\n     * @param {string} fileId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getFileView(bucketId, fileId) {\n        const apiPath = '/storage/buckets/{bucketId}/files/{fileId}/view'.replace('{bucketId}', bucketId).replace('{fileId}', fileId);\n        let payload = {};\n        if (typeof bucketId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n\n        if (typeof fileId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"fileId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload, 'arraybuffer');\n    }\n}\n\nmodule.exports = Storage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/storage.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/services/teams.js":
/*!**********************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/teams.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(action-browser)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(action-browser)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(action-browser)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(action-browser)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(action-browser)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Teams extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * List teams\n     *\n     * Get a list of all the teams in which the current user is a member. You can\n     * use the parameters to filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async list(queries, search) {\n        const apiPath = '/teams';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create team\n     *\n     * Create a new team. The user who creates the team will automatically be\n     * assigned as the owner of the team. Only the users with the owner role can\n     * invite new members, add new owners and delete or update the team.\n     *\n     * @param {string} teamId\n     * @param {string} name\n     * @param {string[]} roles\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async create(teamId, name, roles) {\n        const apiPath = '/teams';\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof teamId !== 'undefined') {\n            payload['teamId'] = teamId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof roles !== 'undefined') {\n            payload['roles'] = roles;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get team\n     *\n     * Get a team by its ID. All team members have read access for this resource.\n     *\n     * @param {string} teamId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async get(teamId) {\n        const apiPath = '/teams/{teamId}'.replace('{teamId}', teamId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update name\n     *\n     * Update the team's name by its unique ID.\n     *\n     * @param {string} teamId\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateName(teamId, name) {\n        const apiPath = '/teams/{teamId}'.replace('{teamId}', teamId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete team\n     *\n     * Delete a team using its ID. Only team members with the owner role can\n     * delete the team.\n     *\n     * @param {string} teamId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async delete(teamId) {\n        const apiPath = '/teams/{teamId}'.replace('{teamId}', teamId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List team memberships\n     *\n     * Use this endpoint to list a team's members using the team's ID. All team\n     * members have read access to this endpoint.\n     *\n     * @param {string} teamId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listMemberships(teamId, queries, search) {\n        const apiPath = '/teams/{teamId}/memberships'.replace('{teamId}', teamId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create team membership\n     *\n     * Invite a new member to join your team. Provide an ID for existing users, or\n     * invite unregistered users using an email or phone number. If initiated from\n     * a Client SDK, Appwrite will send an email or sms with a link to join the\n     * team to the invited user, and an account will be created for them if one\n     * doesn't exist. If initiated from a Server SDK, the new member will be added\n     * automatically to the team.\n     * \n     * You only need to provide one of a user ID, email, or phone number. Appwrite\n     * will prioritize accepting the user ID > email > phone number if you provide\n     * more than one of these parameters.\n     * \n     * Use the `url` parameter to redirect the user from the invitation email to\n     * your app. After the user is redirected, use the [Update Team Membership\n     * Status](https://appwrite.io/docs/references/cloud/client-web/teams#updateMembershipStatus)\n     * endpoint to allow the user to accept the invitation to the team. \n     * \n     * Please note that to avoid a [Redirect\n     * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)\n     * Appwrite will accept the only redirect URLs under the domains you have\n     * added as a platform on the Appwrite Console.\n     * \n     *\n     * @param {string} teamId\n     * @param {string[]} roles\n     * @param {string} email\n     * @param {string} userId\n     * @param {string} phone\n     * @param {string} url\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createMembership(teamId, roles, email, userId, phone, url, name) {\n        const apiPath = '/teams/{teamId}/memberships'.replace('{teamId}', teamId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof roles === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"roles\"');\n        }\n\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n\n        if (typeof roles !== 'undefined') {\n            payload['roles'] = roles;\n        }\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get team membership\n     *\n     * Get a team member by the membership unique id. All team members have read\n     * access for this resource.\n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getMembership(teamId, membershipId) {\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update membership\n     *\n     * Modify the roles of a team member. Only team members with the owner role\n     * have access to this endpoint. Learn more about [roles and\n     * permissions](https://appwrite.io/docs/permissions).\n     * \n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @param {string[]} roles\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMembership(teamId, membershipId, roles) {\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n\n        if (typeof roles === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"roles\"');\n        }\n\n\n        if (typeof roles !== 'undefined') {\n            payload['roles'] = roles;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete team membership\n     *\n     * This endpoint allows a user to leave a team or for a team owner to delete\n     * the membership of any other team member. You can also use this endpoint to\n     * delete a user membership even if it is not accepted.\n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteMembership(teamId, membershipId) {\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update team membership status\n     *\n     * Use this endpoint to allow a user to accept an invitation to join a team\n     * after being redirected back to your app from the invitation email received\n     * by the user.\n     * \n     * If the request is successful, a session for the user is automatically\n     * created.\n     * \n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMembershipStatus(teamId, membershipId, userId, secret) {\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}/status'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get team preferences\n     *\n     * Get the team's shared preferences by its unique ID. If a preference doesn't\n     * need to be shared by all team members, prefer storing them in [user\n     * preferences](https://appwrite.io/docs/references/cloud/client-web/account#getPrefs).\n     *\n     * @param {string} teamId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getPrefs(teamId) {\n        const apiPath = '/teams/{teamId}/prefs'.replace('{teamId}', teamId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update preferences\n     *\n     * Update the team's preferences by its unique ID. The object you pass is\n     * stored as is and replaces any previous value. The maximum allowed prefs\n     * size is 64kB and throws an error if exceeded.\n     *\n     * @param {string} teamId\n     * @param {object} prefs\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePrefs(teamId, prefs) {\n        const apiPath = '/teams/{teamId}/prefs'.replace('{teamId}', teamId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof prefs === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n\n\n        if (typeof prefs !== 'undefined') {\n            payload['prefs'] = prefs;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n}\n\nmodule.exports = Teams;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/services/teams.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/teams.js":
/*!**********************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/teams.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(rsc)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Teams extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * List teams\n     *\n     * Get a list of all the teams in which the current user is a member. You can\n     * use the parameters to filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async list(queries, search) {\n        const apiPath = '/teams';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create team\n     *\n     * Create a new team. The user who creates the team will automatically be\n     * assigned as the owner of the team. Only the users with the owner role can\n     * invite new members, add new owners and delete or update the team.\n     *\n     * @param {string} teamId\n     * @param {string} name\n     * @param {string[]} roles\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async create(teamId, name, roles) {\n        const apiPath = '/teams';\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof teamId !== 'undefined') {\n            payload['teamId'] = teamId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        if (typeof roles !== 'undefined') {\n            payload['roles'] = roles;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get team\n     *\n     * Get a team by its ID. All team members have read access for this resource.\n     *\n     * @param {string} teamId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async get(teamId) {\n        const apiPath = '/teams/{teamId}'.replace('{teamId}', teamId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update name\n     *\n     * Update the team's name by its unique ID.\n     *\n     * @param {string} teamId\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateName(teamId, name) {\n        const apiPath = '/teams/{teamId}'.replace('{teamId}', teamId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete team\n     *\n     * Delete a team using its ID. Only team members with the owner role can\n     * delete the team.\n     *\n     * @param {string} teamId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async delete(teamId) {\n        const apiPath = '/teams/{teamId}'.replace('{teamId}', teamId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List team memberships\n     *\n     * Use this endpoint to list a team's members using the team's ID. All team\n     * members have read access to this endpoint.\n     *\n     * @param {string} teamId\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listMemberships(teamId, queries, search) {\n        const apiPath = '/teams/{teamId}/memberships'.replace('{teamId}', teamId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create team membership\n     *\n     * Invite a new member to join your team. Provide an ID for existing users, or\n     * invite unregistered users using an email or phone number. If initiated from\n     * a Client SDK, Appwrite will send an email or sms with a link to join the\n     * team to the invited user, and an account will be created for them if one\n     * doesn't exist. If initiated from a Server SDK, the new member will be added\n     * automatically to the team.\n     * \n     * You only need to provide one of a user ID, email, or phone number. Appwrite\n     * will prioritize accepting the user ID > email > phone number if you provide\n     * more than one of these parameters.\n     * \n     * Use the `url` parameter to redirect the user from the invitation email to\n     * your app. After the user is redirected, use the [Update Team Membership\n     * Status](https://appwrite.io/docs/references/cloud/client-web/teams#updateMembershipStatus)\n     * endpoint to allow the user to accept the invitation to the team. \n     * \n     * Please note that to avoid a [Redirect\n     * Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md)\n     * Appwrite will accept the only redirect URLs under the domains you have\n     * added as a platform on the Appwrite Console.\n     * \n     *\n     * @param {string} teamId\n     * @param {string[]} roles\n     * @param {string} email\n     * @param {string} userId\n     * @param {string} phone\n     * @param {string} url\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createMembership(teamId, roles, email, userId, phone, url, name) {\n        const apiPath = '/teams/{teamId}/memberships'.replace('{teamId}', teamId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof roles === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"roles\"');\n        }\n\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n\n        if (typeof roles !== 'undefined') {\n            payload['roles'] = roles;\n        }\n\n        if (typeof url !== 'undefined') {\n            payload['url'] = url;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get team membership\n     *\n     * Get a team member by the membership unique id. All team members have read\n     * access for this resource.\n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getMembership(teamId, membershipId) {\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update membership\n     *\n     * Modify the roles of a team member. Only team members with the owner role\n     * have access to this endpoint. Learn more about [roles and\n     * permissions](https://appwrite.io/docs/permissions).\n     * \n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @param {string[]} roles\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMembership(teamId, membershipId, roles) {\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n\n        if (typeof roles === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"roles\"');\n        }\n\n\n        if (typeof roles !== 'undefined') {\n            payload['roles'] = roles;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete team membership\n     *\n     * This endpoint allows a user to leave a team or for a team owner to delete\n     * the membership of any other team member. You can also use this endpoint to\n     * delete a user membership even if it is not accepted.\n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteMembership(teamId, membershipId) {\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update team membership status\n     *\n     * Use this endpoint to allow a user to accept an invitation to join a team\n     * after being redirected back to your app from the invitation email received\n     * by the user.\n     * \n     * If the request is successful, a session for the user is automatically\n     * created.\n     * \n     *\n     * @param {string} teamId\n     * @param {string} membershipId\n     * @param {string} userId\n     * @param {string} secret\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMembershipStatus(teamId, membershipId, userId, secret) {\n        const apiPath = '/teams/{teamId}/memberships/{membershipId}/status'.replace('{teamId}', teamId).replace('{membershipId}', membershipId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof membershipId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof secret === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"secret\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof secret !== 'undefined') {\n            payload['secret'] = secret;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get team preferences\n     *\n     * Get the team's shared preferences by its unique ID. If a preference doesn't\n     * need to be shared by all team members, prefer storing them in [user\n     * preferences](https://appwrite.io/docs/references/cloud/client-web/account#getPrefs).\n     *\n     * @param {string} teamId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getPrefs(teamId) {\n        const apiPath = '/teams/{teamId}/prefs'.replace('{teamId}', teamId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update preferences\n     *\n     * Update the team's preferences by its unique ID. The object you pass is\n     * stored as is and replaces any previous value. The maximum allowed prefs\n     * size is 64kB and throws an error if exceeded.\n     *\n     * @param {string} teamId\n     * @param {object} prefs\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePrefs(teamId, prefs) {\n        const apiPath = '/teams/{teamId}/prefs'.replace('{teamId}', teamId);\n        let payload = {};\n        if (typeof teamId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"teamId\"');\n        }\n\n        if (typeof prefs === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n\n\n        if (typeof prefs !== 'undefined') {\n            payload['prefs'] = prefs;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n}\n\nmodule.exports = Teams;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/teams.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/node-appwrite/lib/services/users.js":
/*!**********************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/users.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(action-browser)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(action-browser)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(action-browser)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(action-browser)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(action-browser)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Users extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * List users\n     *\n     * Get a list of all the project's users. You can use the query params to\n     * filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async list(queries, search) {\n        const apiPath = '/users';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create user\n     *\n     * Create a new user.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} phone\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async create(userId, email, phone, password, name) {\n        const apiPath = '/users';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create user with Argon2 password\n     *\n     * Create a new user. Password provided must be hashed with the\n     * [Argon2](https://en.wikipedia.org/wiki/Argon2) algorithm. Use the [POST\n     * /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to\n     * create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createArgon2User(userId, email, password, name) {\n        const apiPath = '/users/argon2';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create user with bcrypt password\n     *\n     * Create a new user. Password provided must be hashed with the\n     * [Bcrypt](https://en.wikipedia.org/wiki/Bcrypt) algorithm. Use the [POST\n     * /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to\n     * create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createBcryptUser(userId, email, password, name) {\n        const apiPath = '/users/bcrypt';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List Identities\n     *\n     * Get identities for all users.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listIdentities(queries, search) {\n        const apiPath = '/users/identities';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete identity\n     *\n     * Delete an identity by its unique ID.\n     *\n     * @param {string} identityId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteIdentity(identityId) {\n        const apiPath = '/users/identities/{identityId}'.replace('{identityId}', identityId);\n        let payload = {};\n        if (typeof identityId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"identityId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create user with MD5 password\n     *\n     * Create a new user. Password provided must be hashed with the\n     * [MD5](https://en.wikipedia.org/wiki/MD5) algorithm. Use the [POST\n     * /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to\n     * create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createMD5User(userId, email, password, name) {\n        const apiPath = '/users/md5';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create user with PHPass password\n     *\n     * Create a new user. Password provided must be hashed with the\n     * [PHPass](https://www.openwall.com/phpass/) algorithm. Use the [POST\n     * /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to\n     * create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createPHPassUser(userId, email, password, name) {\n        const apiPath = '/users/phpass';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create user with Scrypt password\n     *\n     * Create a new user. Password provided must be hashed with the\n     * [Scrypt](https://github.com/Tarsnap/scrypt) algorithm. Use the [POST\n     * /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to\n     * create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} passwordSalt\n     * @param {number} passwordCpu\n     * @param {number} passwordMemory\n     * @param {number} passwordParallel\n     * @param {number} passwordLength\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createScryptUser(userId, email, password, passwordSalt, passwordCpu, passwordMemory, passwordParallel, passwordLength, name) {\n        const apiPath = '/users/scrypt';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        if (typeof passwordSalt === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordSalt\"');\n        }\n\n        if (typeof passwordCpu === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordCpu\"');\n        }\n\n        if (typeof passwordMemory === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordMemory\"');\n        }\n\n        if (typeof passwordParallel === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordParallel\"');\n        }\n\n        if (typeof passwordLength === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordLength\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof passwordSalt !== 'undefined') {\n            payload['passwordSalt'] = passwordSalt;\n        }\n\n        if (typeof passwordCpu !== 'undefined') {\n            payload['passwordCpu'] = passwordCpu;\n        }\n\n        if (typeof passwordMemory !== 'undefined') {\n            payload['passwordMemory'] = passwordMemory;\n        }\n\n        if (typeof passwordParallel !== 'undefined') {\n            payload['passwordParallel'] = passwordParallel;\n        }\n\n        if (typeof passwordLength !== 'undefined') {\n            payload['passwordLength'] = passwordLength;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create user with Scrypt modified password\n     *\n     * Create a new user. Password provided must be hashed with the [Scrypt\n     * Modified](https://gist.github.com/Meldiron/eecf84a0225eccb5a378d45bb27462cc)\n     * algorithm. Use the [POST\n     * /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to\n     * create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} passwordSalt\n     * @param {string} passwordSaltSeparator\n     * @param {string} passwordSignerKey\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createScryptModifiedUser(userId, email, password, passwordSalt, passwordSaltSeparator, passwordSignerKey, name) {\n        const apiPath = '/users/scrypt-modified';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        if (typeof passwordSalt === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordSalt\"');\n        }\n\n        if (typeof passwordSaltSeparator === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordSaltSeparator\"');\n        }\n\n        if (typeof passwordSignerKey === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordSignerKey\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof passwordSalt !== 'undefined') {\n            payload['passwordSalt'] = passwordSalt;\n        }\n\n        if (typeof passwordSaltSeparator !== 'undefined') {\n            payload['passwordSaltSeparator'] = passwordSaltSeparator;\n        }\n\n        if (typeof passwordSignerKey !== 'undefined') {\n            payload['passwordSignerKey'] = passwordSignerKey;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create user with SHA password\n     *\n     * Create a new user. Password provided must be hashed with the\n     * [SHA](https://en.wikipedia.org/wiki/Secure_Hash_Algorithm) algorithm. Use\n     * the [POST /users](https://appwrite.io/docs/server/users#usersCreate)\n     * endpoint to create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {PasswordHash} passwordVersion\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createSHAUser(userId, email, password, passwordVersion, name) {\n        const apiPath = '/users/sha';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof passwordVersion !== 'undefined') {\n            payload['passwordVersion'] = passwordVersion;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get user\n     *\n     * Get a user by its unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async get(userId) {\n        const apiPath = '/users/{userId}'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete user\n     *\n     * Delete a user by its unique ID, thereby releasing it's ID. Since ID is\n     * released and can be reused, all user-related resources like documents or\n     * storage files should be deleted before user deletion. If you want to keep\n     * ID reserved, use the\n     * [updateStatus](https://appwrite.io/docs/server/users#usersUpdateStatus)\n     * endpoint instead.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async delete(userId) {\n        const apiPath = '/users/{userId}'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update email\n     *\n     * Update the user email by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateEmail(userId, email) {\n        const apiPath = '/users/{userId}/email'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update user labels\n     *\n     * Update the user labels by its unique ID. \n     * \n     * Labels can be used to grant access to resources. While teams are a way for\n     * user's to share access to a resource, labels can be defined by the\n     * developer to grant access without an invitation. See the [Permissions\n     * docs](https://appwrite.io/docs/permissions) for more info.\n     *\n     * @param {string} userId\n     * @param {string[]} labels\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateLabels(userId, labels) {\n        const apiPath = '/users/{userId}/labels'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof labels === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"labels\"');\n        }\n\n\n        if (typeof labels !== 'undefined') {\n            payload['labels'] = labels;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List user logs\n     *\n     * Get the user activity logs list by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listLogs(userId, queries) {\n        const apiPath = '/users/{userId}/logs'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List user memberships\n     *\n     * Get the user membership list by its unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listMemberships(userId) {\n        const apiPath = '/users/{userId}/memberships'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update MFA\n     *\n     * Enable or disable MFA on a user account.\n     *\n     * @param {string} userId\n     * @param {boolean} mfa\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMfa(userId, mfa) {\n        const apiPath = '/users/{userId}/mfa'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof mfa === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"mfa\"');\n        }\n\n\n        if (typeof mfa !== 'undefined') {\n            payload['mfa'] = mfa;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete Authenticator\n     *\n     * Delete an authenticator app.\n     *\n     * @param {string} userId\n     * @param {AuthenticatorType} type\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteMfaAuthenticator(userId, type) {\n        const apiPath = '/users/{userId}/mfa/authenticators/{type}'.replace('{userId}', userId).replace('{type}', type);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List Factors\n     *\n     * List the factors available on the account to be used as a MFA challange.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listMfaFactors(userId) {\n        const apiPath = '/users/{userId}/mfa/factors'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get MFA Recovery Codes\n     *\n     * Get recovery codes that can be used as backup for MFA flow by User ID.\n     * Before getting codes, they must be generated using\n     * [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes)\n     * method.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getMfaRecoveryCodes(userId) {\n        const apiPath = '/users/{userId}/mfa/recovery-codes'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Regenerate MFA Recovery Codes\n     *\n     * Regenerate recovery codes that can be used as backup for MFA flow by User\n     * ID. Before regenerating codes, they must be first generated using\n     * [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes)\n     * method.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMfaRecoveryCodes(userId) {\n        const apiPath = '/users/{userId}/mfa/recovery-codes'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create MFA Recovery Codes\n     *\n     * Generate recovery codes used as backup for MFA flow for User ID. Recovery\n     * codes can be used as a MFA verification type in\n     * [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge)\n     * method by client SDK.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createMfaRecoveryCodes(userId) {\n        const apiPath = '/users/{userId}/mfa/recovery-codes'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update name\n     *\n     * Update the user name by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateName(userId, name) {\n        const apiPath = '/users/{userId}/name'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update password\n     *\n     * Update the user password by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePassword(userId, password) {\n        const apiPath = '/users/{userId}/password'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update phone\n     *\n     * Update the user phone by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} number\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePhone(userId, number) {\n        const apiPath = '/users/{userId}/phone'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof number === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"number\"');\n        }\n\n\n        if (typeof number !== 'undefined') {\n            payload['number'] = number;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get user preferences\n     *\n     * Get the user preferences by its unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getPrefs(userId) {\n        const apiPath = '/users/{userId}/prefs'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update user preferences\n     *\n     * Update the user preferences by its unique ID. The object you pass is stored\n     * as is, and replaces any previous value. The maximum allowed prefs size is\n     * 64kB and throws error if exceeded.\n     *\n     * @param {string} userId\n     * @param {object} prefs\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePrefs(userId, prefs) {\n        const apiPath = '/users/{userId}/prefs'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof prefs === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n\n\n        if (typeof prefs !== 'undefined') {\n            payload['prefs'] = prefs;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List user sessions\n     *\n     * Get the user sessions list by its unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listSessions(userId) {\n        const apiPath = '/users/{userId}/sessions'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create session\n     *\n     * Creates a session for a user. Returns an immediately usable session object.\n     * \n     * If you want to generate a token for a custom authentication flow, use the\n     * [POST\n     * /users/{userId}/tokens](https://appwrite.io/docs/server/users#createToken)\n     * endpoint.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createSession(userId) {\n        const apiPath = '/users/{userId}/sessions'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete user sessions\n     *\n     * Delete all user's sessions by using the user's unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteSessions(userId) {\n        const apiPath = '/users/{userId}/sessions'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete user session\n     *\n     * Delete a user sessions by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteSession(userId, sessionId) {\n        const apiPath = '/users/{userId}/sessions/{sessionId}'.replace('{userId}', userId).replace('{sessionId}', sessionId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update user status\n     *\n     * Update the user status by its unique ID. Use this endpoint as an\n     * alternative to deleting a user if you want to keep user's ID reserved.\n     *\n     * @param {string} userId\n     * @param {boolean} status\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateStatus(userId, status) {\n        const apiPath = '/users/{userId}/status'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof status === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"status\"');\n        }\n\n\n        if (typeof status !== 'undefined') {\n            payload['status'] = status;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List User Targets\n     *\n     * List the messaging targets that are associated with a user.\n     *\n     * @param {string} userId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listTargets(userId, queries) {\n        const apiPath = '/users/{userId}/targets'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create User Target\n     *\n     * Create a messaging target.\n     *\n     * @param {string} userId\n     * @param {string} targetId\n     * @param {MessagingProviderType} providerType\n     * @param {string} identifier\n     * @param {string} providerId\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createTarget(userId, targetId, providerType, identifier, providerId, name) {\n        const apiPath = '/users/{userId}/targets'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n        if (typeof providerType === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerType\"');\n        }\n\n        if (typeof identifier === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"identifier\"');\n        }\n\n\n        if (typeof targetId !== 'undefined') {\n            payload['targetId'] = targetId;\n        }\n\n        if (typeof providerType !== 'undefined') {\n            payload['providerType'] = providerType;\n        }\n\n        if (typeof identifier !== 'undefined') {\n            payload['identifier'] = identifier;\n        }\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get User Target\n     *\n     * Get a user's push notification target by ID.\n     *\n     * @param {string} userId\n     * @param {string} targetId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getTarget(userId, targetId) {\n        const apiPath = '/users/{userId}/targets/{targetId}'.replace('{userId}', userId).replace('{targetId}', targetId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update User target\n     *\n     * Update a messaging target.\n     *\n     * @param {string} userId\n     * @param {string} targetId\n     * @param {string} identifier\n     * @param {string} providerId\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateTarget(userId, targetId, identifier, providerId, name) {\n        const apiPath = '/users/{userId}/targets/{targetId}'.replace('{userId}', userId).replace('{targetId}', targetId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n\n        if (typeof identifier !== 'undefined') {\n            payload['identifier'] = identifier;\n        }\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete user target\n     *\n     * Delete a messaging target.\n     *\n     * @param {string} userId\n     * @param {string} targetId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteTarget(userId, targetId) {\n        const apiPath = '/users/{userId}/targets/{targetId}'.replace('{userId}', userId).replace('{targetId}', targetId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create token\n     *\n     * Returns a token with a secret key for creating a session. If the provided\n     * user ID has not be registered, a new user will be created. Use the returned\n     * user ID and secret and submit a request to the [PUT\n     * /account/sessions/custom](https://appwrite.io/docs/references/cloud/client-web/account#updateCustomSession)\n     * endpoint to complete the login process.\n     *\n     * @param {string} userId\n     * @param {number} length\n     * @param {number} expire\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createToken(userId, length, expire) {\n        const apiPath = '/users/{userId}/tokens'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        if (typeof length !== 'undefined') {\n            payload['length'] = length;\n        }\n\n        if (typeof expire !== 'undefined') {\n            payload['expire'] = expire;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update email verification\n     *\n     * Update the user email verification status by its unique ID.\n     *\n     * @param {string} userId\n     * @param {boolean} emailVerification\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateEmailVerification(userId, emailVerification) {\n        const apiPath = '/users/{userId}/verification'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof emailVerification === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"emailVerification\"');\n        }\n\n\n        if (typeof emailVerification !== 'undefined') {\n            payload['emailVerification'] = emailVerification;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update phone verification\n     *\n     * Update the user phone verification status by its unique ID.\n     *\n     * @param {string} userId\n     * @param {boolean} phoneVerification\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePhoneVerification(userId, phoneVerification) {\n        const apiPath = '/users/{userId}/verification/phone'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof phoneVerification === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"phoneVerification\"');\n        }\n\n\n        if (typeof phoneVerification !== 'undefined') {\n            payload['phoneVerification'] = phoneVerification;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n}\n\nmodule.exports = Users;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/node-appwrite/lib/services/users.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/lib/services/users.js":
/*!**********************************************************!*\
  !*** ./node_modules/node-appwrite/lib/services/users.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Service = __webpack_require__(/*! ../service.js */ \"(rsc)/./node_modules/node-appwrite/lib/service.js\");\nconst AppwriteException = __webpack_require__(/*! ../exception.js */ \"(rsc)/./node_modules/node-appwrite/lib/exception.js\");\nconst InputFile = __webpack_require__(/*! ../inputFile.js */ \"(rsc)/./node_modules/node-appwrite/lib/inputFile.js\");\nconst client = __webpack_require__(/*! ../client.js */ \"(rsc)/./node_modules/node-appwrite/lib/client.js\");\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nconst { promisify } = __webpack_require__(/*! util */ \"util\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst { File } = __webpack_require__(/*! undici */ \"undici\");\nconst Query = __webpack_require__(/*! ../query.js */ \"(rsc)/./node_modules/node-appwrite/lib/query.js\");\n\nclass Users extends Service {\n\n     constructor(client)\n     {\n        super(client);\n     }\n\n\n    /**\n     * List users\n     *\n     * Get a list of all the project's users. You can use the query params to\n     * filter your results.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async list(queries, search) {\n        const apiPath = '/users';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create user\n     *\n     * Create a new user.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} phone\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async create(userId, email, phone, password, name) {\n        const apiPath = '/users';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof phone !== 'undefined') {\n            payload['phone'] = phone;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create user with Argon2 password\n     *\n     * Create a new user. Password provided must be hashed with the\n     * [Argon2](https://en.wikipedia.org/wiki/Argon2) algorithm. Use the [POST\n     * /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to\n     * create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createArgon2User(userId, email, password, name) {\n        const apiPath = '/users/argon2';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create user with bcrypt password\n     *\n     * Create a new user. Password provided must be hashed with the\n     * [Bcrypt](https://en.wikipedia.org/wiki/Bcrypt) algorithm. Use the [POST\n     * /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to\n     * create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createBcryptUser(userId, email, password, name) {\n        const apiPath = '/users/bcrypt';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List Identities\n     *\n     * Get identities for all users.\n     *\n     * @param {string[]} queries\n     * @param {string} search\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listIdentities(queries, search) {\n        const apiPath = '/users/identities';\n        let payload = {};\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        if (typeof search !== 'undefined') {\n            payload['search'] = search;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete identity\n     *\n     * Delete an identity by its unique ID.\n     *\n     * @param {string} identityId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteIdentity(identityId) {\n        const apiPath = '/users/identities/{identityId}'.replace('{identityId}', identityId);\n        let payload = {};\n        if (typeof identityId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"identityId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create user with MD5 password\n     *\n     * Create a new user. Password provided must be hashed with the\n     * [MD5](https://en.wikipedia.org/wiki/MD5) algorithm. Use the [POST\n     * /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to\n     * create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createMD5User(userId, email, password, name) {\n        const apiPath = '/users/md5';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create user with PHPass password\n     *\n     * Create a new user. Password provided must be hashed with the\n     * [PHPass](https://www.openwall.com/phpass/) algorithm. Use the [POST\n     * /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to\n     * create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createPHPassUser(userId, email, password, name) {\n        const apiPath = '/users/phpass';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create user with Scrypt password\n     *\n     * Create a new user. Password provided must be hashed with the\n     * [Scrypt](https://github.com/Tarsnap/scrypt) algorithm. Use the [POST\n     * /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to\n     * create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} passwordSalt\n     * @param {number} passwordCpu\n     * @param {number} passwordMemory\n     * @param {number} passwordParallel\n     * @param {number} passwordLength\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createScryptUser(userId, email, password, passwordSalt, passwordCpu, passwordMemory, passwordParallel, passwordLength, name) {\n        const apiPath = '/users/scrypt';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        if (typeof passwordSalt === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordSalt\"');\n        }\n\n        if (typeof passwordCpu === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordCpu\"');\n        }\n\n        if (typeof passwordMemory === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordMemory\"');\n        }\n\n        if (typeof passwordParallel === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordParallel\"');\n        }\n\n        if (typeof passwordLength === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordLength\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof passwordSalt !== 'undefined') {\n            payload['passwordSalt'] = passwordSalt;\n        }\n\n        if (typeof passwordCpu !== 'undefined') {\n            payload['passwordCpu'] = passwordCpu;\n        }\n\n        if (typeof passwordMemory !== 'undefined') {\n            payload['passwordMemory'] = passwordMemory;\n        }\n\n        if (typeof passwordParallel !== 'undefined') {\n            payload['passwordParallel'] = passwordParallel;\n        }\n\n        if (typeof passwordLength !== 'undefined') {\n            payload['passwordLength'] = passwordLength;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create user with Scrypt modified password\n     *\n     * Create a new user. Password provided must be hashed with the [Scrypt\n     * Modified](https://gist.github.com/Meldiron/eecf84a0225eccb5a378d45bb27462cc)\n     * algorithm. Use the [POST\n     * /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to\n     * create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {string} passwordSalt\n     * @param {string} passwordSaltSeparator\n     * @param {string} passwordSignerKey\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createScryptModifiedUser(userId, email, password, passwordSalt, passwordSaltSeparator, passwordSignerKey, name) {\n        const apiPath = '/users/scrypt-modified';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n        if (typeof passwordSalt === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordSalt\"');\n        }\n\n        if (typeof passwordSaltSeparator === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordSaltSeparator\"');\n        }\n\n        if (typeof passwordSignerKey === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"passwordSignerKey\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof passwordSalt !== 'undefined') {\n            payload['passwordSalt'] = passwordSalt;\n        }\n\n        if (typeof passwordSaltSeparator !== 'undefined') {\n            payload['passwordSaltSeparator'] = passwordSaltSeparator;\n        }\n\n        if (typeof passwordSignerKey !== 'undefined') {\n            payload['passwordSignerKey'] = passwordSignerKey;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create user with SHA password\n     *\n     * Create a new user. Password provided must be hashed with the\n     * [SHA](https://en.wikipedia.org/wiki/Secure_Hash_Algorithm) algorithm. Use\n     * the [POST /users](https://appwrite.io/docs/server/users#usersCreate)\n     * endpoint to create users with a plain text password.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @param {string} password\n     * @param {PasswordHash} passwordVersion\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createSHAUser(userId, email, password, passwordVersion, name) {\n        const apiPath = '/users/sha';\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof userId !== 'undefined') {\n            payload['userId'] = userId;\n        }\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        if (typeof passwordVersion !== 'undefined') {\n            payload['passwordVersion'] = passwordVersion;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get user\n     *\n     * Get a user by its unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async get(userId) {\n        const apiPath = '/users/{userId}'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete user\n     *\n     * Delete a user by its unique ID, thereby releasing it's ID. Since ID is\n     * released and can be reused, all user-related resources like documents or\n     * storage files should be deleted before user deletion. If you want to keep\n     * ID reserved, use the\n     * [updateStatus](https://appwrite.io/docs/server/users#usersUpdateStatus)\n     * endpoint instead.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async delete(userId) {\n        const apiPath = '/users/{userId}'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update email\n     *\n     * Update the user email by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} email\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateEmail(userId, email) {\n        const apiPath = '/users/{userId}/email'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof email === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"email\"');\n        }\n\n\n        if (typeof email !== 'undefined') {\n            payload['email'] = email;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update user labels\n     *\n     * Update the user labels by its unique ID. \n     * \n     * Labels can be used to grant access to resources. While teams are a way for\n     * user's to share access to a resource, labels can be defined by the\n     * developer to grant access without an invitation. See the [Permissions\n     * docs](https://appwrite.io/docs/permissions) for more info.\n     *\n     * @param {string} userId\n     * @param {string[]} labels\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateLabels(userId, labels) {\n        const apiPath = '/users/{userId}/labels'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof labels === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"labels\"');\n        }\n\n\n        if (typeof labels !== 'undefined') {\n            payload['labels'] = labels;\n        }\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List user logs\n     *\n     * Get the user activity logs list by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listLogs(userId, queries) {\n        const apiPath = '/users/{userId}/logs'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List user memberships\n     *\n     * Get the user membership list by its unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listMemberships(userId) {\n        const apiPath = '/users/{userId}/memberships'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update MFA\n     *\n     * Enable or disable MFA on a user account.\n     *\n     * @param {string} userId\n     * @param {boolean} mfa\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMfa(userId, mfa) {\n        const apiPath = '/users/{userId}/mfa'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof mfa === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"mfa\"');\n        }\n\n\n        if (typeof mfa !== 'undefined') {\n            payload['mfa'] = mfa;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete Authenticator\n     *\n     * Delete an authenticator app.\n     *\n     * @param {string} userId\n     * @param {AuthenticatorType} type\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteMfaAuthenticator(userId, type) {\n        const apiPath = '/users/{userId}/mfa/authenticators/{type}'.replace('{userId}', userId).replace('{type}', type);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof type === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"type\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List Factors\n     *\n     * List the factors available on the account to be used as a MFA challange.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listMfaFactors(userId) {\n        const apiPath = '/users/{userId}/mfa/factors'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get MFA Recovery Codes\n     *\n     * Get recovery codes that can be used as backup for MFA flow by User ID.\n     * Before getting codes, they must be generated using\n     * [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes)\n     * method.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getMfaRecoveryCodes(userId) {\n        const apiPath = '/users/{userId}/mfa/recovery-codes'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Regenerate MFA Recovery Codes\n     *\n     * Regenerate recovery codes that can be used as backup for MFA flow by User\n     * ID. Before regenerating codes, they must be first generated using\n     * [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes)\n     * method.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateMfaRecoveryCodes(userId) {\n        const apiPath = '/users/{userId}/mfa/recovery-codes'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('put', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create MFA Recovery Codes\n     *\n     * Generate recovery codes used as backup for MFA flow for User ID. Recovery\n     * codes can be used as a MFA verification type in\n     * [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge)\n     * method by client SDK.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createMfaRecoveryCodes(userId) {\n        const apiPath = '/users/{userId}/mfa/recovery-codes'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update name\n     *\n     * Update the user name by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateName(userId, name) {\n        const apiPath = '/users/{userId}/name'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof name === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"name\"');\n        }\n\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update password\n     *\n     * Update the user password by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} password\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePassword(userId, password) {\n        const apiPath = '/users/{userId}/password'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof password === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"password\"');\n        }\n\n\n        if (typeof password !== 'undefined') {\n            payload['password'] = password;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update phone\n     *\n     * Update the user phone by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} number\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePhone(userId, number) {\n        const apiPath = '/users/{userId}/phone'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof number === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"number\"');\n        }\n\n\n        if (typeof number !== 'undefined') {\n            payload['number'] = number;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get user preferences\n     *\n     * Get the user preferences by its unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getPrefs(userId) {\n        const apiPath = '/users/{userId}/prefs'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update user preferences\n     *\n     * Update the user preferences by its unique ID. The object you pass is stored\n     * as is, and replaces any previous value. The maximum allowed prefs size is\n     * 64kB and throws error if exceeded.\n     *\n     * @param {string} userId\n     * @param {object} prefs\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePrefs(userId, prefs) {\n        const apiPath = '/users/{userId}/prefs'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof prefs === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"prefs\"');\n        }\n\n\n        if (typeof prefs !== 'undefined') {\n            payload['prefs'] = prefs;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List user sessions\n     *\n     * Get the user sessions list by its unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listSessions(userId) {\n        const apiPath = '/users/{userId}/sessions'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create session\n     *\n     * Creates a session for a user. Returns an immediately usable session object.\n     * \n     * If you want to generate a token for a custom authentication flow, use the\n     * [POST\n     * /users/{userId}/tokens](https://appwrite.io/docs/server/users#createToken)\n     * endpoint.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createSession(userId) {\n        const apiPath = '/users/{userId}/sessions'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete user sessions\n     *\n     * Delete all user's sessions by using the user's unique ID.\n     *\n     * @param {string} userId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteSessions(userId) {\n        const apiPath = '/users/{userId}/sessions'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete user session\n     *\n     * Delete a user sessions by its unique ID.\n     *\n     * @param {string} userId\n     * @param {string} sessionId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteSession(userId, sessionId) {\n        const apiPath = '/users/{userId}/sessions/{sessionId}'.replace('{userId}', userId).replace('{sessionId}', sessionId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof sessionId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update user status\n     *\n     * Update the user status by its unique ID. Use this endpoint as an\n     * alternative to deleting a user if you want to keep user's ID reserved.\n     *\n     * @param {string} userId\n     * @param {boolean} status\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateStatus(userId, status) {\n        const apiPath = '/users/{userId}/status'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof status === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"status\"');\n        }\n\n\n        if (typeof status !== 'undefined') {\n            payload['status'] = status;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * List User Targets\n     *\n     * List the messaging targets that are associated with a user.\n     *\n     * @param {string} userId\n     * @param {string[]} queries\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async listTargets(userId, queries) {\n        const apiPath = '/users/{userId}/targets'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        if (typeof queries !== 'undefined') {\n            payload['queries'] = queries;\n        }\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create User Target\n     *\n     * Create a messaging target.\n     *\n     * @param {string} userId\n     * @param {string} targetId\n     * @param {MessagingProviderType} providerType\n     * @param {string} identifier\n     * @param {string} providerId\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createTarget(userId, targetId, providerType, identifier, providerId, name) {\n        const apiPath = '/users/{userId}/targets'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n        if (typeof providerType === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"providerType\"');\n        }\n\n        if (typeof identifier === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"identifier\"');\n        }\n\n\n        if (typeof targetId !== 'undefined') {\n            payload['targetId'] = targetId;\n        }\n\n        if (typeof providerType !== 'undefined') {\n            payload['providerType'] = providerType;\n        }\n\n        if (typeof identifier !== 'undefined') {\n            payload['identifier'] = identifier;\n        }\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Get User Target\n     *\n     * Get a user's push notification target by ID.\n     *\n     * @param {string} userId\n     * @param {string} targetId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async getTarget(userId, targetId) {\n        const apiPath = '/users/{userId}/targets/{targetId}'.replace('{userId}', userId).replace('{targetId}', targetId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n\n        return await this.client.call('get', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update User target\n     *\n     * Update a messaging target.\n     *\n     * @param {string} userId\n     * @param {string} targetId\n     * @param {string} identifier\n     * @param {string} providerId\n     * @param {string} name\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateTarget(userId, targetId, identifier, providerId, name) {\n        const apiPath = '/users/{userId}/targets/{targetId}'.replace('{userId}', userId).replace('{targetId}', targetId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n\n        if (typeof identifier !== 'undefined') {\n            payload['identifier'] = identifier;\n        }\n\n        if (typeof providerId !== 'undefined') {\n            payload['providerId'] = providerId;\n        }\n\n        if (typeof name !== 'undefined') {\n            payload['name'] = name;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Delete user target\n     *\n     * Delete a messaging target.\n     *\n     * @param {string} userId\n     * @param {string} targetId\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async deleteTarget(userId, targetId) {\n        const apiPath = '/users/{userId}/targets/{targetId}'.replace('{userId}', userId).replace('{targetId}', targetId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof targetId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"targetId\"');\n        }\n\n\n        return await this.client.call('delete', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Create token\n     *\n     * Returns a token with a secret key for creating a session. If the provided\n     * user ID has not be registered, a new user will be created. Use the returned\n     * user ID and secret and submit a request to the [PUT\n     * /account/sessions/custom](https://appwrite.io/docs/references/cloud/client-web/account#updateCustomSession)\n     * endpoint to complete the login process.\n     *\n     * @param {string} userId\n     * @param {number} length\n     * @param {number} expire\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async createToken(userId, length, expire) {\n        const apiPath = '/users/{userId}/tokens'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n\n        if (typeof length !== 'undefined') {\n            payload['length'] = length;\n        }\n\n        if (typeof expire !== 'undefined') {\n            payload['expire'] = expire;\n        }\n\n        return await this.client.call('post', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update email verification\n     *\n     * Update the user email verification status by its unique ID.\n     *\n     * @param {string} userId\n     * @param {boolean} emailVerification\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updateEmailVerification(userId, emailVerification) {\n        const apiPath = '/users/{userId}/verification'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof emailVerification === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"emailVerification\"');\n        }\n\n\n        if (typeof emailVerification !== 'undefined') {\n            payload['emailVerification'] = emailVerification;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n\n    /**\n     * Update phone verification\n     *\n     * Update the user phone verification status by its unique ID.\n     *\n     * @param {string} userId\n     * @param {boolean} phoneVerification\n     * @throws {AppwriteException}\n     * @returns {Promise}\n     */\n    async updatePhoneVerification(userId, phoneVerification) {\n        const apiPath = '/users/{userId}/verification/phone'.replace('{userId}', userId);\n        let payload = {};\n        if (typeof userId === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"userId\"');\n        }\n\n        if (typeof phoneVerification === 'undefined') {\n            throw new AppwriteException('Missing required parameter: \"phoneVerification\"');\n        }\n\n\n        if (typeof phoneVerification !== 'undefined') {\n            payload['phoneVerification'] = phoneVerification;\n        }\n\n        return await this.client.call('patch', apiPath, {\n            'content-type': 'application/json',\n        }, payload);\n    }\n}\n\nmodule.exports = Users;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/lib/services/users.js\n");

/***/ })

};
;